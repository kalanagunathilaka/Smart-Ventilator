
Smart Ventilator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  000027b0  00002844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000368  0080015a  0080015a  0000293e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000293e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000299c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cf2  00000000  00000000  00002b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a19  00000000  00000000  0000486a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109f  00000000  00000000  00005283  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  00006324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000839  00000000  00000000  00006878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000121e  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000082cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_1>
       8:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_2>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <__vector_7>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	9f 04       	cpc	r9, r15
      56:	d4 04       	cpc	r13, r4
      58:	09 05       	cpc	r16, r9
      5a:	3e 05       	cpc	r19, r14
      5c:	73 05       	cpc	r23, r3
      5e:	a8 05       	cpc	r26, r8
      60:	dd 05       	cpc	r29, r13
      62:	12 06       	cpc	r1, r18
      64:	47 06       	cpc	r4, r23
      66:	7c 06       	cpc	r7, r28
      68:	b1 06       	cpc	r11, r17
      6a:	e6 06       	cpc	r14, r22
      6c:	1b 07       	cpc	r17, r27
      6e:	59 08       	sbc	r5, r9
      70:	50 07       	cpc	r21, r16
      72:	85 07       	cpc	r24, r21
      74:	ba 07       	cpc	r27, r26
      76:	ef 07       	cpc	r30, r31
      78:	24 08       	sbc	r2, r4

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf e5       	ldi	r28, 0x5F	; 95
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e6       	ldi	r26, 0x60	; 96
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	e0 eb       	ldi	r30, 0xB0	; 176
      8e:	f7 e2       	ldi	r31, 0x27	; 39
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	aa 35       	cpi	r26, 0x5A	; 90
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	24 e0       	ldi	r18, 0x04	; 4
      9e:	aa e5       	ldi	r26, 0x5A	; 90
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a2 3c       	cpi	r26, 0xC2	; 194
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 1d 0b 	call	0x163a	; 0x163a <main>
      b0:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <delay>:

char i2c_read(){
	TWCR  = (1<<TWEN) | (1<<TWINT);	//Enable I2C and clear interrupt
	while (!(TWCR & (1<<TWINT)));	//Read successful with all data received in TWDR
	return TWDR;
      b8:	40 e0       	ldi	r20, 0x00	; 0
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	0a c0       	rjmp	.+20     	; 0xd2 <delay+0x1a>
      be:	2f 5f       	subi	r18, 0xFF	; 255
      c0:	3f 4f       	sbci	r19, 0xFF	; 255
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <delay+0x10>
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	29 37       	cpi	r18, 0x79	; 121
      ca:	31 05       	cpc	r19, r1
      cc:	c4 f3       	brlt	.-16     	; 0xbe <delay+0x6>
      ce:	4f 5f       	subi	r20, 0xFF	; 255
      d0:	5f 4f       	sbci	r21, 0xFF	; 255
      d2:	84 17       	cp	r24, r20
      d4:	95 07       	cpc	r25, r21
      d6:	b4 f7       	brge	.-20     	; 0xc4 <delay+0xc>
      d8:	08 95       	ret

000000da <toggle>:
      da:	83 b1       	in	r24, 0x03	; 3
      dc:	82 60       	ori	r24, 0x02	; 2
      de:	83 b9       	out	0x03, r24	; 3
      e0:	84 e8       	ldi	r24, 0x84	; 132
      e2:	86 bf       	out	0x36, r24	; 54
      e4:	06 b6       	in	r0, 0x36	; 54
      e6:	07 fe       	sbrs	r0, 7
      e8:	fd cf       	rjmp	.-6      	; 0xe4 <toggle+0xa>
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 5c 00 	call	0xb8	; 0xb8 <delay>
      f2:	83 b1       	in	r24, 0x03	; 3
      f4:	8d 7f       	andi	r24, 0xFD	; 253
      f6:	83 b9       	out	0x03, r24	; 3
      f8:	84 e8       	ldi	r24, 0x84	; 132
      fa:	86 bf       	out	0x36, r24	; 54
      fc:	06 b6       	in	r0, 0x36	; 54
      fe:	07 fe       	sbrs	r0, 7
     100:	fd cf       	rjmp	.-6      	; 0xfc <toggle+0x22>
     102:	08 95       	ret

00000104 <lcd_cmd_hf>:
     104:	93 b1       	in	r25, 0x03	; 3
     106:	9e 7f       	andi	r25, 0xFE	; 254
     108:	93 b9       	out	0x03, r25	; 3
     10a:	94 e8       	ldi	r25, 0x84	; 132
     10c:	96 bf       	out	0x36, r25	; 54
     10e:	06 b6       	in	r0, 0x36	; 54
     110:	07 fe       	sbrs	r0, 7
     112:	fd cf       	rjmp	.-6      	; 0x10e <lcd_cmd_hf+0xa>
     114:	93 b1       	in	r25, 0x03	; 3
     116:	9f 70       	andi	r25, 0x0F	; 15
     118:	93 b9       	out	0x03, r25	; 3
     11a:	94 e8       	ldi	r25, 0x84	; 132
     11c:	96 bf       	out	0x36, r25	; 54
     11e:	06 b6       	in	r0, 0x36	; 54
     120:	07 fe       	sbrs	r0, 7
     122:	fd cf       	rjmp	.-6      	; 0x11e <lcd_cmd_hf+0x1a>
     124:	93 b1       	in	r25, 0x03	; 3
     126:	80 7f       	andi	r24, 0xF0	; 240
     128:	89 2b       	or	r24, r25
     12a:	83 b9       	out	0x03, r24	; 3
     12c:	84 e8       	ldi	r24, 0x84	; 132
     12e:	86 bf       	out	0x36, r24	; 54
     130:	06 b6       	in	r0, 0x36	; 54
     132:	07 fe       	sbrs	r0, 7
     134:	fd cf       	rjmp	.-6      	; 0x130 <lcd_cmd_hf+0x2c>
     136:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
     13a:	08 95       	ret

0000013c <lcd_cmd>:
     13c:	cf 93       	push	r28
     13e:	c8 2f       	mov	r28, r24
     140:	83 b1       	in	r24, 0x03	; 3
     142:	8e 7f       	andi	r24, 0xFE	; 254
     144:	83 b9       	out	0x03, r24	; 3
     146:	84 e8       	ldi	r24, 0x84	; 132
     148:	86 bf       	out	0x36, r24	; 54
     14a:	06 b6       	in	r0, 0x36	; 54
     14c:	07 fe       	sbrs	r0, 7
     14e:	fd cf       	rjmp	.-6      	; 0x14a <lcd_cmd+0xe>
     150:	83 b1       	in	r24, 0x03	; 3
     152:	8f 70       	andi	r24, 0x0F	; 15
     154:	83 b9       	out	0x03, r24	; 3
     156:	84 e8       	ldi	r24, 0x84	; 132
     158:	86 bf       	out	0x36, r24	; 54
     15a:	06 b6       	in	r0, 0x36	; 54
     15c:	07 fe       	sbrs	r0, 7
     15e:	fd cf       	rjmp	.-6      	; 0x15a <lcd_cmd+0x1e>
     160:	83 b1       	in	r24, 0x03	; 3
     162:	9c 2f       	mov	r25, r28
     164:	90 7f       	andi	r25, 0xF0	; 240
     166:	89 2b       	or	r24, r25
     168:	83 b9       	out	0x03, r24	; 3
     16a:	84 e8       	ldi	r24, 0x84	; 132
     16c:	86 bf       	out	0x36, r24	; 54
     16e:	06 b6       	in	r0, 0x36	; 54
     170:	07 fe       	sbrs	r0, 7
     172:	fd cf       	rjmp	.-6      	; 0x16e <lcd_cmd+0x32>
     174:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
     178:	83 b1       	in	r24, 0x03	; 3
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	83 b9       	out	0x03, r24	; 3
     17e:	84 e8       	ldi	r24, 0x84	; 132
     180:	86 bf       	out	0x36, r24	; 54
     182:	06 b6       	in	r0, 0x36	; 54
     184:	07 fe       	sbrs	r0, 7
     186:	fd cf       	rjmp	.-6      	; 0x182 <lcd_cmd+0x46>
     188:	23 b1       	in	r18, 0x03	; 3
     18a:	30 e1       	ldi	r19, 0x10	; 16
     18c:	c3 9f       	mul	r28, r19
     18e:	c0 01       	movw	r24, r0
     190:	11 24       	eor	r1, r1
     192:	82 2b       	or	r24, r18
     194:	83 b9       	out	0x03, r24	; 3
     196:	84 e8       	ldi	r24, 0x84	; 132
     198:	86 bf       	out	0x36, r24	; 54
     19a:	06 b6       	in	r0, 0x36	; 54
     19c:	07 fe       	sbrs	r0, 7
     19e:	fd cf       	rjmp	.-6      	; 0x19a <lcd_cmd+0x5e>
     1a0:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <lcd_init>:
     1a8:	80 e3       	ldi	r24, 0x30	; 48
     1aa:	0e 94 82 00 	call	0x104	; 0x104 <lcd_cmd_hf>
     1ae:	80 e3       	ldi	r24, 0x30	; 48
     1b0:	0e 94 82 00 	call	0x104	; 0x104 <lcd_cmd_hf>
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	0e 94 82 00 	call	0x104	; 0x104 <lcd_cmd_hf>
     1ba:	88 e2       	ldi	r24, 0x28	; 40
     1bc:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
     1c0:	8c e0       	ldi	r24, 0x0C	; 12
     1c2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
     1d2:	80 e8       	ldi	r24, 0x80	; 128
     1d4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
     1d8:	08 95       	ret

000001da <lcd_dwr>:
     1da:	cf 93       	push	r28
     1dc:	c8 2f       	mov	r28, r24
     1de:	83 b1       	in	r24, 0x03	; 3
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	83 b9       	out	0x03, r24	; 3
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <lcd_dwr+0xe>
     1ee:	83 b1       	in	r24, 0x03	; 3
     1f0:	8f 70       	andi	r24, 0x0F	; 15
     1f2:	83 b9       	out	0x03, r24	; 3
     1f4:	84 e8       	ldi	r24, 0x84	; 132
     1f6:	86 bf       	out	0x36, r24	; 54
     1f8:	06 b6       	in	r0, 0x36	; 54
     1fa:	07 fe       	sbrs	r0, 7
     1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <lcd_dwr+0x1e>
     1fe:	83 b1       	in	r24, 0x03	; 3
     200:	9c 2f       	mov	r25, r28
     202:	90 7f       	andi	r25, 0xF0	; 240
     204:	89 2b       	or	r24, r25
     206:	83 b9       	out	0x03, r24	; 3
     208:	84 e8       	ldi	r24, 0x84	; 132
     20a:	86 bf       	out	0x36, r24	; 54
     20c:	06 b6       	in	r0, 0x36	; 54
     20e:	07 fe       	sbrs	r0, 7
     210:	fd cf       	rjmp	.-6      	; 0x20c <lcd_dwr+0x32>
     212:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
     216:	83 b1       	in	r24, 0x03	; 3
     218:	8f 70       	andi	r24, 0x0F	; 15
     21a:	83 b9       	out	0x03, r24	; 3
     21c:	84 e8       	ldi	r24, 0x84	; 132
     21e:	86 bf       	out	0x36, r24	; 54
     220:	06 b6       	in	r0, 0x36	; 54
     222:	07 fe       	sbrs	r0, 7
     224:	fd cf       	rjmp	.-6      	; 0x220 <lcd_dwr+0x46>
     226:	23 b1       	in	r18, 0x03	; 3
     228:	30 e1       	ldi	r19, 0x10	; 16
     22a:	c3 9f       	mul	r28, r19
     22c:	c0 01       	movw	r24, r0
     22e:	11 24       	eor	r1, r1
     230:	82 2b       	or	r24, r18
     232:	83 b9       	out	0x03, r24	; 3
     234:	84 e8       	ldi	r24, 0x84	; 132
     236:	86 bf       	out	0x36, r24	; 54
     238:	06 b6       	in	r0, 0x36	; 54
     23a:	07 fe       	sbrs	r0, 7
     23c:	fd cf       	rjmp	.-6      	; 0x238 <lcd_dwr+0x5e>
     23e:	0e 94 6d 00 	call	0xda	; 0xda <toggle>
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <lcd_msg>:
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	ec 01       	movw	r28, r24
     24c:	03 c0       	rjmp	.+6      	; 0x254 <lcd_msg+0xe>
     24e:	21 96       	adiw	r28, 0x01	; 1
     250:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_dwr>
     254:	88 81       	ld	r24, Y
     256:	81 11       	cpse	r24, r1
     258:	fa cf       	rjmp	.-12     	; 0x24e <lcd_msg+0x8>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <i2c_init>:
     260:	82 e6       	ldi	r24, 0x62	; 98
     262:	80 b9       	out	0x00, r24	; 0
     264:	84 e0       	ldi	r24, 0x04	; 4
     266:	86 bf       	out	0x36, r24	; 54
     268:	11 b8       	out	0x01, r1	; 1
     26a:	08 95       	ret

0000026c <i2c_start>:
     26c:	84 ea       	ldi	r24, 0xA4	; 164
     26e:	86 bf       	out	0x36, r24	; 54
     270:	06 b6       	in	r0, 0x36	; 54
     272:	07 fe       	sbrs	r0, 7
     274:	fd cf       	rjmp	.-6      	; 0x270 <i2c_start+0x4>
     276:	08 95       	ret

00000278 <i2c_write>:
     278:	83 b9       	out	0x03, r24	; 3
     27a:	84 e8       	ldi	r24, 0x84	; 132
     27c:	86 bf       	out	0x36, r24	; 54
     27e:	06 b6       	in	r0, 0x36	; 54
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <i2c_write+0x6>
     284:	08 95       	ret

00000286 <USART_Init>:

char USART_BUFFER[500] = "";
char data[150]; // GSM Data Buffer
void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
     286:	2a b1       	in	r18, 0x0a	; 10
     288:	28 69       	ori	r18, 0x98	; 152
     28a:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
     28c:	20 b5       	in	r18, 0x20	; 32
     28e:	26 68       	ori	r18, 0x86	; 134
     290:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
     292:	dc 01       	movw	r26, r24
     294:	cb 01       	movw	r24, r22
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	aa 1f       	adc	r26, r26
     29c:	bb 1f       	adc	r27, r27
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	aa 1f       	adc	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	9c 01       	movw	r18, r24
     2a8:	ad 01       	movw	r20, r26
     2aa:	22 0f       	add	r18, r18
     2ac:	33 1f       	adc	r19, r19
     2ae:	44 1f       	adc	r20, r20
     2b0:	55 1f       	adc	r21, r21
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	72 e1       	ldi	r23, 0x12	; 18
     2be:	8a e7       	ldi	r24, 0x7A	; 122
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__udivmodsi4>
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	82 0f       	add	r24, r18
     2ca:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
     2cc:	da 01       	movw	r26, r20
     2ce:	c9 01       	movw	r24, r18
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	a1 09       	sbc	r26, r1
     2d4:	b1 09       	sbc	r27, r1
     2d6:	89 2f       	mov	r24, r25
     2d8:	9a 2f       	mov	r25, r26
     2da:	ab 2f       	mov	r26, r27
     2dc:	bb 27       	eor	r27, r27
     2de:	80 bd       	out	0x20, r24	; 32
     2e0:	08 95       	ret

000002e2 <USART_TxChar>:
}
void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
     2e2:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     2e4:	5d 9b       	sbis	0x0b, 5	; 11
     2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <USART_TxChar+0x2>
}
     2e8:	08 95       	ret

000002ea <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     2ea:	0f 93       	push	r16
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	8c 01       	movw	r16, r24
	int i=0;
     2f4:	c0 e0       	ldi	r28, 0x00	; 0
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
     2f8:	03 c0       	rjmp	.+6      	; 0x300 <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     2fa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <USART_TxChar>
		i++;
     2fe:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     300:	f8 01       	movw	r30, r16
     302:	ec 0f       	add	r30, r28
     304:	fd 1f       	adc	r31, r29
     306:	80 81       	ld	r24, Z
     308:	81 11       	cpse	r24, r1
     30a:	f7 cf       	rjmp	.-18     	; 0x2fa <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	08 95       	ret

00000316 <sendSMS>:
#define GSM_H_

#define ISP "mobitel"
#define APN "dialog"
#include "USART.h"
void sendSMS(char no[], const char *string) {
     316:	bf 92       	push	r11
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	c4 56       	subi	r28, 0x64	; 100
     32e:	d1 09       	sbc	r29, r1
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
     33a:	18 2f       	mov	r17, r24
     33c:	09 2f       	mov	r16, r25
     33e:	c6 2e       	mov	r12, r22
     340:	b7 2e       	mov	r11, r23
	USART_SendString("AT\r");
     342:	8e e6       	ldi	r24, 0x6E	; 110
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34a:	8f e1       	ldi	r24, 0x1F	; 31
     34c:	9e e4       	ldi	r25, 0x4E	; 78
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <sendSMS+0x38>
     352:	00 c0       	rjmp	.+0      	; 0x354 <sendSMS+0x3e>
     354:	00 00       	nop
	_delay_ms(10);
	USART_SendString("AT+CMGF=1\r");
     356:	82 e7       	ldi	r24, 0x72	; 114
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
     35e:	ef e1       	ldi	r30, 0x1F	; 31
     360:	fe e4       	ldi	r31, 0x4E	; 78
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <sendSMS+0x4c>
     366:	00 c0       	rjmp	.+0      	; 0x368 <sendSMS+0x52>
     368:	00 00       	nop
	_delay_ms(10);
	char data_buffer[100];
	sprintf(data_buffer,"AT+CMGS=%s\r",no);
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	8d e7       	ldi	r24, 0x7D	; 125
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9f 93       	push	r25
     374:	8f 93       	push	r24
     376:	8e 01       	movw	r16, r28
     378:	0f 5f       	subi	r16, 0xFF	; 255
     37a:	1f 4f       	sbci	r17, 0xFF	; 255
     37c:	1f 93       	push	r17
     37e:	0f 93       	push	r16
     380:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <sprintf>
	USART_SendString(data_buffer);
     384:	c8 01       	movw	r24, r16
     386:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
	memset(USART_BUFFER, 0, 100);
     38a:	0f 2e       	mov	r0, r31
     38c:	fa e5       	ldi	r31, 0x5A	; 90
     38e:	ef 2e       	mov	r14, r31
     390:	f1 e0       	ldi	r31, 0x01	; 1
     392:	ff 2e       	mov	r15, r31
     394:	f0 2d       	mov	r31, r0
     396:	0f 2e       	mov	r0, r31
     398:	f4 e6       	ldi	r31, 0x64	; 100
     39a:	df 2e       	mov	r13, r31
     39c:	f0 2d       	mov	r31, r0
     39e:	f7 01       	movw	r30, r14
     3a0:	8d 2d       	mov	r24, r13
     3a2:	11 92       	st	Z+, r1
     3a4:	8a 95       	dec	r24
     3a6:	e9 f7       	brne	.-6      	; 0x3a2 <sendSMS+0x8c>
	sprintf(data_buffer,"%s\r",string);
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	85 e8       	ldi	r24, 0x85	; 133
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	9f 93       	push	r25
     3b2:	8f 93       	push	r24
     3b4:	1f 93       	push	r17
     3b6:	0f 93       	push	r16
     3b8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <sprintf>
	USART_SendString(data_buffer);
     3bc:	c8 01       	movw	r24, r16
     3be:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
	memset(USART_BUFFER, 0, 100);//clear data buffer
     3c2:	f7 01       	movw	r30, r14
     3c4:	11 92       	st	Z+, r1
     3c6:	da 94       	dec	r13
     3c8:	e9 f7       	brne	.-6      	; 0x3c4 <sendSMS+0xae>

}
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	f8 94       	cli
     3ce:	de bf       	out	0x3e, r29	; 62
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	cd bf       	out	0x3d, r28	; 61
     3d4:	cc 59       	subi	r28, 0x9C	; 156
     3d6:	df 4f       	sbci	r29, 0xFF	; 255
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	df 90       	pop	r13
     3f0:	cf 90       	pop	r12
     3f2:	bf 90       	pop	r11
     3f4:	08 95       	ret

000003f6 <GSMConnect>:
void GSMConnect(){
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	c4 56       	subi	r28, 0x64	; 100
     404:	d1 09       	sbc	r29, r1
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	f8 94       	cli
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	cd bf       	out	0x3d, r28	; 61
	USART_SendString("ATE0\r");
     410:	89 e8       	ldi	r24, 0x89	; 137
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
     418:	8f e1       	ldi	r24, 0x1F	; 31
     41a:	9e e4       	ldi	r25, 0x4E	; 78
     41c:	01 97       	sbiw	r24, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     422:	00 00       	nop
	_delay_ms(10);
	char data_buffer[100];
	sprintf(data_buffer,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r",APN,ISP,ISP);
     424:	8f e8       	ldi	r24, 0x8F	; 143
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	9f 93       	push	r25
     42a:	8f 93       	push	r24
     42c:	9f 93       	push	r25
     42e:	8f 93       	push	r24
     430:	87 e9       	ldi	r24, 0x97	; 151
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	9f 93       	push	r25
     436:	8f 93       	push	r24
     438:	8e e9       	ldi	r24, 0x9E	; 158
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	8e 01       	movw	r16, r28
     442:	0f 5f       	subi	r16, 0xFF	; 255
     444:	1f 4f       	sbci	r17, 0xFF	; 255
     446:	1f 93       	push	r17
     448:	0f 93       	push	r16
     44a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <sprintf>
	USART_SendString(data_buffer);
     44e:	c8 01       	movw	r24, r16
     450:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
	memset(USART_BUFFER, 0, 100);
     454:	84 e6       	ldi	r24, 0x64	; 100
     456:	ea e5       	ldi	r30, 0x5A	; 90
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	df 01       	movw	r26, r30
     45c:	1d 92       	st	X+, r1
     45e:	8a 95       	dec	r24
     460:	e9 f7       	brne	.-6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     462:	8f e1       	ldi	r24, 0x1F	; 31
     464:	9e e4       	ldi	r25, 0x4E	; 78
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     46c:	00 00       	nop
	_delay_ms(10);
	USART_SendString("AT+SAPBR=1,1\r");
     46e:	86 eb       	ldi	r24, 0xB6	; 182
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_SendString>
}
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	de bf       	out	0x3e, r29	; 62
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	cc 59       	subi	r28, 0x9C	; 156
     482:	df 4f       	sbci	r29, 0xFF	; 255
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <openSolenoidValves>:
#define SOLENOIDVALVES_H_

unsigned long case_num1;
unsigned long prev_millis1;
unsigned long need_millis1;
void openSolenoidValves(double oxygen, double air) {
     498:	8f 92       	push	r8
     49a:	9f 92       	push	r9
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	0f 93       	push	r16
     4aa:	1f 93       	push	r17
     4ac:	4b 01       	movw	r8, r22
     4ae:	5c 01       	movw	r10, r24
     4b0:	ca 01       	movw	r24, r20
     4b2:	b9 01       	movw	r22, r18
	air=air*1000;
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	4a e7       	ldi	r20, 0x7A	; 122
     4ba:	54 e4       	ldi	r21, 0x44	; 68
     4bc:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
     4c0:	6b 01       	movw	r12, r22
     4c2:	7c 01       	movw	r14, r24
	oxygen=oxygen*1000;
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	4a e7       	ldi	r20, 0x7A	; 122
     4ca:	54 e4       	ldi	r21, 0x44	; 68
     4cc:	c5 01       	movw	r24, r10
     4ce:	b4 01       	movw	r22, r8
     4d0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
     4d4:	4b 01       	movw	r8, r22
     4d6:	5c 01       	movw	r10, r24
	
	
	
	
	if(air>oxygen){
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__gesf2>
     4e4:	18 16       	cp	r1, r24
     4e6:	0c f0       	brlt	.+2      	; 0x4ea <openSolenoidValves+0x52>
     4e8:	b7 c1       	rjmp	.+878    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		if(prev_millis1==NULL){
     4ea:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <prev_millis1>
     4ee:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <prev_millis1+0x1>
     4f2:	89 2b       	or	r24, r25
     4f4:	09 f0       	breq	.+2      	; 0x4f8 <openSolenoidValves+0x60>
     4f6:	40 c0       	rjmp	.+128    	; 0x578 <openSolenoidValves+0xe0>
			
			prev_millis1=millis();
     4f8:	0e 94 92 0c 	call	0x1924	; 0x1924 <millis>
     4fc:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <prev_millis1>
     500:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <prev_millis1+0x1>
     504:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <prev_millis1+0x2>
     508:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <prev_millis1+0x3>
			need_millis1=oxygen+prev_millis1;
     50c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     510:	a5 01       	movw	r20, r10
     512:	94 01       	movw	r18, r8
     514:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     518:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     51c:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <need_millis1>
     520:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <need_millis1+0x1>
     524:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <need_millis1+0x2>
     528:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <need_millis1+0x3>
			case_num1=1;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     538:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     53c:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     540:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
			PORTC = PORTC | (1<<2);  //open oxygen(normally closed valve)
     544:	85 b3       	in	r24, 0x15	; 21
     546:	84 60       	ori	r24, 0x04	; 4
     548:	85 bb       	out	0x15, r24	; 21
			PORTC = PORTC & (~(1<<3)); //open air (normally open valve)
     54a:	85 b3       	in	r24, 0x15	; 21
     54c:	87 7f       	andi	r24, 0xF7	; 247
     54e:	85 bb       	out	0x15, r24	; 21
			case_num1++;
     550:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     554:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     558:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     55c:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	a1 1d       	adc	r26, r1
     564:	b1 1d       	adc	r27, r1
     566:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     56a:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     56e:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     572:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
     576:	70 c1       	rjmp	.+736    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			}else if(need_millis1<millis()){
     578:	0e 94 92 0c 	call	0x1924	; 0x1924 <millis>
     57c:	00 91 03 04 	lds	r16, 0x0403	; 0x800403 <need_millis1>
     580:	10 91 04 04 	lds	r17, 0x0404	; 0x800404 <need_millis1+0x1>
     584:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <need_millis1+0x2>
     588:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <need_millis1+0x3>
     58c:	06 17       	cp	r16, r22
     58e:	17 07       	cpc	r17, r23
     590:	28 07       	cpc	r18, r24
     592:	39 07       	cpc	r19, r25
     594:	08 f0       	brcs	.+2      	; 0x598 <openSolenoidValves+0x100>
     596:	85 c0       	rjmp	.+266    	; 0x6a2 <openSolenoidValves+0x20a>
			
			switch(case_num1){
     598:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     59c:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     5a0:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     5a4:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	91 05       	cpc	r25, r1
     5ac:	a1 05       	cpc	r26, r1
     5ae:	b1 05       	cpc	r27, r1
     5b0:	29 f0       	breq	.+10     	; 0x5bc <openSolenoidValves+0x124>
     5b2:	03 97       	sbiw	r24, 0x03	; 3
     5b4:	a1 05       	cpc	r26, r1
     5b6:	b1 05       	cpc	r27, r1
     5b8:	a1 f1       	breq	.+104    	; 0x622 <openSolenoidValves+0x18a>
     5ba:	62 c0       	rjmp	.+196    	; 0x680 <openSolenoidValves+0x1e8>
				
				case 2:PORTC = PORTC & (~(1<<2));case_num1++;need_millis1=need_millis1+air-oxygen;break; //close oxygen
     5bc:	85 b3       	in	r24, 0x15	; 21
     5be:	8b 7f       	andi	r24, 0xFB	; 251
     5c0:	85 bb       	out	0x15, r24	; 21
     5c2:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     5c6:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     5ca:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     5ce:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     5dc:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     5e0:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     5e4:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
     5e8:	60 91 03 04 	lds	r22, 0x0403	; 0x800403 <need_millis1>
     5ec:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <need_millis1+0x1>
     5f0:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <need_millis1+0x2>
     5f4:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <need_millis1+0x3>
     5f8:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     5fc:	a7 01       	movw	r20, r14
     5fe:	96 01       	movw	r18, r12
     600:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     604:	a5 01       	movw	r20, r10
     606:	94 01       	movw	r18, r8
     608:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__subsf3>
     60c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     610:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <need_millis1>
     614:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <need_millis1+0x1>
     618:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <need_millis1+0x2>
     61c:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <need_millis1+0x3>
     620:	1b c1       	rjmp	.+566    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
				case 3:PORTC = PORTC | (1<<3);case_num1++;need_millis1=need_millis1+air;break;//close air
     622:	85 b3       	in	r24, 0x15	; 21
     624:	88 60       	ori	r24, 0x08	; 8
     626:	85 bb       	out	0x15, r24	; 21
     628:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     62c:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     630:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     634:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	a1 1d       	adc	r26, r1
     63c:	b1 1d       	adc	r27, r1
     63e:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     642:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     646:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     64a:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
     64e:	60 91 03 04 	lds	r22, 0x0403	; 0x800403 <need_millis1>
     652:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <need_millis1+0x1>
     656:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <need_millis1+0x2>
     65a:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <need_millis1+0x3>
     65e:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     662:	a7 01       	movw	r20, r14
     664:	96 01       	movw	r18, r12
     666:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     66a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     66e:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <need_millis1>
     672:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <need_millis1+0x1>
     676:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <need_millis1+0x2>
     67a:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <need_millis1+0x3>
     67e:	ec c0       	rjmp	.+472    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
				default:case_num1=NULL;prev_millis1=NULL;
     680:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <case_num1>
     684:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <case_num1+0x1>
     688:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <case_num1+0x2>
     68c:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <case_num1+0x3>
     690:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <prev_millis1>
     694:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <prev_millis1+0x1>
     698:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <prev_millis1+0x2>
     69c:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <prev_millis1+0x3>
     6a0:	db c0       	rjmp	.+438    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			}
			
			
			
			}else {
			if(prev_millis1==NULL){
     6a2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <prev_millis1>
     6a6:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <prev_millis1+0x1>
     6aa:	89 2b       	or	r24, r25
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <openSolenoidValves+0x218>
     6ae:	40 c0       	rjmp	.+128    	; 0x730 <openSolenoidValves+0x298>
				
				prev_millis1=millis();
     6b0:	0e 94 92 0c 	call	0x1924	; 0x1924 <millis>
     6b4:	60 93 07 04 	sts	0x0407, r22	; 0x800407 <prev_millis1>
     6b8:	70 93 08 04 	sts	0x0408, r23	; 0x800408 <prev_millis1+0x1>
     6bc:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <prev_millis1+0x2>
     6c0:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <prev_millis1+0x3>
				need_millis1=air+prev_millis1;
     6c4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     6c8:	a7 01       	movw	r20, r14
     6ca:	96 01       	movw	r18, r12
     6cc:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     6d0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     6d4:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <need_millis1>
     6d8:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <need_millis1+0x1>
     6dc:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <need_millis1+0x2>
     6e0:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <need_millis1+0x3>
				case_num1=1;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	a0 e0       	ldi	r26, 0x00	; 0
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     6f0:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     6f4:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     6f8:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
				PORTC = PORTC | (1 << 2); //open oxygen(normally closed valve)
     6fc:	85 b3       	in	r24, 0x15	; 21
     6fe:	84 60       	ori	r24, 0x04	; 4
     700:	85 bb       	out	0x15, r24	; 21
				PORTC = PORTC & (~(1 << 3)); //open air (normally open valve)
     702:	85 b3       	in	r24, 0x15	; 21
     704:	87 7f       	andi	r24, 0xF7	; 247
     706:	85 bb       	out	0x15, r24	; 21
				case_num1++;
     708:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     70c:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     710:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     714:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	a1 1d       	adc	r26, r1
     71c:	b1 1d       	adc	r27, r1
     71e:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     722:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     726:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     72a:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
     72e:	94 c0       	rjmp	.+296    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
				}else if(need_millis1<millis()){
     730:	0e 94 92 0c 	call	0x1924	; 0x1924 <millis>
     734:	00 91 03 04 	lds	r16, 0x0403	; 0x800403 <need_millis1>
     738:	10 91 04 04 	lds	r17, 0x0404	; 0x800404 <need_millis1+0x1>
     73c:	20 91 05 04 	lds	r18, 0x0405	; 0x800405 <need_millis1+0x2>
     740:	30 91 06 04 	lds	r19, 0x0406	; 0x800406 <need_millis1+0x3>
     744:	06 17       	cp	r16, r22
     746:	17 07       	cpc	r17, r23
     748:	28 07       	cpc	r18, r24
     74a:	39 07       	cpc	r19, r25
     74c:	08 f0       	brcs	.+2      	; 0x750 <openSolenoidValves+0x2b8>
     74e:	84 c0       	rjmp	.+264    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
				
				switch(case_num1){
     750:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     754:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     758:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     75c:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	91 05       	cpc	r25, r1
     764:	a1 05       	cpc	r26, r1
     766:	b1 05       	cpc	r27, r1
     768:	29 f0       	breq	.+10     	; 0x774 <openSolenoidValves+0x2dc>
     76a:	03 97       	sbiw	r24, 0x03	; 3
     76c:	a1 05       	cpc	r26, r1
     76e:	b1 05       	cpc	r27, r1
     770:	a1 f1       	breq	.+104    	; 0x7da <openSolenoidValves+0x342>
     772:	62 c0       	rjmp	.+196    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
					
					case 2:PORTC = PORTC | (1<<3);case_num1++;need_millis1=need_millis1+oxygen-air;break; //close air
     774:	85 b3       	in	r24, 0x15	; 21
     776:	88 60       	ori	r24, 0x08	; 8
     778:	85 bb       	out	0x15, r24	; 21
     77a:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     77e:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     782:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     786:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	a1 1d       	adc	r26, r1
     78e:	b1 1d       	adc	r27, r1
     790:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     794:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     798:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     79c:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
     7a0:	60 91 03 04 	lds	r22, 0x0403	; 0x800403 <need_millis1>
     7a4:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <need_millis1+0x1>
     7a8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <need_millis1+0x2>
     7ac:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <need_millis1+0x3>
     7b0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     7b4:	a5 01       	movw	r20, r10
     7b6:	94 01       	movw	r18, r8
     7b8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     7bc:	a7 01       	movw	r20, r14
     7be:	96 01       	movw	r18, r12
     7c0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__subsf3>
     7c4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     7c8:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <need_millis1>
     7cc:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <need_millis1+0x1>
     7d0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <need_millis1+0x2>
     7d4:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <need_millis1+0x3>
     7d8:	3f c0       	rjmp	.+126    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
					case 3:PORTC = PORTC & (~(1<<2));case_num1++;need_millis1=need_millis1+oxygen;break;//close oxygen
     7da:	85 b3       	in	r24, 0x15	; 21
     7dc:	8b 7f       	andi	r24, 0xFB	; 251
     7de:	85 bb       	out	0x15, r24	; 21
     7e0:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <case_num1>
     7e4:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <case_num1+0x1>
     7e8:	a0 91 52 03 	lds	r26, 0x0352	; 0x800352 <case_num1+0x2>
     7ec:	b0 91 53 03 	lds	r27, 0x0353	; 0x800353 <case_num1+0x3>
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	a1 1d       	adc	r26, r1
     7f4:	b1 1d       	adc	r27, r1
     7f6:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <case_num1>
     7fa:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <case_num1+0x1>
     7fe:	a0 93 52 03 	sts	0x0352, r26	; 0x800352 <case_num1+0x2>
     802:	b0 93 53 03 	sts	0x0353, r27	; 0x800353 <case_num1+0x3>
     806:	60 91 03 04 	lds	r22, 0x0403	; 0x800403 <need_millis1>
     80a:	70 91 04 04 	lds	r23, 0x0404	; 0x800404 <need_millis1+0x1>
     80e:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <need_millis1+0x2>
     812:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <need_millis1+0x3>
     816:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <__floatunsisf>
     81a:	a5 01       	movw	r20, r10
     81c:	94 01       	movw	r18, r8
     81e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__addsf3>
     822:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <__fixunssfsi>
     826:	60 93 03 04 	sts	0x0403, r22	; 0x800403 <need_millis1>
     82a:	70 93 04 04 	sts	0x0404, r23	; 0x800404 <need_millis1+0x1>
     82e:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <need_millis1+0x2>
     832:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <need_millis1+0x3>
     836:	10 c0       	rjmp	.+32     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
					default:case_num1=NULL;prev_millis1=NULL;
     838:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <case_num1>
     83c:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <case_num1+0x1>
     840:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <case_num1+0x2>
     844:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <case_num1+0x3>
     848:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <prev_millis1>
     84c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <prev_millis1+0x1>
     850:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <prev_millis1+0x2>
     854:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <prev_millis1+0x3>
			}

		}

	}
}
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	08 95       	ret

0000086e <startStepperMotor>:

unsigned long prev_millis0;
unsigned long need_millis0;
int case_num0;

void startStepperMotor(int breathPerMin, int BreathLength) {
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
	if(prev_millis0==NULL){
     878:	80 91 b8 04 	lds	r24, 0x04B8	; 0x8004b8 <prev_millis0>
     87c:	90 91 b9 04 	lds	r25, 0x04B9	; 0x8004b9 <prev_millis0+0x1>
     880:	89 2b       	or	r24, r25
     882:	09 f0       	breq	.+2      	; 0x886 <startStepperMotor+0x18>
     884:	3f c0       	rjmp	.+126    	; 0x904 <startStepperMotor+0x96>
		
		prev_millis0=millis();
     886:	0e 94 92 0c 	call	0x1924	; 0x1924 <millis>
     88a:	8b 01       	movw	r16, r22
     88c:	9c 01       	movw	r18, r24
     88e:	60 93 b8 04 	sts	0x04B8, r22	; 0x8004b8 <prev_millis0>
     892:	70 93 b9 04 	sts	0x04B9, r23	; 0x8004b9 <prev_millis0+0x1>
     896:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <prev_millis0+0x2>
     89a:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <prev_millis0+0x3>
		need_millis0=30000/(breathPerMin*10)+prev_millis0;
     89e:	ce 01       	movw	r24, r28
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	be 01       	movw	r22, r28
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	66 0f       	add	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	68 0f       	add	r22, r24
     8b4:	79 1f       	adc	r23, r25
     8b6:	80 e3       	ldi	r24, 0x30	; 48
     8b8:	95 e7       	ldi	r25, 0x75	; 117
     8ba:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     8be:	cb 01       	movw	r24, r22
     8c0:	77 0f       	add	r23, r23
     8c2:	aa 0b       	sbc	r26, r26
     8c4:	bb 0b       	sbc	r27, r27
     8c6:	08 0f       	add	r16, r24
     8c8:	19 1f       	adc	r17, r25
     8ca:	2a 1f       	adc	r18, r26
     8cc:	3b 1f       	adc	r19, r27
     8ce:	00 93 55 03 	sts	0x0355, r16	; 0x800355 <need_millis0>
     8d2:	10 93 56 03 	sts	0x0356, r17	; 0x800356 <need_millis0+0x1>
     8d6:	20 93 57 03 	sts	0x0357, r18	; 0x800357 <need_millis0+0x2>
     8da:	30 93 58 03 	sts	0x0358, r19	; 0x800358 <need_millis0+0x3>
		case_num0=1;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     8e6:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
		PORTC = PORTC | (1<<4);case_num0++;
     8ea:	85 b3       	in	r24, 0x15	; 21
     8ec:	80 61       	ori	r24, 0x10	; 16
     8ee:	85 bb       	out	0x15, r24	; 21
     8f0:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     8f4:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     8fe:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     902:	e3 c3       	rjmp	.+1990   	; 0x10ca <startStepperMotor+0x85c>
		}else if(need_millis0<millis()){
     904:	0e 94 92 0c 	call	0x1924	; 0x1924 <millis>
     908:	00 91 55 03 	lds	r16, 0x0355	; 0x800355 <need_millis0>
     90c:	10 91 56 03 	lds	r17, 0x0356	; 0x800356 <need_millis0+0x1>
     910:	20 91 57 03 	lds	r18, 0x0357	; 0x800357 <need_millis0+0x2>
     914:	30 91 58 03 	lds	r19, 0x0358	; 0x800358 <need_millis0+0x3>
     918:	06 17       	cp	r16, r22
     91a:	17 07       	cpc	r17, r23
     91c:	28 07       	cpc	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	08 f0       	brcs	.+2      	; 0x924 <startStepperMotor+0xb6>
     922:	d3 c3       	rjmp	.+1958   	; 0x10ca <startStepperMotor+0x85c>
		
		switch(case_num0){
     924:	e0 91 fd 03 	lds	r30, 0x03FD	; 0x8003fd <case_num0>
     928:	f0 91 fe 03 	lds	r31, 0x03FE	; 0x8003fe <case_num0+0x1>
     92c:	32 97       	sbiw	r30, 0x02	; 2
     92e:	e3 31       	cpi	r30, 0x13	; 19
     930:	f1 05       	cpc	r31, r1
     932:	08 f0       	brcs	.+2      	; 0x936 <startStepperMotor+0xc8>
     934:	be c3       	rjmp	.+1916   	; 0x10b2 <startStepperMotor+0x844>
     936:	e6 5d       	subi	r30, 0xD6	; 214
     938:	ff 4f       	sbci	r31, 0xFF	; 255
     93a:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <__tablejump2__>
			
			case 2:{PORTC = PORTC | (1<<6);
     93e:	85 b3       	in	r24, 0x15	; 21
     940:	80 64       	ori	r24, 0x40	; 64
     942:	85 bb       	out	0x15, r24	; 21
				case_num0++;
     944:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     948:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     952:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     956:	ce 01       	movw	r24, r28
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	be 01       	movw	r22, r28
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	66 0f       	add	r22, r22
     964:	77 1f       	adc	r23, r23
     966:	66 0f       	add	r22, r22
     968:	77 1f       	adc	r23, r23
     96a:	68 0f       	add	r22, r24
     96c:	79 1f       	adc	r23, r25
     96e:	80 e3       	ldi	r24, 0x30	; 48
     970:	95 e7       	ldi	r25, 0x75	; 117
     972:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     976:	ab 01       	movw	r20, r22
     978:	77 0f       	add	r23, r23
     97a:	66 0b       	sbc	r22, r22
     97c:	77 0b       	sbc	r23, r23
     97e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     982:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     986:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     98a:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     98e:	84 0f       	add	r24, r20
     990:	95 1f       	adc	r25, r21
     992:	a6 1f       	adc	r26, r22
     994:	b7 1f       	adc	r27, r23
     996:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     99a:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     99e:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     9a2:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     9a6:	91 c3       	rjmp	.+1826   	; 0x10ca <startStepperMotor+0x85c>
			case 3:{PORTC = PORTC & (~(1<<4));
     9a8:	85 b3       	in	r24, 0x15	; 21
     9aa:	8f 7e       	andi	r24, 0xEF	; 239
     9ac:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     9ae:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     9b2:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     9bc:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     9c0:	ce 01       	movw	r24, r28
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	be 01       	movw	r22, r28
     9c8:	66 0f       	add	r22, r22
     9ca:	77 1f       	adc	r23, r23
     9cc:	66 0f       	add	r22, r22
     9ce:	77 1f       	adc	r23, r23
     9d0:	66 0f       	add	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	68 0f       	add	r22, r24
     9d6:	79 1f       	adc	r23, r25
     9d8:	80 e3       	ldi	r24, 0x30	; 48
     9da:	95 e7       	ldi	r25, 0x75	; 117
     9dc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     9e0:	ab 01       	movw	r20, r22
     9e2:	77 0f       	add	r23, r23
     9e4:	66 0b       	sbc	r22, r22
     9e6:	77 0b       	sbc	r23, r23
     9e8:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     9ec:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     9f0:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     9f4:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     9f8:	84 0f       	add	r24, r20
     9fa:	95 1f       	adc	r25, r21
     9fc:	a6 1f       	adc	r26, r22
     9fe:	b7 1f       	adc	r27, r23
     a00:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     a04:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     a08:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     a0c:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     a10:	5c c3       	rjmp	.+1720   	; 0x10ca <startStepperMotor+0x85c>
			case 4:{PORTC = PORTC | (1<<5);
     a12:	85 b3       	in	r24, 0x15	; 21
     a14:	80 62       	ori	r24, 0x20	; 32
     a16:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     a18:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     a1c:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     a26:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     a2a:	ce 01       	movw	r24, r28
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	be 01       	movw	r22, r28
     a32:	66 0f       	add	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	66 0f       	add	r22, r22
     a38:	77 1f       	adc	r23, r23
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	68 0f       	add	r22, r24
     a40:	79 1f       	adc	r23, r25
     a42:	80 e3       	ldi	r24, 0x30	; 48
     a44:	95 e7       	ldi	r25, 0x75	; 117
     a46:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     a4a:	ab 01       	movw	r20, r22
     a4c:	77 0f       	add	r23, r23
     a4e:	66 0b       	sbc	r22, r22
     a50:	77 0b       	sbc	r23, r23
     a52:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     a56:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     a5a:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     a5e:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     a62:	84 0f       	add	r24, r20
     a64:	95 1f       	adc	r25, r21
     a66:	a6 1f       	adc	r26, r22
     a68:	b7 1f       	adc	r27, r23
     a6a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     a6e:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     a72:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     a76:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     a7a:	27 c3       	rjmp	.+1614   	; 0x10ca <startStepperMotor+0x85c>
			case 5:{PORTC = PORTC & (~(1<<6));
     a7c:	85 b3       	in	r24, 0x15	; 21
     a7e:	8f 7b       	andi	r24, 0xBF	; 191
     a80:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     a82:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     a86:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     a90:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     a94:	ce 01       	movw	r24, r28
     a96:	88 0f       	add	r24, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	be 01       	movw	r22, r28
     a9c:	66 0f       	add	r22, r22
     a9e:	77 1f       	adc	r23, r23
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	66 0f       	add	r22, r22
     aa6:	77 1f       	adc	r23, r23
     aa8:	68 0f       	add	r22, r24
     aaa:	79 1f       	adc	r23, r25
     aac:	80 e3       	ldi	r24, 0x30	; 48
     aae:	95 e7       	ldi	r25, 0x75	; 117
     ab0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     ab4:	ab 01       	movw	r20, r22
     ab6:	77 0f       	add	r23, r23
     ab8:	66 0b       	sbc	r22, r22
     aba:	77 0b       	sbc	r23, r23
     abc:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     ac0:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     ac4:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     ac8:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     acc:	84 0f       	add	r24, r20
     ace:	95 1f       	adc	r25, r21
     ad0:	a6 1f       	adc	r26, r22
     ad2:	b7 1f       	adc	r27, r23
     ad4:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     ad8:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     adc:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     ae0:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     ae4:	f2 c2       	rjmp	.+1508   	; 0x10ca <startStepperMotor+0x85c>
			case 6:{PORTC = PORTC | (1<<7);case_num0++;
     ae6:	85 b3       	in	r24, 0x15	; 21
     ae8:	80 68       	ori	r24, 0x80	; 128
     aea:	85 bb       	out	0x15, r24	; 21
     aec:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     af0:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     afa:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     afe:	ce 01       	movw	r24, r28
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	be 01       	movw	r22, r28
     b06:	66 0f       	add	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	66 0f       	add	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	68 0f       	add	r22, r24
     b14:	79 1f       	adc	r23, r25
     b16:	80 e3       	ldi	r24, 0x30	; 48
     b18:	95 e7       	ldi	r25, 0x75	; 117
     b1a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     b1e:	ab 01       	movw	r20, r22
     b20:	77 0f       	add	r23, r23
     b22:	66 0b       	sbc	r22, r22
     b24:	77 0b       	sbc	r23, r23
     b26:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     b2a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     b2e:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     b32:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     b36:	84 0f       	add	r24, r20
     b38:	95 1f       	adc	r25, r21
     b3a:	a6 1f       	adc	r26, r22
     b3c:	b7 1f       	adc	r27, r23
     b3e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     b42:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     b46:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     b4a:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     b4e:	bd c2       	rjmp	.+1402   	; 0x10ca <startStepperMotor+0x85c>
			case 7:{PORTC = PORTC & (~(1<<5));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     b50:	85 b3       	in	r24, 0x15	; 21
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	85 bb       	out	0x15, r24	; 21
     b56:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     b5a:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     b64:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     b68:	ce 01       	movw	r24, r28
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	be 01       	movw	r22, r28
     b70:	66 0f       	add	r22, r22
     b72:	77 1f       	adc	r23, r23
     b74:	66 0f       	add	r22, r22
     b76:	77 1f       	adc	r23, r23
     b78:	66 0f       	add	r22, r22
     b7a:	77 1f       	adc	r23, r23
     b7c:	68 0f       	add	r22, r24
     b7e:	79 1f       	adc	r23, r25
     b80:	80 e3       	ldi	r24, 0x30	; 48
     b82:	95 e7       	ldi	r25, 0x75	; 117
     b84:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     b88:	ab 01       	movw	r20, r22
     b8a:	77 0f       	add	r23, r23
     b8c:	66 0b       	sbc	r22, r22
     b8e:	77 0b       	sbc	r23, r23
     b90:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     b94:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     b98:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     b9c:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     ba0:	84 0f       	add	r24, r20
     ba2:	95 1f       	adc	r25, r21
     ba4:	a6 1f       	adc	r26, r22
     ba6:	b7 1f       	adc	r27, r23
     ba8:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     bac:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     bb0:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     bb4:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     bb8:	88 c2       	rjmp	.+1296   	; 0x10ca <startStepperMotor+0x85c>
			case 8:{PORTC = PORTC | (1<<4);case_num0++;
     bba:	85 b3       	in	r24, 0x15	; 21
     bbc:	80 61       	ori	r24, 0x10	; 16
     bbe:	85 bb       	out	0x15, r24	; 21
     bc0:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     bc4:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     bce:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     bd2:	ce 01       	movw	r24, r28
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	be 01       	movw	r22, r28
     bda:	66 0f       	add	r22, r22
     bdc:	77 1f       	adc	r23, r23
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	66 0f       	add	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	68 0f       	add	r22, r24
     be8:	79 1f       	adc	r23, r25
     bea:	80 e3       	ldi	r24, 0x30	; 48
     bec:	95 e7       	ldi	r25, 0x75	; 117
     bee:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     bf2:	ab 01       	movw	r20, r22
     bf4:	77 0f       	add	r23, r23
     bf6:	66 0b       	sbc	r22, r22
     bf8:	77 0b       	sbc	r23, r23
     bfa:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     bfe:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     c02:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     c06:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     c0a:	84 0f       	add	r24, r20
     c0c:	95 1f       	adc	r25, r21
     c0e:	a6 1f       	adc	r26, r22
     c10:	b7 1f       	adc	r27, r23
     c12:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     c16:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     c1a:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     c1e:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     c22:	53 c2       	rjmp	.+1190   	; 0x10ca <startStepperMotor+0x85c>
			case 9:{PORTC = PORTC & (~(1<<7));case_num0++;
     c24:	85 b3       	in	r24, 0x15	; 21
     c26:	8f 77       	andi	r24, 0x7F	; 127
     c28:	85 bb       	out	0x15, r24	; 21
     c2a:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     c2e:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     c38:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     c3c:	ce 01       	movw	r24, r28
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	be 01       	movw	r22, r28
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	66 0f       	add	r22, r22
     c4a:	77 1f       	adc	r23, r23
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	68 0f       	add	r22, r24
     c52:	79 1f       	adc	r23, r25
     c54:	80 e3       	ldi	r24, 0x30	; 48
     c56:	95 e7       	ldi	r25, 0x75	; 117
     c58:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     c5c:	ab 01       	movw	r20, r22
     c5e:	77 0f       	add	r23, r23
     c60:	66 0b       	sbc	r22, r22
     c62:	77 0b       	sbc	r23, r23
     c64:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     c68:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     c6c:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     c70:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     c74:	84 0f       	add	r24, r20
     c76:	95 1f       	adc	r25, r21
     c78:	a6 1f       	adc	r26, r22
     c7a:	b7 1f       	adc	r27, r23
     c7c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     c80:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     c84:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     c88:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     c8c:	1e c2       	rjmp	.+1084   	; 0x10ca <startStepperMotor+0x85c>
			case 10:{PORTC = PORTC & (~(1<<4));
     c8e:	85 b3       	in	r24, 0x15	; 21
     c90:	8f 7e       	andi	r24, 0xEF	; 239
     c92:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     c94:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     c98:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     ca2:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     ca6:	ce 01       	movw	r24, r28
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	be 01       	movw	r22, r28
     cae:	66 0f       	add	r22, r22
     cb0:	77 1f       	adc	r23, r23
     cb2:	66 0f       	add	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	68 0f       	add	r22, r24
     cbc:	79 1f       	adc	r23, r25
     cbe:	80 e3       	ldi	r24, 0x30	; 48
     cc0:	95 e7       	ldi	r25, 0x75	; 117
     cc2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     cc6:	ab 01       	movw	r20, r22
     cc8:	77 0f       	add	r23, r23
     cca:	66 0b       	sbc	r22, r22
     ccc:	77 0b       	sbc	r23, r23
     cce:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     cd2:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     cd6:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     cda:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     cde:	84 0f       	add	r24, r20
     ce0:	95 1f       	adc	r25, r21
     ce2:	a6 1f       	adc	r26, r22
     ce4:	b7 1f       	adc	r27, r23
     ce6:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     cea:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     cee:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     cf2:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     cf6:	e9 c1       	rjmp	.+978    	; 0x10ca <startStepperMotor+0x85c>
			case 11:{PORTC = PORTC | (1<<4);case_num0++;
     cf8:	85 b3       	in	r24, 0x15	; 21
     cfa:	80 61       	ori	r24, 0x10	; 16
     cfc:	85 bb       	out	0x15, r24	; 21
     cfe:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     d02:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     d0c:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     d10:	ce 01       	movw	r24, r28
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	be 01       	movw	r22, r28
     d18:	66 0f       	add	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	68 0f       	add	r22, r24
     d26:	79 1f       	adc	r23, r25
     d28:	80 e3       	ldi	r24, 0x30	; 48
     d2a:	95 e7       	ldi	r25, 0x75	; 117
     d2c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     d30:	ab 01       	movw	r20, r22
     d32:	77 0f       	add	r23, r23
     d34:	66 0b       	sbc	r22, r22
     d36:	77 0b       	sbc	r23, r23
     d38:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     d3c:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     d40:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     d44:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     d48:	84 0f       	add	r24, r20
     d4a:	95 1f       	adc	r25, r21
     d4c:	a6 1f       	adc	r26, r22
     d4e:	b7 1f       	adc	r27, r23
     d50:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     d54:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     d58:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     d5c:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     d60:	b4 c1       	rjmp	.+872    	; 0x10ca <startStepperMotor+0x85c>
			case 12:{PORTC = PORTC | (1<<7);
     d62:	85 b3       	in	r24, 0x15	; 21
     d64:	80 68       	ori	r24, 0x80	; 128
     d66:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     d68:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     d6c:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     d76:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     d7a:	ce 01       	movw	r24, r28
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	be 01       	movw	r22, r28
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	68 0f       	add	r22, r24
     d90:	79 1f       	adc	r23, r25
     d92:	80 e3       	ldi	r24, 0x30	; 48
     d94:	95 e7       	ldi	r25, 0x75	; 117
     d96:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     d9a:	ab 01       	movw	r20, r22
     d9c:	77 0f       	add	r23, r23
     d9e:	66 0b       	sbc	r22, r22
     da0:	77 0b       	sbc	r23, r23
     da2:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     da6:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     daa:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     dae:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     db2:	84 0f       	add	r24, r20
     db4:	95 1f       	adc	r25, r21
     db6:	a6 1f       	adc	r26, r22
     db8:	b7 1f       	adc	r27, r23
     dba:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     dbe:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     dc2:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     dc6:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     dca:	7f c1       	rjmp	.+766    	; 0x10ca <startStepperMotor+0x85c>
			case 13:{PORTC = PORTC & (~(1<<4));
     dcc:	85 b3       	in	r24, 0x15	; 21
     dce:	8f 7e       	andi	r24, 0xEF	; 239
     dd0:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     dd2:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     dd6:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     de0:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     de4:	ce 01       	movw	r24, r28
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	be 01       	movw	r22, r28
     dec:	66 0f       	add	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	68 0f       	add	r22, r24
     dfa:	79 1f       	adc	r23, r25
     dfc:	80 e3       	ldi	r24, 0x30	; 48
     dfe:	95 e7       	ldi	r25, 0x75	; 117
     e00:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     e04:	ab 01       	movw	r20, r22
     e06:	77 0f       	add	r23, r23
     e08:	66 0b       	sbc	r22, r22
     e0a:	77 0b       	sbc	r23, r23
     e0c:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     e10:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     e14:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     e18:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     e1c:	84 0f       	add	r24, r20
     e1e:	95 1f       	adc	r25, r21
     e20:	a6 1f       	adc	r26, r22
     e22:	b7 1f       	adc	r27, r23
     e24:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     e28:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     e2c:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     e30:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     e34:	4a c1       	rjmp	.+660    	; 0x10ca <startStepperMotor+0x85c>
			case 14:{PORTC = PORTC | (1<<5);case_num0++;
     e36:	85 b3       	in	r24, 0x15	; 21
     e38:	80 62       	ori	r24, 0x20	; 32
     e3a:	85 bb       	out	0x15, r24	; 21
     e3c:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     e40:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     e44:	01 96       	adiw	r24, 0x01	; 1
     e46:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     e4a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     e4e:	ce 01       	movw	r24, r28
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	be 01       	movw	r22, r28
     e56:	66 0f       	add	r22, r22
     e58:	77 1f       	adc	r23, r23
     e5a:	66 0f       	add	r22, r22
     e5c:	77 1f       	adc	r23, r23
     e5e:	66 0f       	add	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	68 0f       	add	r22, r24
     e64:	79 1f       	adc	r23, r25
     e66:	80 e3       	ldi	r24, 0x30	; 48
     e68:	95 e7       	ldi	r25, 0x75	; 117
     e6a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     e6e:	ab 01       	movw	r20, r22
     e70:	77 0f       	add	r23, r23
     e72:	66 0b       	sbc	r22, r22
     e74:	77 0b       	sbc	r23, r23
     e76:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     e7a:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     e7e:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     e82:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     e86:	84 0f       	add	r24, r20
     e88:	95 1f       	adc	r25, r21
     e8a:	a6 1f       	adc	r26, r22
     e8c:	b7 1f       	adc	r27, r23
     e8e:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     e92:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     e96:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     e9a:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     e9e:	15 c1       	rjmp	.+554    	; 0x10ca <startStepperMotor+0x85c>
			case 16:{PORTC = PORTC & (~(1<<7));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     ea0:	85 b3       	in	r24, 0x15	; 21
     ea2:	8f 77       	andi	r24, 0x7F	; 127
     ea4:	85 bb       	out	0x15, r24	; 21
     ea6:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     eaa:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     eb4:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     eb8:	ce 01       	movw	r24, r28
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	be 01       	movw	r22, r28
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	66 0f       	add	r22, r22
     eca:	77 1f       	adc	r23, r23
     ecc:	68 0f       	add	r22, r24
     ece:	79 1f       	adc	r23, r25
     ed0:	80 e3       	ldi	r24, 0x30	; 48
     ed2:	95 e7       	ldi	r25, 0x75	; 117
     ed4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     ed8:	ab 01       	movw	r20, r22
     eda:	77 0f       	add	r23, r23
     edc:	66 0b       	sbc	r22, r22
     ede:	77 0b       	sbc	r23, r23
     ee0:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     ee4:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     ee8:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     eec:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     ef0:	84 0f       	add	r24, r20
     ef2:	95 1f       	adc	r25, r21
     ef4:	a6 1f       	adc	r26, r22
     ef6:	b7 1f       	adc	r27, r23
     ef8:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     efc:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     f00:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     f04:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     f08:	e0 c0       	rjmp	.+448    	; 0x10ca <startStepperMotor+0x85c>
			case 17:{PORTC = PORTC | (1<<6);case_num0++;
     f0a:	85 b3       	in	r24, 0x15	; 21
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	85 bb       	out	0x15, r24	; 21
     f10:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     f14:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     f1e:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     f22:	ce 01       	movw	r24, r28
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	be 01       	movw	r22, r28
     f2a:	66 0f       	add	r22, r22
     f2c:	77 1f       	adc	r23, r23
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	68 0f       	add	r22, r24
     f38:	79 1f       	adc	r23, r25
     f3a:	80 e3       	ldi	r24, 0x30	; 48
     f3c:	95 e7       	ldi	r25, 0x75	; 117
     f3e:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     f42:	ab 01       	movw	r20, r22
     f44:	77 0f       	add	r23, r23
     f46:	66 0b       	sbc	r22, r22
     f48:	77 0b       	sbc	r23, r23
     f4a:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     f4e:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     f52:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     f56:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     f5a:	84 0f       	add	r24, r20
     f5c:	95 1f       	adc	r25, r21
     f5e:	a6 1f       	adc	r26, r22
     f60:	b7 1f       	adc	r27, r23
     f62:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     f66:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     f6a:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     f6e:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
     f72:	ab c0       	rjmp	.+342    	; 0x10ca <startStepperMotor+0x85c>
			case 18:{PORTC = PORTC & (~(1<<5));case_num0++;
     f74:	85 b3       	in	r24, 0x15	; 21
     f76:	8f 7d       	andi	r24, 0xDF	; 223
     f78:	85 bb       	out	0x15, r24	; 21
     f7a:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     f7e:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     f88:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);break;}
     f8c:	ce 01       	movw	r24, r28
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	be 01       	movw	r22, r28
     f94:	66 0f       	add	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	68 0f       	add	r22, r24
     fa2:	79 1f       	adc	r23, r25
     fa4:	80 e3       	ldi	r24, 0x30	; 48
     fa6:	95 e7       	ldi	r25, 0x75	; 117
     fa8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
     fac:	ab 01       	movw	r20, r22
     fae:	77 0f       	add	r23, r23
     fb0:	66 0b       	sbc	r22, r22
     fb2:	77 0b       	sbc	r23, r23
     fb4:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
     fb8:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
     fbc:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
     fc0:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
     fc4:	84 0f       	add	r24, r20
     fc6:	95 1f       	adc	r25, r21
     fc8:	a6 1f       	adc	r26, r22
     fca:	b7 1f       	adc	r27, r23
     fcc:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
     fd0:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
     fd4:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
     fd8:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
     fdc:	76 c0       	rjmp	.+236    	; 0x10ca <startStepperMotor+0x85c>
			case 19:{PORTC = PORTC & (~(1<<6));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     fde:	85 b3       	in	r24, 0x15	; 21
     fe0:	8f 7b       	andi	r24, 0xBF	; 191
     fe2:	85 bb       	out	0x15, r24	; 21
     fe4:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
     fe8:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
     ff2:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
     ff6:	ce 01       	movw	r24, r28
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	be 01       	movw	r22, r28
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	68 0f       	add	r22, r24
    100c:	79 1f       	adc	r23, r25
    100e:	80 e3       	ldi	r24, 0x30	; 48
    1010:	95 e7       	ldi	r25, 0x75	; 117
    1012:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
    1016:	ab 01       	movw	r20, r22
    1018:	77 0f       	add	r23, r23
    101a:	66 0b       	sbc	r22, r22
    101c:	77 0b       	sbc	r23, r23
    101e:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
    1022:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
    1026:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
    102a:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
    102e:	84 0f       	add	r24, r20
    1030:	95 1f       	adc	r25, r21
    1032:	a6 1f       	adc	r26, r22
    1034:	b7 1f       	adc	r27, r23
    1036:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
    103a:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
    103e:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
    1042:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
    1046:	41 c0       	rjmp	.+130    	; 0x10ca <startStepperMotor+0x85c>
			case 20:{PORTC = PORTC & (~(1<<4));case_num0++;
    1048:	85 b3       	in	r24, 0x15	; 21
    104a:	8f 7e       	andi	r24, 0xEF	; 239
    104c:	85 bb       	out	0x15, r24	; 21
    104e:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <case_num0>
    1052:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <case_num0+0x1>
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	90 93 fe 03 	sts	0x03FE, r25	; 0x8003fe <case_num0+0x1>
    105c:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
    1060:	ce 01       	movw	r24, r28
    1062:	88 0f       	add	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	be 01       	movw	r22, r28
    1068:	66 0f       	add	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	68 0f       	add	r22, r24
    1076:	79 1f       	adc	r23, r25
    1078:	80 e3       	ldi	r24, 0x30	; 48
    107a:	95 e7       	ldi	r25, 0x75	; 117
    107c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__divmodhi4>
    1080:	ab 01       	movw	r20, r22
    1082:	77 0f       	add	r23, r23
    1084:	66 0b       	sbc	r22, r22
    1086:	77 0b       	sbc	r23, r23
    1088:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <need_millis0>
    108c:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <need_millis0+0x1>
    1090:	a0 91 57 03 	lds	r26, 0x0357	; 0x800357 <need_millis0+0x2>
    1094:	b0 91 58 03 	lds	r27, 0x0358	; 0x800358 <need_millis0+0x3>
    1098:	84 0f       	add	r24, r20
    109a:	95 1f       	adc	r25, r21
    109c:	a6 1f       	adc	r26, r22
    109e:	b7 1f       	adc	r27, r23
    10a0:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <need_millis0>
    10a4:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <need_millis0+0x1>
    10a8:	a0 93 57 03 	sts	0x0357, r26	; 0x800357 <need_millis0+0x2>
    10ac:	b0 93 58 03 	sts	0x0358, r27	; 0x800358 <need_millis0+0x3>
				break;}
    10b0:	0c c0       	rjmp	.+24     	; 0x10ca <startStepperMotor+0x85c>
			default:{case_num0=NULL;
    10b2:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <case_num0+0x1>
    10b6:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <case_num0>
				prev_millis0=NULL;
    10ba:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <prev_millis0>
    10be:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <prev_millis0+0x1>
    10c2:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <prev_millis0+0x2>
    10c6:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <prev_millis0+0x3>
	



	
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <ADC_Init>:
#ifndef POTENTIOMETER_H_
#define POTENTIOMETER_H_

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
    10d4:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
    10d6:	87 e8       	ldi	r24, 0x87	; 135
    10d8:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
    10da:	80 e4       	ldi	r24, 0x40	; 64
    10dc:	87 b9       	out	0x07, r24	; 7
    10de:	08 95       	ret

000010e0 <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
    10e0:	97 b1       	in	r25, 0x07	; 7
    10e2:	8f 70       	andi	r24, 0x0F	; 15
    10e4:	98 2b       	or	r25, r24
    10e6:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
    10e8:	86 b1       	in	r24, 0x06	; 6
    10ea:	80 64       	ori	r24, 0x40	; 64
    10ec:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
    10ee:	34 9b       	sbis	0x06, 4	; 6
    10f0:	fe cf       	rjmp	.-4      	; 0x10ee <ADC_Read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10f2:	8a e1       	ldi	r24, 0x1A	; 26
    10f4:	8a 95       	dec	r24
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <ADC_Read+0x14>
    10f8:	00 c0       	rjmp	.+0      	; 0x10fa <ADC_Read+0x1a>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
    10fa:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
    10fc:	85 b1       	in	r24, 0x05	; 5
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	98 2f       	mov	r25, r24
    1102:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
    1104:	82 0f       	add	r24, r18
    1106:	91 1d       	adc	r25, r1
    1108:	08 95       	ret

0000110a <__vector_1>:
                startOxygenAndAirSupply(Oxygen_percentage);
            }
        }else{return 0;}
    }
}
ISR (INT0_vect) { //External interrupt
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	
	OxygenAutomation=!OxygenAutomation;
    112c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <OxygenAutomation>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 27       	eor	r24, r25
    1134:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <OxygenAutomation>
	
	if(OxygenAutomation){
    1138:	88 23       	and	r24, r24
    113a:	41 f0       	breq	.+16     	; 0x114c <__vector_1+0x42>
		lcd_cmd(0x01);  
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("O2 Auto On");
    1142:	84 ec       	ldi	r24, 0xC4	; 196
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
    114a:	07 c0       	rjmp	.+14     	; 0x115a <__vector_1+0x50>
	}else{
		lcd_cmd(0x01);  
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("O2 Auto Off");
    1152:	8f ec       	ldi	r24, 0xCF	; 207
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    115a:	2f e7       	ldi	r18, 0x7F	; 127
    115c:	88 e3       	ldi	r24, 0x38	; 56
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	21 50       	subi	r18, 0x01	; 1
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	e1 f7       	brne	.-8      	; 0x1160 <__vector_1+0x56>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <__vector_1+0x60>
    116a:	00 00       	nop
	}
	_delay_ms(50);
	lcd_cmd(0x01);  
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
	
}
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_2>:
ISR (INT1_vect) { //External interrupt
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
	power=!power;
    11b6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <power>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 27       	eor	r24, r25
    11be:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <power>
	if(power){
    11c2:	88 23       	and	r24, r24
    11c4:	41 f0       	breq	.+16     	; 0x11d6 <__vector_2+0x42>
		lcd_cmd(0x01);  
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("Power On");
    11cc:	8b ed       	ldi	r24, 0xDB	; 219
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <__vector_2+0x50>
		}else{
		lcd_cmd(0x01);  
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
		lcd_msg("Power Off");
    11dc:	84 ee       	ldi	r24, 0xE4	; 228
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
    11e4:	2f e7       	ldi	r18, 0x7F	; 127
    11e6:	88 e3       	ldi	r24, 0x38	; 56
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	21 50       	subi	r18, 0x01	; 1
    11ec:	80 40       	sbci	r24, 0x00	; 0
    11ee:	90 40       	sbci	r25, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <__vector_2+0x56>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <__vector_2+0x60>
    11f4:	00 00       	nop
	}
	_delay_ms(50);
	lcd_cmd(0x01);  
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>

}
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <controlOxygenPercentage>:
	controlSolenoidValve(Oxygen_percentage, rBPM);
    startStepperMotor(rBPM, rBL);
    
}
void controlOxygenPercentage(int bloodOxygenLevel){
	if (bloodOxygenLevel<40)
    121e:	88 32       	cpi	r24, 0x28	; 40
    1220:	91 05       	cpc	r25, r1
    1222:	3c f4       	brge	.+14     	; 0x1232 <controlOxygenPercentage+0x14>
	{
		Oxygen_percentage=90;
    1224:	8a e5       	ldi	r24, 0x5A	; 90
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    122c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1230:	08 95       	ret
	}else if (bloodOxygenLevel<70)
    1232:	86 34       	cpi	r24, 0x46	; 70
    1234:	91 05       	cpc	r25, r1
    1236:	3c f4       	brge	.+14     	; 0x1246 <controlOxygenPercentage+0x28>
	{
		Oxygen_percentage=70;
    1238:	86 e4       	ldi	r24, 0x46	; 70
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1240:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1244:	08 95       	ret
	}else if (bloodOxygenLevel<90)
    1246:	8a 35       	cpi	r24, 0x5A	; 90
    1248:	91 05       	cpc	r25, r1
    124a:	3c f4       	brge	.+14     	; 0x125a <controlOxygenPercentage+0x3c>
	{
		Oxygen_percentage=60;
    124c:	8c e3       	ldi	r24, 0x3C	; 60
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1254:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1258:	08 95       	ret
	}else if(bloodOxygenLevel<94){
    125a:	8e 35       	cpi	r24, 0x5E	; 94
    125c:	91 05       	cpc	r25, r1
    125e:	34 f4       	brge	.+12     	; 0x126c <controlOxygenPercentage+0x4e>
	Oxygen_percentage=40;
    1260:	88 e2       	ldi	r24, 0x28	; 40
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1268:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    126c:	08 95       	ret

0000126e <getOxygenTankPressure>:
   }
}

double getOxygenTankPressure() {
    return 12000;//return Oxygen tank pressure in pascal
}
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	70 e8       	ldi	r23, 0x80	; 128
    1272:	8b e3       	ldi	r24, 0x3B	; 59
    1274:	96 e4       	ldi	r25, 0x46	; 70
    1276:	08 95       	ret

00001278 <controlSolenoidValve>:
	Oxygen_percentage=40;
	}
    //update variable Oxygen Percentage According to Blood Oxygen Level
}

void controlSolenoidValve(double oxygenPercentage, int breathPerMin) {
    1278:	4f 92       	push	r4
    127a:	5f 92       	push	r5
    127c:	6f 92       	push	r6
    127e:	7f 92       	push	r7
    1280:	8f 92       	push	r8
    1282:	9f 92       	push	r9
    1284:	af 92       	push	r10
    1286:	bf 92       	push	r11
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	ff 92       	push	r15
    1290:	6b 01       	movw	r12, r22
    1292:	7c 01       	movw	r14, r24
    double inflationTime=30.0000/breathPerMin;
    1294:	ba 01       	movw	r22, r20
    1296:	55 0f       	add	r21, r21
    1298:	88 0b       	sbc	r24, r24
    129a:	99 0b       	sbc	r25, r25
    129c:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__floatsisf>
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 ef       	ldi	r24, 0xF0	; 240
    12aa:	91 e4       	ldi	r25, 0x41	; 65
    12ac:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__divsf3>
    12b0:	4b 01       	movw	r8, r22
    12b2:	5c 01       	movw	r10, r24
    double Pressure=101325;
    double airDensity=1.225;
    double OxygenDensity=1.355;


   constValue=(0.79*(1.266*oxygenPercentage-26.67)/(100-oxygenPercentage))*sqrt(Pressure*OxygenDensity/getOxygenTankPressure()/airDensity);
    12b4:	2a e4       	ldi	r18, 0x4A	; 74
    12b6:	3c e0       	ldi	r19, 0x0C	; 12
    12b8:	42 ea       	ldi	r20, 0xA2	; 162
    12ba:	5f e3       	ldi	r21, 0x3F	; 63
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
    12c4:	29 e2       	ldi	r18, 0x29	; 41
    12c6:	3c e5       	ldi	r19, 0x5C	; 92
    12c8:	45 ed       	ldi	r20, 0xD5	; 213
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__subsf3>
    12d0:	21 e7       	ldi	r18, 0x71	; 113
    12d2:	3d e3       	ldi	r19, 0x3D	; 61
    12d4:	4a e4       	ldi	r20, 0x4A	; 74
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
    12dc:	2b 01       	movw	r4, r22
    12de:	3c 01       	movw	r6, r24
    12e0:	a7 01       	movw	r20, r14
    12e2:	96 01       	movw	r18, r12
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	88 ec       	ldi	r24, 0xC8	; 200
    12ea:	92 e4       	ldi	r25, 0x42	; 66
    12ec:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__subsf3>
    12f0:	9b 01       	movw	r18, r22
    12f2:	ac 01       	movw	r20, r24
    12f4:	c3 01       	movw	r24, r6
    12f6:	b2 01       	movw	r22, r4
    12f8:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__divsf3>
    12fc:	2b 01       	movw	r4, r22
    12fe:	3c 01       	movw	r6, r24
    1300:	0e 94 37 09 	call	0x126e	; 0x126e <getOxygenTankPressure>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	68 ed       	ldi	r22, 0xD8	; 216
    130a:	73 e1       	ldi	r23, 0x13	; 19
    130c:	86 e0       	ldi	r24, 0x06	; 6
    130e:	98 e4       	ldi	r25, 0x48	; 72
    1310:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__divsf3>
    1314:	6b 01       	movw	r12, r22
    1316:	7c 01       	movw	r14, r24
    1318:	2d ec       	ldi	r18, 0xCD	; 205
    131a:	3c ec       	ldi	r19, 0xCC	; 204
    131c:	4c e9       	ldi	r20, 0x9C	; 156
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	c7 01       	movw	r24, r14
    1322:	b6 01       	movw	r22, r12
    1324:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__divsf3>
    1328:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <sqrt>
    132c:	9b 01       	movw	r18, r22
    132e:	ac 01       	movw	r20, r24
    1330:	c3 01       	movw	r24, r6
    1332:	b2 01       	movw	r22, r4
    1334:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
    1338:	6b 01       	movw	r12, r22
    133a:	7c 01       	movw	r14, r24
   if(constValue>1){
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__gesf2>
    1348:	18 16       	cp	r1, r24
    134a:	5c f4       	brge	.+22     	; 0x1362 <controlSolenoidValve+0xea>
       tOxygen=inflationTime;
       tAir=tOxygen/constValue;
    134c:	a7 01       	movw	r20, r14
    134e:	96 01       	movw	r18, r12
    1350:	c5 01       	movw	r24, r10
    1352:	b4 01       	movw	r22, r8
    1354:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__divsf3>
       openSolenoidValves(tAir,tOxygen);// values in s
    1358:	a5 01       	movw	r20, r10
    135a:	94 01       	movw	r18, r8
    135c:	0e 94 4c 02 	call	0x498	; 0x498 <openSolenoidValves>
    1360:	0c c0       	rjmp	.+24     	; 0x137a <controlSolenoidValve+0x102>
   } else{
       tAir=inflationTime;
       tOxygen=tAir*constValue;
    1362:	a7 01       	movw	r20, r14
    1364:	96 01       	movw	r18, r12
    1366:	c5 01       	movw	r24, r10
    1368:	b4 01       	movw	r22, r8
    136a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__mulsf3>
    136e:	9b 01       	movw	r18, r22
    1370:	ac 01       	movw	r20, r24
       openSolenoidValves(tAir,tOxygen);//values in s
    1372:	c5 01       	movw	r24, r10
    1374:	b4 01       	movw	r22, r8
    1376:	0e 94 4c 02 	call	0x498	; 0x498 <openSolenoidValves>
   }
}
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	7f 90       	pop	r7
    138c:	6f 90       	pop	r6
    138e:	5f 90       	pop	r5
    1390:	4f 90       	pop	r4
    1392:	08 95       	ret

00001394 <startAirSupply>:
}



void startAirSupply() {
    startStepperMotor(rBPM, rBL);
    1394:	60 91 f9 03 	lds	r22, 0x03F9	; 0x8003f9 <rBL>
    1398:	70 91 fa 03 	lds	r23, 0x03FA	; 0x8003fa <rBL+0x1>
    139c:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rBPM>
    13a0:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <rBPM+0x1>
    13a4:	0e 94 37 04 	call	0x86e	; 0x86e <startStepperMotor>
    controlSolenoidValve(0,rBPM);
    13a8:	40 91 fb 03 	lds	r20, 0x03FB	; 0x8003fb <rBPM>
    13ac:	50 91 fc 03 	lds	r21, 0x03FC	; 0x8003fc <rBPM+0x1>
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	cb 01       	movw	r24, r22
    13b6:	0e 94 3c 09 	call	0x1278	; 0x1278 <controlSolenoidValve>
    13ba:	08 95       	ret

000013bc <checkBloodOxygenLevel>:
}
int checkBloodOxygenLevel() {

    return 39;//return Blood Oxygen Level
}
    13bc:	87 e2       	ldi	r24, 0x27	; 39
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	08 95       	ret

000013c2 <startOxygenAndAirSupply>:
	lcd_cmd(0x01);  

}


void startOxygenAndAirSupply(int percentage) {
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    controlOxygenPercentage(checkBloodOxygenLevel());
    13c6:	0e 94 de 09 	call	0x13bc	; 0x13bc <checkBloodOxygenLevel>
    13ca:	0e 94 0f 09 	call	0x121e	; 0x121e <controlOxygenPercentage>
	controlSolenoidValve(Oxygen_percentage, rBPM);
    13ce:	c0 91 fb 03 	lds	r28, 0x03FB	; 0x8003fb <rBPM>
    13d2:	d0 91 fc 03 	lds	r29, 0x03FC	; 0x8003fc <rBPM+0x1>
    13d6:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Oxygen_percentage>
    13da:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    13de:	07 2e       	mov	r0, r23
    13e0:	00 0c       	add	r0, r0
    13e2:	88 0b       	sbc	r24, r24
    13e4:	99 0b       	sbc	r25, r25
    13e6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__floatsisf>
    13ea:	ae 01       	movw	r20, r28
    13ec:	0e 94 3c 09 	call	0x1278	; 0x1278 <controlSolenoidValve>
    startStepperMotor(rBPM, rBL);
    13f0:	60 91 f9 03 	lds	r22, 0x03F9	; 0x8003f9 <rBL>
    13f4:	70 91 fa 03 	lds	r23, 0x03FA	; 0x8003fa <rBL+0x1>
    13f8:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <rBPM>
    13fc:	90 91 fc 03 	lds	r25, 0x03FC	; 0x8003fc <rBPM+0x1>
    1400:	0e 94 37 04 	call	0x86e	; 0x86e <startStepperMotor>
    
}
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <PatientTemp>:
    return 39;//return Blood Oxygen Level
}

int PatientTemp() {
    return 37;//return temperature value
}
    140a:	85 e2       	ldi	r24, 0x25	; 37
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	08 95       	ret

00001410 <notifySpeaker>:

void notifySpeaker() {
   DDRD=DDRD | (1<<4);
    1410:	81 b3       	in	r24, 0x11	; 17
    1412:	80 61       	ori	r24, 0x10	; 16
    1414:	81 bb       	out	0x11, r24	; 17
    1416:	08 95       	ret

00001418 <getParametersFromKnobs>:
    //if normal return 1 else notify speaker and gsm
}

void getParametersFromKnobs() {
    
	Oxygen_percentage=rOP;
    1418:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <rOP>
    141c:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <rOP+0x1>
    1420:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1424:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1428:	08 95       	ret

0000142a <automationOn>:
    //get values and update  Breath per min,Oxygen Percentage,Breath Length
}

bool automationOn() {
    return OxygenAutomation;//Check Automation On/Off
}
    142a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OxygenAutomation>
    142e:	08 95       	ret

00001430 <turnOn>:

bool turnOn() {
    return power;//return 1 if power on switched pressed else return 0
}
    1430:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <power>
    1434:	08 95       	ret

00001436 <notifyDisplay>:
    }else{return 0;}
		
}

void notifyDisplay(const char *string) {
   lcd_msg(string);
    1436:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
    143a:	08 95       	ret

0000143c <checkPower>:
}

bool checkPower(){
	if ( (PINA & (1 << PINA7)) == (1 << PINA7) ) {
    143c:	cf 9b       	sbis	0x19, 7	; 25
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <checkPower+0x8>
		return 1;// pin is high
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	08 95       	ret
		} else {
		return 0;// pin is low
    1444:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1446:	08 95       	ret

00001448 <concatS>:
    itoa(percentage,Spercentage,10);//convert int to string


    sendSMS(Mobile_no, concatS(string,Spercentage));
}
const char *concatS(const char *string, char sPercentage[4]) {
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	8c 01       	movw	r16, r24
    1456:	eb 01       	movw	r28, r22
    char *result = malloc(strlen(string) + strlen(sPercentage) + 1);
    1458:	fc 01       	movw	r30, r24
    145a:	01 90       	ld	r0, Z+
    145c:	00 20       	and	r0, r0
    145e:	e9 f7       	brne	.-6      	; 0x145a <concatS+0x12>
    1460:	31 97       	sbiw	r30, 0x01	; 1
    1462:	cf 01       	movw	r24, r30
    1464:	80 1b       	sub	r24, r16
    1466:	91 0b       	sbc	r25, r17
    1468:	fb 01       	movw	r30, r22
    146a:	01 90       	ld	r0, Z+
    146c:	00 20       	and	r0, r0
    146e:	e9 f7       	brne	.-6      	; 0x146a <concatS+0x22>
    1470:	31 97       	sbiw	r30, 0x01	; 1
    1472:	e6 1b       	sub	r30, r22
    1474:	f7 0b       	sbc	r31, r23
    1476:	8e 0f       	add	r24, r30
    1478:	9f 1f       	adc	r25, r31
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <malloc>
    1480:	7c 01       	movw	r14, r24
    strcpy(result, string);
    1482:	b8 01       	movw	r22, r16
    1484:	0e 94 b0 10 	call	0x2160	; 0x2160 <strcpy>
    strcat(result, sPercentage);
    1488:	be 01       	movw	r22, r28
    148a:	c7 01       	movw	r24, r14
    148c:	0e 94 a5 10 	call	0x214a	; 0x214a <strcat>
    return result;
}
    1490:	c7 01       	movw	r24, r14
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	08 95       	ret

000014a0 <notifyGSM>:
		} else {
		return 0;// pin is low
	}
}

void notifyGSM(const char *string, int percentage) {
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <notifyGSM+0xa>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <notifyGSM+0xc>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	8c 01       	movw	r16, r24
    14b2:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    14b4:	4a e0       	ldi	r20, 0x0A	; 10
    14b6:	be 01       	movw	r22, r28
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	0e 94 b7 10 	call	0x216e	; 0x216e <__itoa_ncheck>
    char Spercentage[4];
    itoa(percentage,Spercentage,10);//convert int to string


    sendSMS(Mobile_no, concatS(string,Spercentage));
    14c0:	be 01       	movw	r22, r28
    14c2:	6f 5f       	subi	r22, 0xFF	; 255
    14c4:	7f 4f       	sbci	r23, 0xFF	; 255
    14c6:	c8 01       	movw	r24, r16
    14c8:	0e 94 24 0a 	call	0x1448	; 0x1448 <concatS>
    14cc:	bc 01       	movw	r22, r24
    14ce:	85 ea       	ldi	r24, 0xA5	; 165
    14d0:	94 e0       	ldi	r25, 0x04	; 4
    14d2:	0e 94 8b 01 	call	0x316	; 0x316 <sendSMS>
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
    14e4:	0f 91       	pop	r16
    14e6:	08 95       	ret

000014e8 <checkPatientTemp>:
void notifySpeaker() {
   DDRD=DDRD | (1<<4);
   
}

bool checkPatientTemp() {
    14e8:	cf 92       	push	r12
    14ea:	df 92       	push	r13
    14ec:	ef 92       	push	r14
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <checkPatientTemp+0x12>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <checkPatientTemp+0x14>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    if(PatientTemp()>37.2||PatientTemp()<36.1){
    1500:	0e 94 05 0a 	call	0x140a	; 0x140a <PatientTemp>
    1504:	8c 01       	movw	r16, r24
    1506:	bc 01       	movw	r22, r24
    1508:	99 0f       	add	r25, r25
    150a:	88 0b       	sbc	r24, r24
    150c:	99 0b       	sbc	r25, r25
    150e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__floatsisf>
    1512:	6b 01       	movw	r12, r22
    1514:	7c 01       	movw	r14, r24
    1516:	2d ec       	ldi	r18, 0xCD	; 205
    1518:	3c ec       	ldi	r19, 0xCC	; 204
    151a:	44 e1       	ldi	r20, 0x14	; 20
    151c:	52 e4       	ldi	r21, 0x42	; 66
    151e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__gesf2>
    1522:	18 16       	cp	r1, r24
    1524:	54 f0       	brlt	.+20     	; 0x153a <checkPatientTemp+0x52>
    1526:	26 e6       	ldi	r18, 0x66	; 102
    1528:	36 e6       	ldi	r19, 0x66	; 102
    152a:	40 e1       	ldi	r20, 0x10	; 16
    152c:	52 e4       	ldi	r21, 0x42	; 66
    152e:	c7 01       	movw	r24, r14
    1530:	b6 01       	movw	r22, r12
    1532:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <__cmpsf2>
    1536:	88 23       	and	r24, r24
    1538:	cc f4       	brge	.+50     	; 0x156c <checkPatientTemp+0x84>
        notifyGSM("Temperature Not Normal-",PatientTemp());
    153a:	b8 01       	movw	r22, r16
    153c:	8e ee       	ldi	r24, 0xEE	; 238
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <notifyGSM>
    1544:	4a e0       	ldi	r20, 0x0A	; 10
    1546:	be 01       	movw	r22, r28
    1548:	6f 5f       	subi	r22, 0xFF	; 255
    154a:	7f 4f       	sbci	r23, 0xFF	; 255
    154c:	c8 01       	movw	r24, r16
    154e:	0e 94 b7 10 	call	0x216e	; 0x216e <__itoa_ncheck>
		char Spercentage[4];
		itoa(PatientTemp(),Spercentage,10);//convert int to string
		notifyDisplay(concatS("Temperature Not Normal-", Spercentage)); 
    1552:	be 01       	movw	r22, r28
    1554:	6f 5f       	subi	r22, 0xFF	; 255
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8e ee       	ldi	r24, 0xEE	; 238
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 24 0a 	call	0x1448	; 0x1448 <concatS>
    1560:	0e 94 1b 0a 	call	0x1436	; 0x1436 <notifyDisplay>
        notifySpeaker();
    1564:	0e 94 08 0a 	call	0x1410	; 0x1410 <notifySpeaker>
        return 0;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	01 c0       	rjmp	.+2      	; 0x156e <checkPatientTemp+0x86>
    }else{
        return 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    }
    //if normal return 1 else notify speaker and gsm
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	ff 90       	pop	r15
    1580:	ef 90       	pop	r14
    1582:	df 90       	pop	r13
    1584:	cf 90       	pop	r12
    1586:	08 95       	ret

00001588 <oxygenTankPercentage>:
    return result;
}

int oxygenTankPercentage() {
    return 80;
}
    1588:	80 e5       	ldi	r24, 0x50	; 80
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	08 95       	ret

0000158e <checkStatus>:

bool turnOn() {
    return power;//return 1 if power on switched pressed else return 0
}

bool checkStatus() {
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	00 d0       	rcall	.+0      	; 0x159a <checkStatus+0xc>
    159a:	00 d0       	rcall	.+0      	; 0x159c <checkStatus+0xe>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    if (turnOn()) {
    15a0:	0e 94 18 0a 	call	0x1430	; 0x1430 <turnOn>
    15a4:	18 2f       	mov	r17, r24
    15a6:	88 23       	and	r24, r24
    15a8:	e9 f1       	breq	.+122    	; 0x1624 <checkStatus+0x96>
        if (oxygenTankPercentage() < 10) {
    15aa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <oxygenTankPercentage>
    15ae:	7c 01       	movw	r14, r24
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	e8 16       	cp	r14, r24
    15b4:	f1 04       	cpc	r15, r1
    15b6:	ac f4       	brge	.+42     	; 0x15e2 <checkStatus+0x54>
            notifyGSM("Oxygen Tank Percentage : ", oxygenTankPercentage());
    15b8:	b7 01       	movw	r22, r14
    15ba:	86 e0       	ldi	r24, 0x06	; 6
    15bc:	91 e0       	ldi	r25, 0x01	; 1
    15be:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <notifyGSM>
    15c2:	4a e0       	ldi	r20, 0x0A	; 10
    15c4:	be 01       	movw	r22, r28
    15c6:	6f 5f       	subi	r22, 0xFF	; 255
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	c7 01       	movw	r24, r14
    15cc:	0e 94 b7 10 	call	0x216e	; 0x216e <__itoa_ncheck>
			char Spercentage[4];
			itoa(oxygenTankPercentage(),Spercentage,10);//convert int to string
            notifyDisplay(concatS("Oxygen Tank Percentage ", Spercentage));
    15d0:	be 01       	movw	r22, r28
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	80 e2       	ldi	r24, 0x20	; 32
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 24 0a 	call	0x1448	; 0x1448 <concatS>
    15de:	0e 94 1b 0a 	call	0x1436	; 0x1436 <notifyDisplay>
           
        }
		if(!checkPower()){
    15e2:	0e 94 1e 0a 	call	0x143c	; 0x143c <checkPower>
    15e6:	81 11       	cpse	r24, r1
    15e8:	16 c0       	rjmp	.+44     	; 0x1616 <checkStatus+0x88>
			if (powerfailure==NULL)
    15ea:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <powerfailure>
    15ee:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <powerfailure+0x1>
    15f2:	89 2b       	or	r24, r25
    15f4:	69 f4       	brne	.+26     	; 0x1610 <checkStatus+0x82>
			{
			lcd_msg("POWER FAILURE");
    15f6:	88 e3       	ldi	r24, 0x38	; 56
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
			lcd_cmd(0x01);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
			powerfailure=1;	
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <powerfailure+0x1>
    160c:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <powerfailure>
			}
			notifySpeaker();
    1610:	0e 94 08 0a 	call	0x1410	; 0x1410 <notifySpeaker>
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <checkStatus+0x96>
		}else{
			powerfailure=NULL;
    1616:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <powerfailure+0x1>
    161a:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <powerfailure>
			DDRD=DDRD | (0<<4);
    161e:	91 b3       	in	r25, 0x11	; 17
    1620:	91 bb       	out	0x11, r25	; 17
			
		} 
		return 1;
    1622:	18 2f       	mov	r17, r24
    }else{return 0;}
		
}
    1624:	81 2f       	mov	r24, r17
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	ff 90       	pop	r15
    1636:	ef 90       	pop	r14
    1638:	08 95       	ret

0000163a <main>:


int main(void)
{
    /* Replace with your application code */
    DDRC = DDRC | (1<<2); // solenoid valve
    163a:	84 b3       	in	r24, 0x14	; 20
    163c:	84 60       	ori	r24, 0x04	; 4
    163e:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1<<3); // solenoid valve
    1640:	84 b3       	in	r24, 0x14	; 20
    1642:	88 60       	ori	r24, 0x08	; 8
    1644:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1<<4); // stepper motor
    1646:	84 b3       	in	r24, 0x14	; 20
    1648:	80 61       	ori	r24, 0x10	; 16
    164a:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1<<5); // stepper motor
    164c:	84 b3       	in	r24, 0x14	; 20
    164e:	80 62       	ori	r24, 0x20	; 32
    1650:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1<<6); // stepper motor
    1652:	84 b3       	in	r24, 0x14	; 20
    1654:	80 64       	ori	r24, 0x40	; 64
    1656:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1<<7); // stepper motor
    1658:	84 b3       	in	r24, 0x14	; 20
    165a:	80 68       	ori	r24, 0x80	; 128
    165c:	84 bb       	out	0x14, r24	; 20
	
	 DDRB=0x0F; // 0,1,3,2--->1   4,5,6,7-->0 for keypad 
    165e:	8f e0       	ldi	r24, 0x0F	; 15
    1660:	87 bb       	out	0x17, r24	; 23
	 DDRD=DDRD | (0<<2);//PD2 as Oxygen Automation
    1662:	81 b3       	in	r24, 0x11	; 17
    1664:	81 bb       	out	0x11, r24	; 17
	 DDRD=DDRD | (0<<3);//PD3 as input for power on
    1666:	81 b3       	in	r24, 0x11	; 17
    1668:	81 bb       	out	0x11, r24	; 17
	 DDRD=DDRD | (1<<4);//Speaker
    166a:	81 b3       	in	r24, 0x11	; 17
    166c:	80 61       	ori	r24, 0x10	; 16
    166e:	81 bb       	out	0x11, r24	; 17
	 DDRA=DDRA | (0<<7);//PA7 as input for power supply
    1670:	8a b3       	in	r24, 0x1a	; 26
    1672:	8a bb       	out	0x1a, r24	; 26
	 
	 MCUCR  |= 1<<ISC01;   //interrupt fire on falling edge in INT0
    1674:	85 b7       	in	r24, 0x35	; 53
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	85 bf       	out	0x35, r24	; 53
	 MCUCR  |= 1<<ISC11;   //interrupt fire on falling edge in INT1
    167a:	85 b7       	in	r24, 0x35	; 53
    167c:	88 60       	ori	r24, 0x08	; 8
    167e:	85 bf       	out	0x35, r24	; 53
	 
	 //
	 GICR |= 1<<INT0;     //Enable the external interrupt source in general interrupt control register
    1680:	8b b7       	in	r24, 0x3b	; 59
    1682:	80 64       	ori	r24, 0x40	; 64
    1684:	8b bf       	out	0x3b, r24	; 59
	 GICR |= 1<<INT1;     //Enable the external interrupt source in general interrupt control register
    1686:	8b b7       	in	r24, 0x3b	; 59
    1688:	80 68       	ori	r24, 0x80	; 128
    168a:	8b bf       	out	0x3b, r24	; 59
	
	init_millis(8000000UL);
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	72 e1       	ldi	r23, 0x12	; 18
    1690:	8a e7       	ldi	r24, 0x7A	; 122
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <init_millis>
	sei();
    1698:	78 94       	sei
	 ADC_Init();
    169a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <ADC_Init>
     i2c_init();
    169e:	0e 94 30 01 	call	0x260	; 0x260 <i2c_init>
	 i2c_start();
    16a2:	0e 94 36 01 	call	0x26c	; 0x26c <i2c_start>
	 i2c_write(0x70);
    16a6:	80 e7       	ldi	r24, 0x70	; 112
    16a8:	0e 94 3c 01 	call	0x278	; 0x278 <i2c_write>
	 lcd_init();
    16ac:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_init>
	 
	lcd_cmd(0x80);
    16b0:	80 e8       	ldi	r24, 0x80	; 128
    16b2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
	lcd_msg("Enter Phone");
    16b6:	86 e4       	ldi	r24, 0x46	; 70
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
    16be:	2f ef       	ldi	r18, 0xFF	; 255
    16c0:	40 e7       	ldi	r20, 0x70	; 112
    16c2:	52 e0       	ldi	r21, 0x02	; 2
    16c4:	21 50       	subi	r18, 0x01	; 1
    16c6:	40 40       	sbci	r20, 0x00	; 0
    16c8:	50 40       	sbci	r21, 0x00	; 0
    16ca:	e1 f7       	brne	.-8      	; 0x16c4 <main+0x8a>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <main+0x94>
    16ce:	00 00       	nop
	_delay_ms(100);
	lcd_cmd(0xC0);
    16d0:	80 ec       	ldi	r24, 0xC0	; 192
    16d2:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	90 e7       	ldi	r25, 0x70	; 112
    16da:	22 e0       	ldi	r18, 0x02	; 2
    16dc:	81 50       	subi	r24, 0x01	; 1
    16de:	90 40       	sbci	r25, 0x00	; 0
    16e0:	20 40       	sbci	r18, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <main+0xa2>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <main+0xac>
    16e6:	00 00       	nop
	_delay_ms(100);
	lcd_msg("Number");
    16e8:	82 e5       	ldi	r24, 0x52	; 82
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 23 01 	call	0x246	; 0x246 <lcd_msg>
    16f0:	4f ef       	ldi	r20, 0xFF	; 255
    16f2:	50 e7       	ldi	r21, 0x70	; 112
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	41 50       	subi	r20, 0x01	; 1
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	80 40       	sbci	r24, 0x00	; 0
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <main+0xbc>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <main+0xc6>
    1700:	00 00       	nop
	_delay_ms(100);
	lcd_cmd(0x01);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
    1708:	9f ef       	ldi	r25, 0xFF	; 255
    170a:	20 e7       	ldi	r18, 0x70	; 112
    170c:	42 e0       	ldi	r20, 0x02	; 2
    170e:	91 50       	subi	r25, 0x01	; 1
    1710:	20 40       	sbci	r18, 0x00	; 0
    1712:	40 40       	sbci	r20, 0x00	; 0
    1714:	e1 f7       	brne	.-8      	; 0x170e <main+0xd4>
    1716:	00 c0       	rjmp	.+0      	; 0x1718 <main+0xde>
    1718:	00 00       	nop
	_delay_ms(100);
	lcd_cmd(0x80);
    171a:	80 e8       	ldi	r24, 0x80	; 128
    171c:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_cmd>
	//	}while(PINB!=0xF0);
	//	i++;
	// }
	 
	 
    USART_Init(9600);
    1720:	60 e8       	ldi	r22, 0x80	; 128
    1722:	75 e2       	ldi	r23, 0x25	; 37
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 43 01 	call	0x286	; 0x286 <USART_Init>
    172c:	5f ef       	ldi	r21, 0xFF	; 255
    172e:	89 e6       	ldi	r24, 0x69	; 105
    1730:	98 e1       	ldi	r25, 0x18	; 24
    1732:	51 50       	subi	r21, 0x01	; 1
    1734:	80 40       	sbci	r24, 0x00	; 0
    1736:	90 40       	sbci	r25, 0x00	; 0
    1738:	e1 f7       	brne	.-8      	; 0x1732 <main+0xf8>
    173a:	00 c0       	rjmp	.+0      	; 0x173c <main+0x102>
    173c:	00 00       	nop
    _delay_ms(1000);
    GSMConnect();
    173e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GSMConnect>
		
	 
    while (1)
    {   
		
		switch(caseADC){
    1742:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    1746:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	91 05       	cpc	r25, r1
    174e:	a9 f1       	breq	.+106    	; 0x17ba <main+0x180>
    1750:	83 30       	cpi	r24, 0x03	; 3
    1752:	91 05       	cpc	r25, r1
    1754:	09 f4       	brne	.+2      	; 0x1758 <main+0x11e>
    1756:	5d c0       	rjmp	.+186    	; 0x1812 <main+0x1d8>
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	09 f0       	breq	.+2      	; 0x175e <main+0x124>
    175c:	7d c0       	rjmp	.+250    	; 0x1858 <main+0x21e>
			case 1:{
				value=ADC_Read(0);
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ADC_Read>
    1764:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <value+0x1>
    1768:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <value>
				rBPM=((value*14)/1024)+10; // BPM range vary from 10 to 24 
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	9c 01       	movw	r18, r24
    1772:	22 0f       	add	r18, r18
    1774:	33 1f       	adc	r19, r19
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	a9 01       	movw	r20, r18
    1780:	48 1b       	sub	r20, r24
    1782:	59 0b       	sbc	r21, r25
    1784:	9a 01       	movw	r18, r20
    1786:	12 f4       	brpl	.+4      	; 0x178c <main+0x152>
    1788:	21 50       	subi	r18, 0x01	; 1
    178a:	3c 4f       	sbci	r19, 0xFC	; 252
    178c:	83 2f       	mov	r24, r19
    178e:	85 95       	asr	r24
    1790:	85 95       	asr	r24
    1792:	93 2f       	mov	r25, r19
    1794:	99 0f       	add	r25, r25
    1796:	99 0b       	sbc	r25, r25
    1798:	0a 96       	adiw	r24, 0x0a	; 10
    179a:	90 93 fc 03 	sts	0x03FC, r25	; 0x8003fc <rBPM+0x1>
    179e:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <rBPM>
				caseADC++;
    17a2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    17a6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    17b0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
				ADC_Init();
    17b4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <ADC_Init>
				break;
    17b8:	4f c0       	rjmp	.+158    	; 0x1858 <main+0x21e>
				
			}
			case 2:{
				value=ADC_Read(3);
    17ba:	83 e0       	ldi	r24, 0x03	; 3
    17bc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ADC_Read>
    17c0:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <value+0x1>
    17c4:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <value>
				rBL=((value*650)/1024)+250; // BL range vary from 250 to 900
    17c8:	4a e8       	ldi	r20, 0x8A	; 138
    17ca:	52 e0       	ldi	r21, 0x02	; 2
    17cc:	84 9f       	mul	r24, r20
    17ce:	90 01       	movw	r18, r0
    17d0:	85 9f       	mul	r24, r21
    17d2:	30 0d       	add	r19, r0
    17d4:	94 9f       	mul	r25, r20
    17d6:	30 0d       	add	r19, r0
    17d8:	11 24       	eor	r1, r1
    17da:	33 23       	and	r19, r19
    17dc:	14 f4       	brge	.+4      	; 0x17e2 <main+0x1a8>
    17de:	21 50       	subi	r18, 0x01	; 1
    17e0:	3c 4f       	sbci	r19, 0xFC	; 252
    17e2:	83 2f       	mov	r24, r19
    17e4:	85 95       	asr	r24
    17e6:	85 95       	asr	r24
    17e8:	93 2f       	mov	r25, r19
    17ea:	99 0f       	add	r25, r25
    17ec:	99 0b       	sbc	r25, r25
    17ee:	86 50       	subi	r24, 0x06	; 6
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <rBL+0x1>
    17f6:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <rBL>
				caseADC++;
    17fa:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    17fe:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1808:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
				ADC_Init();
    180c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <ADC_Init>
				break;
    1810:	23 c0       	rjmp	.+70     	; 0x1858 <main+0x21e>
			}
			case 3:{
				value=ADC_Read(4);
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	0e 94 70 08 	call	0x10e0	; 0x10e0 <ADC_Read>
    1818:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <value+0x1>
    181c:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <value>
				rOP=(100*value)/1024; // OP range vary from 0 to 100
    1820:	44 e6       	ldi	r20, 0x64	; 100
    1822:	48 9f       	mul	r20, r24
    1824:	90 01       	movw	r18, r0
    1826:	49 9f       	mul	r20, r25
    1828:	30 0d       	add	r19, r0
    182a:	11 24       	eor	r1, r1
    182c:	33 23       	and	r19, r19
    182e:	14 f4       	brge	.+4      	; 0x1834 <main+0x1fa>
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	3c 4f       	sbci	r19, 0xFC	; 252
    1834:	83 2f       	mov	r24, r19
    1836:	88 0f       	add	r24, r24
    1838:	88 0b       	sbc	r24, r24
    183a:	93 2f       	mov	r25, r19
    183c:	95 95       	asr	r25
    183e:	95 95       	asr	r25
    1840:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <rOP>
    1844:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <rOP+0x1>
				caseADC=1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1850:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
				ADC_Init();
    1854:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <ADC_Init>

     



        if(checkStatus()){
    1858:	0e 94 c7 0a 	call	0x158e	; 0x158e <checkStatus>
    185c:	88 23       	and	r24, r24
    185e:	39 f1       	breq	.+78     	; 0x18ae <main+0x274>
            if(automationOn()){
    1860:	0e 94 15 0a 	call	0x142a	; 0x142a <automationOn>
    1864:	88 23       	and	r24, r24
    1866:	c1 f0       	breq	.+48     	; 0x1898 <main+0x25e>
                if(checkPatientTemp()){
    1868:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <checkPatientTemp>
    186c:	88 23       	and	r24, r24
    186e:	09 f4       	brne	.+2      	; 0x1872 <main+0x238>
    1870:	68 cf       	rjmp	.-304    	; 0x1742 <main+0x108>

                    if(checkBloodOxygenLevel() < Average_Blood_Oxygen_level){
    1872:	0e 94 de 09 	call	0x13bc	; 0x13bc <checkBloodOxygenLevel>
    1876:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <Average_Blood_Oxygen_level>
    187a:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <Average_Blood_Oxygen_level+0x1>
    187e:	82 17       	cp	r24, r18
    1880:	93 07       	cpc	r25, r19
    1882:	3c f4       	brge	.+14     	; 0x1892 <main+0x258>
                        startOxygenAndAirSupply(Oxygen_percentage);
    1884:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    1888:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    188c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <startOxygenAndAirSupply>
    1890:	58 cf       	rjmp	.-336    	; 0x1742 <main+0x108>
                    }else{
                        startAirSupply();
    1892:	0e 94 ca 09 	call	0x1394	; 0x1394 <startAirSupply>
    1896:	55 cf       	rjmp	.-342    	; 0x1742 <main+0x108>
                    }
                }
            }else{
                checkPatientTemp();
    1898:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <checkPatientTemp>
                getParametersFromKnobs();// update o2 percentage manually
    189c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <getParametersFromKnobs>
                startOxygenAndAirSupply(Oxygen_percentage);
    18a0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    18a4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    18a8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <startOxygenAndAirSupply>
    18ac:	4a cf       	rjmp	.-364    	; 0x1742 <main+0x108>
            }
        }else{return 0;}
    }
}
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	08 95       	ret

000018b4 <__vector_7>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    18b4:	1f 92       	push	r1
    18b6:	0f 92       	push	r0
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	0f 92       	push	r0
    18bc:	11 24       	eor	r1, r1
    18be:	8f 93       	push	r24
    18c0:	9f 93       	push	r25
    18c2:	af 93       	push	r26
    18c4:	bf 93       	push	r27
  timer1_millis++;
    18c6:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <timer1_millis>
    18ca:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <timer1_millis+0x1>
    18ce:	a0 91 0d 04 	lds	r26, 0x040D	; 0x80040d <timer1_millis+0x2>
    18d2:	b0 91 0e 04 	lds	r27, 0x040E	; 0x80040e <timer1_millis+0x3>
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	a1 1d       	adc	r26, r1
    18da:	b1 1d       	adc	r27, r1
    18dc:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <timer1_millis>
    18e0:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <timer1_millis+0x1>
    18e4:	a0 93 0d 04 	sts	0x040D, r26	; 0x80040d <timer1_millis+0x2>
    18e8:	b0 93 0e 04 	sts	0x040E, r27	; 0x80040e <timer1_millis+0x3>
}
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    18fe:	20 e4       	ldi	r18, 0x40	; 64
    1900:	3f e1       	ldi	r19, 0x1F	; 31
    1902:	40 e0       	ldi	r20, 0x00	; 0
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    190a:	8e b5       	in	r24, 0x2e	; 46
    190c:	8a 60       	ori	r24, 0x0A	; 10
    190e:	8e bd       	out	0x2e, r24	; 46

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    1910:	bb 27       	eor	r27, r27
    1912:	a5 2f       	mov	r26, r21
    1914:	94 2f       	mov	r25, r20
    1916:	83 2f       	mov	r24, r19
    1918:	8b bd       	out	0x2b, r24	; 43
  OCR1AL = ctc_match_overflow;
    191a:	2a bd       	out	0x2a, r18	; 42

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    191c:	89 b7       	in	r24, 0x39	; 57
    191e:	80 61       	ori	r24, 0x10	; 16
    1920:	89 bf       	out	0x39, r24	; 57
    1922:	08 95       	ret

00001924 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1924:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	09 c0       	rjmp	.+18     	; 0x193c <millis+0x18>
    millis_return = timer1_millis;
    192a:	60 91 0b 04 	lds	r22, 0x040B	; 0x80040b <timer1_millis>
    192e:	70 91 0c 04 	lds	r23, 0x040C	; 0x80040c <timer1_millis+0x1>
    1932:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <timer1_millis+0x2>
    1936:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	21 11       	cpse	r18, r1
    193e:	f5 cf       	rjmp	.-22     	; 0x192a <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1940:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
    1942:	08 95       	ret

00001944 <__subsf3>:
    1944:	50 58       	subi	r21, 0x80	; 128

00001946 <__addsf3>:
    1946:	bb 27       	eor	r27, r27
    1948:	aa 27       	eor	r26, r26
    194a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__addsf3x>
    194e:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__fp_round>
    1952:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscA>
    1956:	38 f0       	brcs	.+14     	; 0x1966 <__addsf3+0x20>
    1958:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_pscB>
    195c:	20 f0       	brcs	.+8      	; 0x1966 <__addsf3+0x20>
    195e:	39 f4       	brne	.+14     	; 0x196e <__addsf3+0x28>
    1960:	9f 3f       	cpi	r25, 0xFF	; 255
    1962:	19 f4       	brne	.+6      	; 0x196a <__addsf3+0x24>
    1964:	26 f4       	brtc	.+8      	; 0x196e <__addsf3+0x28>
    1966:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>
    196a:	0e f4       	brtc	.+2      	; 0x196e <__addsf3+0x28>
    196c:	e0 95       	com	r30
    196e:	e7 fb       	bst	r30, 7
    1970:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>

00001974 <__addsf3x>:
    1974:	e9 2f       	mov	r30, r25
    1976:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_split3>
    197a:	58 f3       	brcs	.-42     	; 0x1952 <__addsf3+0xc>
    197c:	ba 17       	cp	r27, r26
    197e:	62 07       	cpc	r22, r18
    1980:	73 07       	cpc	r23, r19
    1982:	84 07       	cpc	r24, r20
    1984:	95 07       	cpc	r25, r21
    1986:	20 f0       	brcs	.+8      	; 0x1990 <__addsf3x+0x1c>
    1988:	79 f4       	brne	.+30     	; 0x19a8 <__addsf3x+0x34>
    198a:	a6 f5       	brtc	.+104    	; 0x19f4 <__addsf3x+0x80>
    198c:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_zero>
    1990:	0e f4       	brtc	.+2      	; 0x1994 <__addsf3x+0x20>
    1992:	e0 95       	com	r30
    1994:	0b 2e       	mov	r0, r27
    1996:	ba 2f       	mov	r27, r26
    1998:	a0 2d       	mov	r26, r0
    199a:	0b 01       	movw	r0, r22
    199c:	b9 01       	movw	r22, r18
    199e:	90 01       	movw	r18, r0
    19a0:	0c 01       	movw	r0, r24
    19a2:	ca 01       	movw	r24, r20
    19a4:	a0 01       	movw	r20, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	ff 27       	eor	r31, r31
    19aa:	59 1b       	sub	r21, r25
    19ac:	99 f0       	breq	.+38     	; 0x19d4 <__addsf3x+0x60>
    19ae:	59 3f       	cpi	r21, 0xF9	; 249
    19b0:	50 f4       	brcc	.+20     	; 0x19c6 <__addsf3x+0x52>
    19b2:	50 3e       	cpi	r21, 0xE0	; 224
    19b4:	68 f1       	brcs	.+90     	; 0x1a10 <__addsf3x+0x9c>
    19b6:	1a 16       	cp	r1, r26
    19b8:	f0 40       	sbci	r31, 0x00	; 0
    19ba:	a2 2f       	mov	r26, r18
    19bc:	23 2f       	mov	r18, r19
    19be:	34 2f       	mov	r19, r20
    19c0:	44 27       	eor	r20, r20
    19c2:	58 5f       	subi	r21, 0xF8	; 248
    19c4:	f3 cf       	rjmp	.-26     	; 0x19ac <__addsf3x+0x38>
    19c6:	46 95       	lsr	r20
    19c8:	37 95       	ror	r19
    19ca:	27 95       	ror	r18
    19cc:	a7 95       	ror	r26
    19ce:	f0 40       	sbci	r31, 0x00	; 0
    19d0:	53 95       	inc	r21
    19d2:	c9 f7       	brne	.-14     	; 0x19c6 <__addsf3x+0x52>
    19d4:	7e f4       	brtc	.+30     	; 0x19f4 <__addsf3x+0x80>
    19d6:	1f 16       	cp	r1, r31
    19d8:	ba 0b       	sbc	r27, r26
    19da:	62 0b       	sbc	r22, r18
    19dc:	73 0b       	sbc	r23, r19
    19de:	84 0b       	sbc	r24, r20
    19e0:	ba f0       	brmi	.+46     	; 0x1a10 <__addsf3x+0x9c>
    19e2:	91 50       	subi	r25, 0x01	; 1
    19e4:	a1 f0       	breq	.+40     	; 0x1a0e <__addsf3x+0x9a>
    19e6:	ff 0f       	add	r31, r31
    19e8:	bb 1f       	adc	r27, r27
    19ea:	66 1f       	adc	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	c2 f7       	brpl	.-16     	; 0x19e2 <__addsf3x+0x6e>
    19f2:	0e c0       	rjmp	.+28     	; 0x1a10 <__addsf3x+0x9c>
    19f4:	ba 0f       	add	r27, r26
    19f6:	62 1f       	adc	r22, r18
    19f8:	73 1f       	adc	r23, r19
    19fa:	84 1f       	adc	r24, r20
    19fc:	48 f4       	brcc	.+18     	; 0x1a10 <__addsf3x+0x9c>
    19fe:	87 95       	ror	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	b7 95       	ror	r27
    1a06:	f7 95       	ror	r31
    1a08:	9e 3f       	cpi	r25, 0xFE	; 254
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <__addsf3x+0x9a>
    1a0c:	b0 cf       	rjmp	.-160    	; 0x196e <__addsf3+0x28>
    1a0e:	93 95       	inc	r25
    1a10:	88 0f       	add	r24, r24
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__addsf3x+0xa2>
    1a14:	99 27       	eor	r25, r25
    1a16:	ee 0f       	add	r30, r30
    1a18:	97 95       	ror	r25
    1a1a:	87 95       	ror	r24
    1a1c:	08 95       	ret

00001a1e <__cmpsf2>:
    1a1e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_cmp>
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <__cmpsf2+0x8>
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	08 95       	ret

00001a28 <__divsf3>:
    1a28:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__divsf3x>
    1a2c:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__fp_round>
    1a30:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_pscB>
    1a34:	58 f0       	brcs	.+22     	; 0x1a4c <__divsf3+0x24>
    1a36:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscA>
    1a3a:	40 f0       	brcs	.+16     	; 0x1a4c <__divsf3+0x24>
    1a3c:	29 f4       	brne	.+10     	; 0x1a48 <__divsf3+0x20>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <__divsf3+0x24>
    1a42:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1a46:	51 11       	cpse	r21, r1
    1a48:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>
    1a4c:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>

00001a50 <__divsf3x>:
    1a50:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_split3>
    1a54:	68 f3       	brcs	.-38     	; 0x1a30 <__divsf3+0x8>

00001a56 <__divsf3_pse>:
    1a56:	99 23       	and	r25, r25
    1a58:	b1 f3       	breq	.-20     	; 0x1a46 <__divsf3+0x1e>
    1a5a:	55 23       	and	r21, r21
    1a5c:	91 f3       	breq	.-28     	; 0x1a42 <__divsf3+0x1a>
    1a5e:	95 1b       	sub	r25, r21
    1a60:	55 0b       	sbc	r21, r21
    1a62:	bb 27       	eor	r27, r27
    1a64:	aa 27       	eor	r26, r26
    1a66:	62 17       	cp	r22, r18
    1a68:	73 07       	cpc	r23, r19
    1a6a:	84 07       	cpc	r24, r20
    1a6c:	38 f0       	brcs	.+14     	; 0x1a7c <__divsf3_pse+0x26>
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	5f 4f       	sbci	r21, 0xFF	; 255
    1a72:	22 0f       	add	r18, r18
    1a74:	33 1f       	adc	r19, r19
    1a76:	44 1f       	adc	r20, r20
    1a78:	aa 1f       	adc	r26, r26
    1a7a:	a9 f3       	breq	.-22     	; 0x1a66 <__divsf3_pse+0x10>
    1a7c:	35 d0       	rcall	.+106    	; 0x1ae8 <__divsf3_pse+0x92>
    1a7e:	0e 2e       	mov	r0, r30
    1a80:	3a f0       	brmi	.+14     	; 0x1a90 <__divsf3_pse+0x3a>
    1a82:	e0 e8       	ldi	r30, 0x80	; 128
    1a84:	32 d0       	rcall	.+100    	; 0x1aea <__divsf3_pse+0x94>
    1a86:	91 50       	subi	r25, 0x01	; 1
    1a88:	50 40       	sbci	r21, 0x00	; 0
    1a8a:	e6 95       	lsr	r30
    1a8c:	00 1c       	adc	r0, r0
    1a8e:	ca f7       	brpl	.-14     	; 0x1a82 <__divsf3_pse+0x2c>
    1a90:	2b d0       	rcall	.+86     	; 0x1ae8 <__divsf3_pse+0x92>
    1a92:	fe 2f       	mov	r31, r30
    1a94:	29 d0       	rcall	.+82     	; 0x1ae8 <__divsf3_pse+0x92>
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	88 1f       	adc	r24, r24
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	26 17       	cp	r18, r22
    1aa0:	37 07       	cpc	r19, r23
    1aa2:	48 07       	cpc	r20, r24
    1aa4:	ab 07       	cpc	r26, r27
    1aa6:	b0 e8       	ldi	r27, 0x80	; 128
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <__divsf3_pse+0x56>
    1aaa:	bb 0b       	sbc	r27, r27
    1aac:	80 2d       	mov	r24, r0
    1aae:	bf 01       	movw	r22, r30
    1ab0:	ff 27       	eor	r31, r31
    1ab2:	93 58       	subi	r25, 0x83	; 131
    1ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab6:	3a f0       	brmi	.+14     	; 0x1ac6 <__divsf3_pse+0x70>
    1ab8:	9e 3f       	cpi	r25, 0xFE	; 254
    1aba:	51 05       	cpc	r21, r1
    1abc:	78 f0       	brcs	.+30     	; 0x1adc <__divsf3_pse+0x86>
    1abe:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1ac2:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>
    1ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac8:	e4 f3       	brlt	.-8      	; 0x1ac2 <__divsf3_pse+0x6c>
    1aca:	98 3e       	cpi	r25, 0xE8	; 232
    1acc:	d4 f3       	brlt	.-12     	; 0x1ac2 <__divsf3_pse+0x6c>
    1ace:	86 95       	lsr	r24
    1ad0:	77 95       	ror	r23
    1ad2:	67 95       	ror	r22
    1ad4:	b7 95       	ror	r27
    1ad6:	f7 95       	ror	r31
    1ad8:	9f 5f       	subi	r25, 0xFF	; 255
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__divsf3_pse+0x78>
    1adc:	88 0f       	add	r24, r24
    1ade:	91 1d       	adc	r25, r1
    1ae0:	96 95       	lsr	r25
    1ae2:	87 95       	ror	r24
    1ae4:	97 f9       	bld	r25, 7
    1ae6:	08 95       	ret
    1ae8:	e1 e0       	ldi	r30, 0x01	; 1
    1aea:	66 0f       	add	r22, r22
    1aec:	77 1f       	adc	r23, r23
    1aee:	88 1f       	adc	r24, r24
    1af0:	bb 1f       	adc	r27, r27
    1af2:	62 17       	cp	r22, r18
    1af4:	73 07       	cpc	r23, r19
    1af6:	84 07       	cpc	r24, r20
    1af8:	ba 07       	cpc	r27, r26
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__divsf3_pse+0xae>
    1afc:	62 1b       	sub	r22, r18
    1afe:	73 0b       	sbc	r23, r19
    1b00:	84 0b       	sbc	r24, r20
    1b02:	ba 0b       	sbc	r27, r26
    1b04:	ee 1f       	adc	r30, r30
    1b06:	88 f7       	brcc	.-30     	; 0x1aea <__divsf3_pse+0x94>
    1b08:	e0 95       	com	r30
    1b0a:	08 95       	ret

00001b0c <__fixunssfsi>:
    1b0c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fp_splitA>
    1b10:	88 f0       	brcs	.+34     	; 0x1b34 <__fixunssfsi+0x28>
    1b12:	9f 57       	subi	r25, 0x7F	; 127
    1b14:	98 f0       	brcs	.+38     	; 0x1b3c <__fixunssfsi+0x30>
    1b16:	b9 2f       	mov	r27, r25
    1b18:	99 27       	eor	r25, r25
    1b1a:	b7 51       	subi	r27, 0x17	; 23
    1b1c:	b0 f0       	brcs	.+44     	; 0x1b4a <__fixunssfsi+0x3e>
    1b1e:	e1 f0       	breq	.+56     	; 0x1b58 <__fixunssfsi+0x4c>
    1b20:	66 0f       	add	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	88 1f       	adc	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	1a f0       	brmi	.+6      	; 0x1b30 <__fixunssfsi+0x24>
    1b2a:	ba 95       	dec	r27
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__fixunssfsi+0x14>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <__fixunssfsi+0x4c>
    1b30:	b1 30       	cpi	r27, 0x01	; 1
    1b32:	91 f0       	breq	.+36     	; 0x1b58 <__fixunssfsi+0x4c>
    1b34:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__fp_zero>
    1b38:	b1 e0       	ldi	r27, 0x01	; 1
    1b3a:	08 95       	ret
    1b3c:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__fp_zero>
    1b40:	67 2f       	mov	r22, r23
    1b42:	78 2f       	mov	r23, r24
    1b44:	88 27       	eor	r24, r24
    1b46:	b8 5f       	subi	r27, 0xF8	; 248
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <__fixunssfsi+0x4c>
    1b4a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b4c:	cc f3       	brlt	.-14     	; 0x1b40 <__fixunssfsi+0x34>
    1b4e:	86 95       	lsr	r24
    1b50:	77 95       	ror	r23
    1b52:	67 95       	ror	r22
    1b54:	b3 95       	inc	r27
    1b56:	d9 f7       	brne	.-10     	; 0x1b4e <__fixunssfsi+0x42>
    1b58:	3e f4       	brtc	.+14     	; 0x1b68 <__fixunssfsi+0x5c>
    1b5a:	90 95       	com	r25
    1b5c:	80 95       	com	r24
    1b5e:	70 95       	com	r23
    1b60:	61 95       	neg	r22
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	8f 4f       	sbci	r24, 0xFF	; 255
    1b66:	9f 4f       	sbci	r25, 0xFF	; 255
    1b68:	08 95       	ret

00001b6a <__floatunsisf>:
    1b6a:	e8 94       	clt
    1b6c:	09 c0       	rjmp	.+18     	; 0x1b80 <__floatsisf+0x12>

00001b6e <__floatsisf>:
    1b6e:	97 fb       	bst	r25, 7
    1b70:	3e f4       	brtc	.+14     	; 0x1b80 <__floatsisf+0x12>
    1b72:	90 95       	com	r25
    1b74:	80 95       	com	r24
    1b76:	70 95       	com	r23
    1b78:	61 95       	neg	r22
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	99 23       	and	r25, r25
    1b82:	a9 f0       	breq	.+42     	; 0x1bae <__floatsisf+0x40>
    1b84:	f9 2f       	mov	r31, r25
    1b86:	96 e9       	ldi	r25, 0x96	; 150
    1b88:	bb 27       	eor	r27, r27
    1b8a:	93 95       	inc	r25
    1b8c:	f6 95       	lsr	r31
    1b8e:	87 95       	ror	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f1 11       	cpse	r31, r1
    1b98:	f8 cf       	rjmp	.-16     	; 0x1b8a <__floatsisf+0x1c>
    1b9a:	fa f4       	brpl	.+62     	; 0x1bda <__floatsisf+0x6c>
    1b9c:	bb 0f       	add	r27, r27
    1b9e:	11 f4       	brne	.+4      	; 0x1ba4 <__floatsisf+0x36>
    1ba0:	60 ff       	sbrs	r22, 0
    1ba2:	1b c0       	rjmp	.+54     	; 0x1bda <__floatsisf+0x6c>
    1ba4:	6f 5f       	subi	r22, 0xFF	; 255
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <__floatsisf+0x6c>
    1bae:	88 23       	and	r24, r24
    1bb0:	11 f0       	breq	.+4      	; 0x1bb6 <__floatsisf+0x48>
    1bb2:	96 e9       	ldi	r25, 0x96	; 150
    1bb4:	11 c0       	rjmp	.+34     	; 0x1bd8 <__floatsisf+0x6a>
    1bb6:	77 23       	and	r23, r23
    1bb8:	21 f0       	breq	.+8      	; 0x1bc2 <__floatsisf+0x54>
    1bba:	9e e8       	ldi	r25, 0x8E	; 142
    1bbc:	87 2f       	mov	r24, r23
    1bbe:	76 2f       	mov	r23, r22
    1bc0:	05 c0       	rjmp	.+10     	; 0x1bcc <__floatsisf+0x5e>
    1bc2:	66 23       	and	r22, r22
    1bc4:	71 f0       	breq	.+28     	; 0x1be2 <__floatsisf+0x74>
    1bc6:	96 e8       	ldi	r25, 0x86	; 134
    1bc8:	86 2f       	mov	r24, r22
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	2a f0       	brmi	.+10     	; 0x1bda <__floatsisf+0x6c>
    1bd0:	9a 95       	dec	r25
    1bd2:	66 0f       	add	r22, r22
    1bd4:	77 1f       	adc	r23, r23
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	da f7       	brpl	.-10     	; 0x1bd0 <__floatsisf+0x62>
    1bda:	88 0f       	add	r24, r24
    1bdc:	96 95       	lsr	r25
    1bde:	87 95       	ror	r24
    1be0:	97 f9       	bld	r25, 7
    1be2:	08 95       	ret

00001be4 <__fp_cmp>:
    1be4:	99 0f       	add	r25, r25
    1be6:	00 08       	sbc	r0, r0
    1be8:	55 0f       	add	r21, r21
    1bea:	aa 0b       	sbc	r26, r26
    1bec:	e0 e8       	ldi	r30, 0x80	; 128
    1bee:	fe ef       	ldi	r31, 0xFE	; 254
    1bf0:	16 16       	cp	r1, r22
    1bf2:	17 06       	cpc	r1, r23
    1bf4:	e8 07       	cpc	r30, r24
    1bf6:	f9 07       	cpc	r31, r25
    1bf8:	c0 f0       	brcs	.+48     	; 0x1c2a <__fp_cmp+0x46>
    1bfa:	12 16       	cp	r1, r18
    1bfc:	13 06       	cpc	r1, r19
    1bfe:	e4 07       	cpc	r30, r20
    1c00:	f5 07       	cpc	r31, r21
    1c02:	98 f0       	brcs	.+38     	; 0x1c2a <__fp_cmp+0x46>
    1c04:	62 1b       	sub	r22, r18
    1c06:	73 0b       	sbc	r23, r19
    1c08:	84 0b       	sbc	r24, r20
    1c0a:	95 0b       	sbc	r25, r21
    1c0c:	39 f4       	brne	.+14     	; 0x1c1c <__fp_cmp+0x38>
    1c0e:	0a 26       	eor	r0, r26
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <__fp_cmp+0x46>
    1c12:	23 2b       	or	r18, r19
    1c14:	24 2b       	or	r18, r20
    1c16:	25 2b       	or	r18, r21
    1c18:	21 f4       	brne	.+8      	; 0x1c22 <__fp_cmp+0x3e>
    1c1a:	08 95       	ret
    1c1c:	0a 26       	eor	r0, r26
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <__fp_cmp+0x3e>
    1c20:	a1 40       	sbci	r26, 0x01	; 1
    1c22:	a6 95       	lsr	r26
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	81 1d       	adc	r24, r1
    1c28:	81 1d       	adc	r24, r1
    1c2a:	08 95       	ret

00001c2c <__fp_inf>:
    1c2c:	97 f9       	bld	r25, 7
    1c2e:	9f 67       	ori	r25, 0x7F	; 127
    1c30:	80 e8       	ldi	r24, 0x80	; 128
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <__fp_nan>:
    1c38:	9f ef       	ldi	r25, 0xFF	; 255
    1c3a:	80 ec       	ldi	r24, 0xC0	; 192
    1c3c:	08 95       	ret

00001c3e <__fp_pscA>:
    1c3e:	00 24       	eor	r0, r0
    1c40:	0a 94       	dec	r0
    1c42:	16 16       	cp	r1, r22
    1c44:	17 06       	cpc	r1, r23
    1c46:	18 06       	cpc	r1, r24
    1c48:	09 06       	cpc	r0, r25
    1c4a:	08 95       	ret

00001c4c <__fp_pscB>:
    1c4c:	00 24       	eor	r0, r0
    1c4e:	0a 94       	dec	r0
    1c50:	12 16       	cp	r1, r18
    1c52:	13 06       	cpc	r1, r19
    1c54:	14 06       	cpc	r1, r20
    1c56:	05 06       	cpc	r0, r21
    1c58:	08 95       	ret

00001c5a <__fp_round>:
    1c5a:	09 2e       	mov	r0, r25
    1c5c:	03 94       	inc	r0
    1c5e:	00 0c       	add	r0, r0
    1c60:	11 f4       	brne	.+4      	; 0x1c66 <__fp_round+0xc>
    1c62:	88 23       	and	r24, r24
    1c64:	52 f0       	brmi	.+20     	; 0x1c7a <__fp_round+0x20>
    1c66:	bb 0f       	add	r27, r27
    1c68:	40 f4       	brcc	.+16     	; 0x1c7a <__fp_round+0x20>
    1c6a:	bf 2b       	or	r27, r31
    1c6c:	11 f4       	brne	.+4      	; 0x1c72 <__fp_round+0x18>
    1c6e:	60 ff       	sbrs	r22, 0
    1c70:	04 c0       	rjmp	.+8      	; 0x1c7a <__fp_round+0x20>
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	8f 4f       	sbci	r24, 0xFF	; 255
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	08 95       	ret

00001c7c <__fp_split3>:
    1c7c:	57 fd       	sbrc	r21, 7
    1c7e:	90 58       	subi	r25, 0x80	; 128
    1c80:	44 0f       	add	r20, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	59 f0       	breq	.+22     	; 0x1c9c <__fp_splitA+0x10>
    1c86:	5f 3f       	cpi	r21, 0xFF	; 255
    1c88:	71 f0       	breq	.+28     	; 0x1ca6 <__fp_splitA+0x1a>
    1c8a:	47 95       	ror	r20

00001c8c <__fp_splitA>:
    1c8c:	88 0f       	add	r24, r24
    1c8e:	97 fb       	bst	r25, 7
    1c90:	99 1f       	adc	r25, r25
    1c92:	61 f0       	breq	.+24     	; 0x1cac <__fp_splitA+0x20>
    1c94:	9f 3f       	cpi	r25, 0xFF	; 255
    1c96:	79 f0       	breq	.+30     	; 0x1cb6 <__fp_splitA+0x2a>
    1c98:	87 95       	ror	r24
    1c9a:	08 95       	ret
    1c9c:	12 16       	cp	r1, r18
    1c9e:	13 06       	cpc	r1, r19
    1ca0:	14 06       	cpc	r1, r20
    1ca2:	55 1f       	adc	r21, r21
    1ca4:	f2 cf       	rjmp	.-28     	; 0x1c8a <__fp_split3+0xe>
    1ca6:	46 95       	lsr	r20
    1ca8:	f1 df       	rcall	.-30     	; 0x1c8c <__fp_splitA>
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <__fp_splitA+0x30>
    1cac:	16 16       	cp	r1, r22
    1cae:	17 06       	cpc	r1, r23
    1cb0:	18 06       	cpc	r1, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	f1 cf       	rjmp	.-30     	; 0x1c98 <__fp_splitA+0xc>
    1cb6:	86 95       	lsr	r24
    1cb8:	71 05       	cpc	r23, r1
    1cba:	61 05       	cpc	r22, r1
    1cbc:	08 94       	sec
    1cbe:	08 95       	ret

00001cc0 <__fp_zero>:
    1cc0:	e8 94       	clt

00001cc2 <__fp_szero>:
    1cc2:	bb 27       	eor	r27, r27
    1cc4:	66 27       	eor	r22, r22
    1cc6:	77 27       	eor	r23, r23
    1cc8:	cb 01       	movw	r24, r22
    1cca:	97 f9       	bld	r25, 7
    1ccc:	08 95       	ret

00001cce <__gesf2>:
    1cce:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <__fp_cmp>
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <__gesf2+0x8>
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	08 95       	ret

00001cd8 <__mulsf3>:
    1cd8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <__mulsf3x>
    1cdc:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__fp_round>
    1ce0:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__fp_pscA>
    1ce4:	38 f0       	brcs	.+14     	; 0x1cf4 <__mulsf3+0x1c>
    1ce6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__fp_pscB>
    1cea:	20 f0       	brcs	.+8      	; 0x1cf4 <__mulsf3+0x1c>
    1cec:	95 23       	and	r25, r21
    1cee:	11 f0       	breq	.+4      	; 0x1cf4 <__mulsf3+0x1c>
    1cf0:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1cf4:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>
    1cf8:	11 24       	eor	r1, r1
    1cfa:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>

00001cfe <__mulsf3x>:
    1cfe:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <__fp_split3>
    1d02:	70 f3       	brcs	.-36     	; 0x1ce0 <__mulsf3+0x8>

00001d04 <__mulsf3_pse>:
    1d04:	95 9f       	mul	r25, r21
    1d06:	c1 f3       	breq	.-16     	; 0x1cf8 <__mulsf3+0x20>
    1d08:	95 0f       	add	r25, r21
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	55 1f       	adc	r21, r21
    1d0e:	62 9f       	mul	r22, r18
    1d10:	f0 01       	movw	r30, r0
    1d12:	72 9f       	mul	r23, r18
    1d14:	bb 27       	eor	r27, r27
    1d16:	f0 0d       	add	r31, r0
    1d18:	b1 1d       	adc	r27, r1
    1d1a:	63 9f       	mul	r22, r19
    1d1c:	aa 27       	eor	r26, r26
    1d1e:	f0 0d       	add	r31, r0
    1d20:	b1 1d       	adc	r27, r1
    1d22:	aa 1f       	adc	r26, r26
    1d24:	64 9f       	mul	r22, r20
    1d26:	66 27       	eor	r22, r22
    1d28:	b0 0d       	add	r27, r0
    1d2a:	a1 1d       	adc	r26, r1
    1d2c:	66 1f       	adc	r22, r22
    1d2e:	82 9f       	mul	r24, r18
    1d30:	22 27       	eor	r18, r18
    1d32:	b0 0d       	add	r27, r0
    1d34:	a1 1d       	adc	r26, r1
    1d36:	62 1f       	adc	r22, r18
    1d38:	73 9f       	mul	r23, r19
    1d3a:	b0 0d       	add	r27, r0
    1d3c:	a1 1d       	adc	r26, r1
    1d3e:	62 1f       	adc	r22, r18
    1d40:	83 9f       	mul	r24, r19
    1d42:	a0 0d       	add	r26, r0
    1d44:	61 1d       	adc	r22, r1
    1d46:	22 1f       	adc	r18, r18
    1d48:	74 9f       	mul	r23, r20
    1d4a:	33 27       	eor	r19, r19
    1d4c:	a0 0d       	add	r26, r0
    1d4e:	61 1d       	adc	r22, r1
    1d50:	23 1f       	adc	r18, r19
    1d52:	84 9f       	mul	r24, r20
    1d54:	60 0d       	add	r22, r0
    1d56:	21 1d       	adc	r18, r1
    1d58:	82 2f       	mov	r24, r18
    1d5a:	76 2f       	mov	r23, r22
    1d5c:	6a 2f       	mov	r22, r26
    1d5e:	11 24       	eor	r1, r1
    1d60:	9f 57       	subi	r25, 0x7F	; 127
    1d62:	50 40       	sbci	r21, 0x00	; 0
    1d64:	9a f0       	brmi	.+38     	; 0x1d8c <__mulsf3_pse+0x88>
    1d66:	f1 f0       	breq	.+60     	; 0x1da4 <__mulsf3_pse+0xa0>
    1d68:	88 23       	and	r24, r24
    1d6a:	4a f0       	brmi	.+18     	; 0x1d7e <__mulsf3_pse+0x7a>
    1d6c:	ee 0f       	add	r30, r30
    1d6e:	ff 1f       	adc	r31, r31
    1d70:	bb 1f       	adc	r27, r27
    1d72:	66 1f       	adc	r22, r22
    1d74:	77 1f       	adc	r23, r23
    1d76:	88 1f       	adc	r24, r24
    1d78:	91 50       	subi	r25, 0x01	; 1
    1d7a:	50 40       	sbci	r21, 0x00	; 0
    1d7c:	a9 f7       	brne	.-22     	; 0x1d68 <__mulsf3_pse+0x64>
    1d7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d80:	51 05       	cpc	r21, r1
    1d82:	80 f0       	brcs	.+32     	; 0x1da4 <__mulsf3_pse+0xa0>
    1d84:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_inf>
    1d88:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__fp_szero>
    1d8c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8e:	e4 f3       	brlt	.-8      	; 0x1d88 <__mulsf3_pse+0x84>
    1d90:	98 3e       	cpi	r25, 0xE8	; 232
    1d92:	d4 f3       	brlt	.-12     	; 0x1d88 <__mulsf3_pse+0x84>
    1d94:	86 95       	lsr	r24
    1d96:	77 95       	ror	r23
    1d98:	67 95       	ror	r22
    1d9a:	b7 95       	ror	r27
    1d9c:	f7 95       	ror	r31
    1d9e:	e7 95       	ror	r30
    1da0:	9f 5f       	subi	r25, 0xFF	; 255
    1da2:	c1 f7       	brne	.-16     	; 0x1d94 <__mulsf3_pse+0x90>
    1da4:	fe 2b       	or	r31, r30
    1da6:	88 0f       	add	r24, r24
    1da8:	91 1d       	adc	r25, r1
    1daa:	96 95       	lsr	r25
    1dac:	87 95       	ror	r24
    1dae:	97 f9       	bld	r25, 7
    1db0:	08 95       	ret
    1db2:	19 f4       	brne	.+6      	; 0x1dba <__mulsf3_pse+0xb6>
    1db4:	16 f4       	brtc	.+4      	; 0x1dba <__mulsf3_pse+0xb6>
    1db6:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_nan>
    1dba:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__fp_mpack>

00001dbe <sqrt>:
    1dbe:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fp_splitA>
    1dc2:	b8 f3       	brcs	.-18     	; 0x1db2 <__mulsf3_pse+0xae>
    1dc4:	99 23       	and	r25, r25
    1dc6:	c9 f3       	breq	.-14     	; 0x1dba <__mulsf3_pse+0xb6>
    1dc8:	b6 f3       	brts	.-20     	; 0x1db6 <__mulsf3_pse+0xb2>
    1dca:	9f 57       	subi	r25, 0x7F	; 127
    1dcc:	55 0b       	sbc	r21, r21
    1dce:	87 ff       	sbrs	r24, 7
    1dd0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__fp_norm2>
    1dd4:	00 24       	eor	r0, r0
    1dd6:	a0 e6       	ldi	r26, 0x60	; 96
    1dd8:	40 ea       	ldi	r20, 0xA0	; 160
    1dda:	90 01       	movw	r18, r0
    1ddc:	80 58       	subi	r24, 0x80	; 128
    1dde:	56 95       	lsr	r21
    1de0:	97 95       	ror	r25
    1de2:	28 f4       	brcc	.+10     	; 0x1dee <sqrt+0x30>
    1de4:	80 5c       	subi	r24, 0xC0	; 192
    1de6:	66 0f       	add	r22, r22
    1de8:	77 1f       	adc	r23, r23
    1dea:	88 1f       	adc	r24, r24
    1dec:	20 f0       	brcs	.+8      	; 0x1df6 <sqrt+0x38>
    1dee:	26 17       	cp	r18, r22
    1df0:	37 07       	cpc	r19, r23
    1df2:	48 07       	cpc	r20, r24
    1df4:	30 f4       	brcc	.+12     	; 0x1e02 <sqrt+0x44>
    1df6:	62 1b       	sub	r22, r18
    1df8:	73 0b       	sbc	r23, r19
    1dfa:	84 0b       	sbc	r24, r20
    1dfc:	20 29       	or	r18, r0
    1dfe:	31 29       	or	r19, r1
    1e00:	4a 2b       	or	r20, r26
    1e02:	a6 95       	lsr	r26
    1e04:	17 94       	ror	r1
    1e06:	07 94       	ror	r0
    1e08:	20 25       	eor	r18, r0
    1e0a:	31 25       	eor	r19, r1
    1e0c:	4a 27       	eor	r20, r26
    1e0e:	58 f7       	brcc	.-42     	; 0x1de6 <sqrt+0x28>
    1e10:	66 0f       	add	r22, r22
    1e12:	77 1f       	adc	r23, r23
    1e14:	88 1f       	adc	r24, r24
    1e16:	20 f0       	brcs	.+8      	; 0x1e20 <sqrt+0x62>
    1e18:	26 17       	cp	r18, r22
    1e1a:	37 07       	cpc	r19, r23
    1e1c:	48 07       	cpc	r20, r24
    1e1e:	30 f4       	brcc	.+12     	; 0x1e2c <sqrt+0x6e>
    1e20:	62 0b       	sbc	r22, r18
    1e22:	73 0b       	sbc	r23, r19
    1e24:	84 0b       	sbc	r24, r20
    1e26:	20 0d       	add	r18, r0
    1e28:	31 1d       	adc	r19, r1
    1e2a:	41 1d       	adc	r20, r1
    1e2c:	a0 95       	com	r26
    1e2e:	81 f7       	brne	.-32     	; 0x1e10 <sqrt+0x52>
    1e30:	b9 01       	movw	r22, r18
    1e32:	84 2f       	mov	r24, r20
    1e34:	91 58       	subi	r25, 0x81	; 129
    1e36:	88 0f       	add	r24, r24
    1e38:	96 95       	lsr	r25
    1e3a:	87 95       	ror	r24
    1e3c:	08 95       	ret

00001e3e <__fp_mpack>:
    1e3e:	9f 3f       	cpi	r25, 0xFF	; 255
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <__fp_mpack_finite+0xc>

00001e42 <__fp_mpack_finite>:
    1e42:	91 50       	subi	r25, 0x01	; 1
    1e44:	20 f4       	brcc	.+8      	; 0x1e4e <__fp_mpack_finite+0xc>
    1e46:	87 95       	ror	r24
    1e48:	77 95       	ror	r23
    1e4a:	67 95       	ror	r22
    1e4c:	b7 95       	ror	r27
    1e4e:	88 0f       	add	r24, r24
    1e50:	91 1d       	adc	r25, r1
    1e52:	96 95       	lsr	r25
    1e54:	87 95       	ror	r24
    1e56:	97 f9       	bld	r25, 7
    1e58:	08 95       	ret

00001e5a <__fp_norm2>:
    1e5a:	91 50       	subi	r25, 0x01	; 1
    1e5c:	50 40       	sbci	r21, 0x00	; 0
    1e5e:	66 0f       	add	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	d2 f7       	brpl	.-12     	; 0x1e5a <__fp_norm2>
    1e66:	08 95       	ret

00001e68 <__divmodhi4>:
    1e68:	97 fb       	bst	r25, 7
    1e6a:	07 2e       	mov	r0, r23
    1e6c:	16 f4       	brtc	.+4      	; 0x1e72 <__divmodhi4+0xa>
    1e6e:	00 94       	com	r0
    1e70:	07 d0       	rcall	.+14     	; 0x1e80 <__divmodhi4_neg1>
    1e72:	77 fd       	sbrc	r23, 7
    1e74:	09 d0       	rcall	.+18     	; 0x1e88 <__divmodhi4_neg2>
    1e76:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <__udivmodhi4>
    1e7a:	07 fc       	sbrc	r0, 7
    1e7c:	05 d0       	rcall	.+10     	; 0x1e88 <__divmodhi4_neg2>
    1e7e:	3e f4       	brtc	.+14     	; 0x1e8e <__divmodhi4_exit>

00001e80 <__divmodhi4_neg1>:
    1e80:	90 95       	com	r25
    1e82:	81 95       	neg	r24
    1e84:	9f 4f       	sbci	r25, 0xFF	; 255
    1e86:	08 95       	ret

00001e88 <__divmodhi4_neg2>:
    1e88:	70 95       	com	r23
    1e8a:	61 95       	neg	r22
    1e8c:	7f 4f       	sbci	r23, 0xFF	; 255

00001e8e <__divmodhi4_exit>:
    1e8e:	08 95       	ret

00001e90 <__udivmodsi4>:
    1e90:	a1 e2       	ldi	r26, 0x21	; 33
    1e92:	1a 2e       	mov	r1, r26
    1e94:	aa 1b       	sub	r26, r26
    1e96:	bb 1b       	sub	r27, r27
    1e98:	fd 01       	movw	r30, r26
    1e9a:	0d c0       	rjmp	.+26     	; 0x1eb6 <__udivmodsi4_ep>

00001e9c <__udivmodsi4_loop>:
    1e9c:	aa 1f       	adc	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	ee 1f       	adc	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	a2 17       	cp	r26, r18
    1ea6:	b3 07       	cpc	r27, r19
    1ea8:	e4 07       	cpc	r30, r20
    1eaa:	f5 07       	cpc	r31, r21
    1eac:	20 f0       	brcs	.+8      	; 0x1eb6 <__udivmodsi4_ep>
    1eae:	a2 1b       	sub	r26, r18
    1eb0:	b3 0b       	sbc	r27, r19
    1eb2:	e4 0b       	sbc	r30, r20
    1eb4:	f5 0b       	sbc	r31, r21

00001eb6 <__udivmodsi4_ep>:
    1eb6:	66 1f       	adc	r22, r22
    1eb8:	77 1f       	adc	r23, r23
    1eba:	88 1f       	adc	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	1a 94       	dec	r1
    1ec0:	69 f7       	brne	.-38     	; 0x1e9c <__udivmodsi4_loop>
    1ec2:	60 95       	com	r22
    1ec4:	70 95       	com	r23
    1ec6:	80 95       	com	r24
    1ec8:	90 95       	com	r25
    1eca:	9b 01       	movw	r18, r22
    1ecc:	ac 01       	movw	r20, r24
    1ece:	bd 01       	movw	r22, r26
    1ed0:	cf 01       	movw	r24, r30
    1ed2:	08 95       	ret

00001ed4 <__tablejump2__>:
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	05 90       	lpm	r0, Z+
    1eda:	f4 91       	lpm	r31, Z
    1edc:	e0 2d       	mov	r30, r0
    1ede:	09 94       	ijmp

00001ee0 <__udivmodhi4>:
    1ee0:	aa 1b       	sub	r26, r26
    1ee2:	bb 1b       	sub	r27, r27
    1ee4:	51 e1       	ldi	r21, 0x11	; 17
    1ee6:	07 c0       	rjmp	.+14     	; 0x1ef6 <__udivmodhi4_ep>

00001ee8 <__udivmodhi4_loop>:
    1ee8:	aa 1f       	adc	r26, r26
    1eea:	bb 1f       	adc	r27, r27
    1eec:	a6 17       	cp	r26, r22
    1eee:	b7 07       	cpc	r27, r23
    1ef0:	10 f0       	brcs	.+4      	; 0x1ef6 <__udivmodhi4_ep>
    1ef2:	a6 1b       	sub	r26, r22
    1ef4:	b7 0b       	sbc	r27, r23

00001ef6 <__udivmodhi4_ep>:
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	5a 95       	dec	r21
    1efc:	a9 f7       	brne	.-22     	; 0x1ee8 <__udivmodhi4_loop>
    1efe:	80 95       	com	r24
    1f00:	90 95       	com	r25
    1f02:	bc 01       	movw	r22, r24
    1f04:	cd 01       	movw	r24, r26
    1f06:	08 95       	ret

00001f08 <malloc>:
    1f08:	0f 93       	push	r16
    1f0a:	1f 93       	push	r17
    1f0c:	cf 93       	push	r28
    1f0e:	df 93       	push	r29
    1f10:	82 30       	cpi	r24, 0x02	; 2
    1f12:	91 05       	cpc	r25, r1
    1f14:	10 f4       	brcc	.+4      	; 0x1f1a <malloc+0x12>
    1f16:	82 e0       	ldi	r24, 0x02	; 2
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	e0 91 c0 04 	lds	r30, 0x04C0	; 0x8004c0 <__flp>
    1f1e:	f0 91 c1 04 	lds	r31, 0x04C1	; 0x8004c1 <__flp+0x1>
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	a0 e0       	ldi	r26, 0x00	; 0
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	30 97       	sbiw	r30, 0x00	; 0
    1f2c:	19 f1       	breq	.+70     	; 0x1f74 <malloc+0x6c>
    1f2e:	40 81       	ld	r20, Z
    1f30:	51 81       	ldd	r21, Z+1	; 0x01
    1f32:	02 81       	ldd	r16, Z+2	; 0x02
    1f34:	13 81       	ldd	r17, Z+3	; 0x03
    1f36:	48 17       	cp	r20, r24
    1f38:	59 07       	cpc	r21, r25
    1f3a:	c8 f0       	brcs	.+50     	; 0x1f6e <malloc+0x66>
    1f3c:	84 17       	cp	r24, r20
    1f3e:	95 07       	cpc	r25, r21
    1f40:	69 f4       	brne	.+26     	; 0x1f5c <malloc+0x54>
    1f42:	10 97       	sbiw	r26, 0x00	; 0
    1f44:	31 f0       	breq	.+12     	; 0x1f52 <malloc+0x4a>
    1f46:	12 96       	adiw	r26, 0x02	; 2
    1f48:	0c 93       	st	X, r16
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	13 96       	adiw	r26, 0x03	; 3
    1f4e:	1c 93       	st	X, r17
    1f50:	27 c0       	rjmp	.+78     	; 0x1fa0 <malloc+0x98>
    1f52:	00 93 c0 04 	sts	0x04C0, r16	; 0x8004c0 <__flp>
    1f56:	10 93 c1 04 	sts	0x04C1, r17	; 0x8004c1 <__flp+0x1>
    1f5a:	22 c0       	rjmp	.+68     	; 0x1fa0 <malloc+0x98>
    1f5c:	21 15       	cp	r18, r1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	19 f0       	breq	.+6      	; 0x1f68 <malloc+0x60>
    1f62:	42 17       	cp	r20, r18
    1f64:	53 07       	cpc	r21, r19
    1f66:	18 f4       	brcc	.+6      	; 0x1f6e <malloc+0x66>
    1f68:	9a 01       	movw	r18, r20
    1f6a:	bd 01       	movw	r22, r26
    1f6c:	ef 01       	movw	r28, r30
    1f6e:	df 01       	movw	r26, r30
    1f70:	f8 01       	movw	r30, r16
    1f72:	db cf       	rjmp	.-74     	; 0x1f2a <malloc+0x22>
    1f74:	21 15       	cp	r18, r1
    1f76:	31 05       	cpc	r19, r1
    1f78:	f9 f0       	breq	.+62     	; 0x1fb8 <malloc+0xb0>
    1f7a:	28 1b       	sub	r18, r24
    1f7c:	39 0b       	sbc	r19, r25
    1f7e:	24 30       	cpi	r18, 0x04	; 4
    1f80:	31 05       	cpc	r19, r1
    1f82:	80 f4       	brcc	.+32     	; 0x1fa4 <malloc+0x9c>
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	61 15       	cp	r22, r1
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	21 f0       	breq	.+8      	; 0x1f96 <malloc+0x8e>
    1f8e:	fb 01       	movw	r30, r22
    1f90:	93 83       	std	Z+3, r25	; 0x03
    1f92:	82 83       	std	Z+2, r24	; 0x02
    1f94:	04 c0       	rjmp	.+8      	; 0x1f9e <malloc+0x96>
    1f96:	90 93 c1 04 	sts	0x04C1, r25	; 0x8004c1 <__flp+0x1>
    1f9a:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__flp>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	32 96       	adiw	r30, 0x02	; 2
    1fa2:	44 c0       	rjmp	.+136    	; 0x202c <malloc+0x124>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e2 0f       	add	r30, r18
    1fa8:	f3 1f       	adc	r31, r19
    1faa:	81 93       	st	Z+, r24
    1fac:	91 93       	st	Z+, r25
    1fae:	22 50       	subi	r18, 0x02	; 2
    1fb0:	31 09       	sbc	r19, r1
    1fb2:	39 83       	std	Y+1, r19	; 0x01
    1fb4:	28 83       	st	Y, r18
    1fb6:	3a c0       	rjmp	.+116    	; 0x202c <malloc+0x124>
    1fb8:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <__brkval>
    1fbc:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <__brkval+0x1>
    1fc0:	23 2b       	or	r18, r19
    1fc2:	41 f4       	brne	.+16     	; 0x1fd4 <malloc+0xcc>
    1fc4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1fc8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1fcc:	30 93 bf 04 	sts	0x04BF, r19	; 0x8004bf <__brkval+0x1>
    1fd0:	20 93 be 04 	sts	0x04BE, r18	; 0x8004be <__brkval>
    1fd4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1fd8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1fdc:	21 15       	cp	r18, r1
    1fde:	31 05       	cpc	r19, r1
    1fe0:	41 f4       	brne	.+16     	; 0x1ff2 <malloc+0xea>
    1fe2:	2d b7       	in	r18, 0x3d	; 61
    1fe4:	3e b7       	in	r19, 0x3e	; 62
    1fe6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1fea:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1fee:	24 1b       	sub	r18, r20
    1ff0:	35 0b       	sbc	r19, r21
    1ff2:	e0 91 be 04 	lds	r30, 0x04BE	; 0x8004be <__brkval>
    1ff6:	f0 91 bf 04 	lds	r31, 0x04BF	; 0x8004bf <__brkval+0x1>
    1ffa:	e2 17       	cp	r30, r18
    1ffc:	f3 07       	cpc	r31, r19
    1ffe:	a0 f4       	brcc	.+40     	; 0x2028 <malloc+0x120>
    2000:	2e 1b       	sub	r18, r30
    2002:	3f 0b       	sbc	r19, r31
    2004:	28 17       	cp	r18, r24
    2006:	39 07       	cpc	r19, r25
    2008:	78 f0       	brcs	.+30     	; 0x2028 <malloc+0x120>
    200a:	ac 01       	movw	r20, r24
    200c:	4e 5f       	subi	r20, 0xFE	; 254
    200e:	5f 4f       	sbci	r21, 0xFF	; 255
    2010:	24 17       	cp	r18, r20
    2012:	35 07       	cpc	r19, r21
    2014:	48 f0       	brcs	.+18     	; 0x2028 <malloc+0x120>
    2016:	4e 0f       	add	r20, r30
    2018:	5f 1f       	adc	r21, r31
    201a:	50 93 bf 04 	sts	0x04BF, r21	; 0x8004bf <__brkval+0x1>
    201e:	40 93 be 04 	sts	0x04BE, r20	; 0x8004be <__brkval>
    2022:	81 93       	st	Z+, r24
    2024:	91 93       	st	Z+, r25
    2026:	02 c0       	rjmp	.+4      	; 0x202c <malloc+0x124>
    2028:	e0 e0       	ldi	r30, 0x00	; 0
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	cf 01       	movw	r24, r30
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <free>:
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	09 f4       	brne	.+2      	; 0x2042 <free+0xa>
    2040:	81 c0       	rjmp	.+258    	; 0x2144 <free+0x10c>
    2042:	fc 01       	movw	r30, r24
    2044:	32 97       	sbiw	r30, 0x02	; 2
    2046:	13 82       	std	Z+3, r1	; 0x03
    2048:	12 82       	std	Z+2, r1	; 0x02
    204a:	a0 91 c0 04 	lds	r26, 0x04C0	; 0x8004c0 <__flp>
    204e:	b0 91 c1 04 	lds	r27, 0x04C1	; 0x8004c1 <__flp+0x1>
    2052:	10 97       	sbiw	r26, 0x00	; 0
    2054:	81 f4       	brne	.+32     	; 0x2076 <free+0x3e>
    2056:	20 81       	ld	r18, Z
    2058:	31 81       	ldd	r19, Z+1	; 0x01
    205a:	82 0f       	add	r24, r18
    205c:	93 1f       	adc	r25, r19
    205e:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <__brkval>
    2062:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <__brkval+0x1>
    2066:	28 17       	cp	r18, r24
    2068:	39 07       	cpc	r19, r25
    206a:	51 f5       	brne	.+84     	; 0x20c0 <free+0x88>
    206c:	f0 93 bf 04 	sts	0x04BF, r31	; 0x8004bf <__brkval+0x1>
    2070:	e0 93 be 04 	sts	0x04BE, r30	; 0x8004be <__brkval>
    2074:	67 c0       	rjmp	.+206    	; 0x2144 <free+0x10c>
    2076:	ed 01       	movw	r28, r26
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	ce 17       	cp	r28, r30
    207e:	df 07       	cpc	r29, r31
    2080:	40 f4       	brcc	.+16     	; 0x2092 <free+0x5a>
    2082:	4a 81       	ldd	r20, Y+2	; 0x02
    2084:	5b 81       	ldd	r21, Y+3	; 0x03
    2086:	9e 01       	movw	r18, r28
    2088:	41 15       	cp	r20, r1
    208a:	51 05       	cpc	r21, r1
    208c:	f1 f0       	breq	.+60     	; 0x20ca <free+0x92>
    208e:	ea 01       	movw	r28, r20
    2090:	f5 cf       	rjmp	.-22     	; 0x207c <free+0x44>
    2092:	d3 83       	std	Z+3, r29	; 0x03
    2094:	c2 83       	std	Z+2, r28	; 0x02
    2096:	40 81       	ld	r20, Z
    2098:	51 81       	ldd	r21, Z+1	; 0x01
    209a:	84 0f       	add	r24, r20
    209c:	95 1f       	adc	r25, r21
    209e:	c8 17       	cp	r28, r24
    20a0:	d9 07       	cpc	r29, r25
    20a2:	59 f4       	brne	.+22     	; 0x20ba <free+0x82>
    20a4:	88 81       	ld	r24, Y
    20a6:	99 81       	ldd	r25, Y+1	; 0x01
    20a8:	84 0f       	add	r24, r20
    20aa:	95 1f       	adc	r25, r21
    20ac:	02 96       	adiw	r24, 0x02	; 2
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	9b 81       	ldd	r25, Y+3	; 0x03
    20b6:	93 83       	std	Z+3, r25	; 0x03
    20b8:	82 83       	std	Z+2, r24	; 0x02
    20ba:	21 15       	cp	r18, r1
    20bc:	31 05       	cpc	r19, r1
    20be:	29 f4       	brne	.+10     	; 0x20ca <free+0x92>
    20c0:	f0 93 c1 04 	sts	0x04C1, r31	; 0x8004c1 <__flp+0x1>
    20c4:	e0 93 c0 04 	sts	0x04C0, r30	; 0x8004c0 <__flp>
    20c8:	3d c0       	rjmp	.+122    	; 0x2144 <free+0x10c>
    20ca:	e9 01       	movw	r28, r18
    20cc:	fb 83       	std	Y+3, r31	; 0x03
    20ce:	ea 83       	std	Y+2, r30	; 0x02
    20d0:	49 91       	ld	r20, Y+
    20d2:	59 91       	ld	r21, Y+
    20d4:	c4 0f       	add	r28, r20
    20d6:	d5 1f       	adc	r29, r21
    20d8:	ec 17       	cp	r30, r28
    20da:	fd 07       	cpc	r31, r29
    20dc:	61 f4       	brne	.+24     	; 0x20f6 <free+0xbe>
    20de:	80 81       	ld	r24, Z
    20e0:	91 81       	ldd	r25, Z+1	; 0x01
    20e2:	84 0f       	add	r24, r20
    20e4:	95 1f       	adc	r25, r21
    20e6:	02 96       	adiw	r24, 0x02	; 2
    20e8:	e9 01       	movw	r28, r18
    20ea:	99 83       	std	Y+1, r25	; 0x01
    20ec:	88 83       	st	Y, r24
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	93 81       	ldd	r25, Z+3	; 0x03
    20f2:	9b 83       	std	Y+3, r25	; 0x03
    20f4:	8a 83       	std	Y+2, r24	; 0x02
    20f6:	e0 e0       	ldi	r30, 0x00	; 0
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	12 96       	adiw	r26, 0x02	; 2
    20fc:	8d 91       	ld	r24, X+
    20fe:	9c 91       	ld	r25, X
    2100:	13 97       	sbiw	r26, 0x03	; 3
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	19 f0       	breq	.+6      	; 0x210c <free+0xd4>
    2106:	fd 01       	movw	r30, r26
    2108:	dc 01       	movw	r26, r24
    210a:	f7 cf       	rjmp	.-18     	; 0x20fa <free+0xc2>
    210c:	8d 91       	ld	r24, X+
    210e:	9c 91       	ld	r25, X
    2110:	11 97       	sbiw	r26, 0x01	; 1
    2112:	9d 01       	movw	r18, r26
    2114:	2e 5f       	subi	r18, 0xFE	; 254
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	82 0f       	add	r24, r18
    211a:	93 1f       	adc	r25, r19
    211c:	20 91 be 04 	lds	r18, 0x04BE	; 0x8004be <__brkval>
    2120:	30 91 bf 04 	lds	r19, 0x04BF	; 0x8004bf <__brkval+0x1>
    2124:	28 17       	cp	r18, r24
    2126:	39 07       	cpc	r19, r25
    2128:	69 f4       	brne	.+26     	; 0x2144 <free+0x10c>
    212a:	30 97       	sbiw	r30, 0x00	; 0
    212c:	29 f4       	brne	.+10     	; 0x2138 <free+0x100>
    212e:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <__flp+0x1>
    2132:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <__flp>
    2136:	02 c0       	rjmp	.+4      	; 0x213c <free+0x104>
    2138:	13 82       	std	Z+3, r1	; 0x03
    213a:	12 82       	std	Z+2, r1	; 0x02
    213c:	b0 93 bf 04 	sts	0x04BF, r27	; 0x8004bf <__brkval+0x1>
    2140:	a0 93 be 04 	sts	0x04BE, r26	; 0x8004be <__brkval>
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <strcat>:
    214a:	fb 01       	movw	r30, r22
    214c:	dc 01       	movw	r26, r24
    214e:	0d 90       	ld	r0, X+
    2150:	00 20       	and	r0, r0
    2152:	e9 f7       	brne	.-6      	; 0x214e <strcat+0x4>
    2154:	11 97       	sbiw	r26, 0x01	; 1
    2156:	01 90       	ld	r0, Z+
    2158:	0d 92       	st	X+, r0
    215a:	00 20       	and	r0, r0
    215c:	e1 f7       	brne	.-8      	; 0x2156 <strcat+0xc>
    215e:	08 95       	ret

00002160 <strcpy>:
    2160:	fb 01       	movw	r30, r22
    2162:	dc 01       	movw	r26, r24
    2164:	01 90       	ld	r0, Z+
    2166:	0d 92       	st	X+, r0
    2168:	00 20       	and	r0, r0
    216a:	e1 f7       	brne	.-8      	; 0x2164 <strcpy+0x4>
    216c:	08 95       	ret

0000216e <__itoa_ncheck>:
    216e:	bb 27       	eor	r27, r27
    2170:	4a 30       	cpi	r20, 0x0A	; 10
    2172:	31 f4       	brne	.+12     	; 0x2180 <__itoa_ncheck+0x12>
    2174:	99 23       	and	r25, r25
    2176:	22 f4       	brpl	.+8      	; 0x2180 <__itoa_ncheck+0x12>
    2178:	bd e2       	ldi	r27, 0x2D	; 45
    217a:	90 95       	com	r25
    217c:	81 95       	neg	r24
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__utoa_common>

00002184 <__utoa_ncheck>:
    2184:	bb 27       	eor	r27, r27

00002186 <__utoa_common>:
    2186:	fb 01       	movw	r30, r22
    2188:	55 27       	eor	r21, r21
    218a:	aa 27       	eor	r26, r26
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	aa 1f       	adc	r26, r26
    2192:	a4 17       	cp	r26, r20
    2194:	10 f0       	brcs	.+4      	; 0x219a <__utoa_common+0x14>
    2196:	a4 1b       	sub	r26, r20
    2198:	83 95       	inc	r24
    219a:	50 51       	subi	r21, 0x10	; 16
    219c:	b9 f7       	brne	.-18     	; 0x218c <__utoa_common+0x6>
    219e:	a0 5d       	subi	r26, 0xD0	; 208
    21a0:	aa 33       	cpi	r26, 0x3A	; 58
    21a2:	08 f0       	brcs	.+2      	; 0x21a6 <__utoa_common+0x20>
    21a4:	a9 5d       	subi	r26, 0xD9	; 217
    21a6:	a1 93       	st	Z+, r26
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	79 f7       	brne	.-34     	; 0x218a <__utoa_common+0x4>
    21ac:	b1 11       	cpse	r27, r1
    21ae:	b1 93       	st	Z+, r27
    21b0:	11 92       	st	Z+, r1
    21b2:	cb 01       	movw	r24, r22
    21b4:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <strrev>

000021b8 <sprintf>:
    21b8:	ae e0       	ldi	r26, 0x0E	; 14
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e2 ee       	ldi	r30, 0xE2	; 226
    21be:	f0 e1       	ldi	r31, 0x10	; 16
    21c0:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__prologue_saves__+0x1c>
    21c4:	0d 89       	ldd	r16, Y+21	; 0x15
    21c6:	1e 89       	ldd	r17, Y+22	; 0x16
    21c8:	86 e0       	ldi	r24, 0x06	; 6
    21ca:	8c 83       	std	Y+4, r24	; 0x04
    21cc:	1a 83       	std	Y+2, r17	; 0x02
    21ce:	09 83       	std	Y+1, r16	; 0x01
    21d0:	8f ef       	ldi	r24, 0xFF	; 255
    21d2:	9f e7       	ldi	r25, 0x7F	; 127
    21d4:	9e 83       	std	Y+6, r25	; 0x06
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	ae 01       	movw	r20, r28
    21da:	47 5e       	subi	r20, 0xE7	; 231
    21dc:	5f 4f       	sbci	r21, 0xFF	; 255
    21de:	6f 89       	ldd	r22, Y+23	; 0x17
    21e0:	78 8d       	ldd	r23, Y+24	; 0x18
    21e2:	ce 01       	movw	r24, r28
    21e4:	01 96       	adiw	r24, 0x01	; 1
    21e6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vfprintf>
    21ea:	ef 81       	ldd	r30, Y+7	; 0x07
    21ec:	f8 85       	ldd	r31, Y+8	; 0x08
    21ee:	e0 0f       	add	r30, r16
    21f0:	f1 1f       	adc	r31, r17
    21f2:	10 82       	st	Z, r1
    21f4:	2e 96       	adiw	r28, 0x0e	; 14
    21f6:	e4 e0       	ldi	r30, 0x04	; 4
    21f8:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <__epilogue_restores__+0x1c>

000021fc <vfprintf>:
    21fc:	ab e0       	ldi	r26, 0x0B	; 11
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e4 e0       	ldi	r30, 0x04	; 4
    2202:	f1 e1       	ldi	r31, 0x11	; 17
    2204:	0c 94 9f 13 	jmp	0x273e	; 0x273e <__prologue_saves__>
    2208:	6c 01       	movw	r12, r24
    220a:	7b 01       	movw	r14, r22
    220c:	8a 01       	movw	r16, r20
    220e:	fc 01       	movw	r30, r24
    2210:	17 82       	std	Z+7, r1	; 0x07
    2212:	16 82       	std	Z+6, r1	; 0x06
    2214:	83 81       	ldd	r24, Z+3	; 0x03
    2216:	81 ff       	sbrs	r24, 1
    2218:	cc c1       	rjmp	.+920    	; 0x25b2 <vfprintf+0x3b6>
    221a:	ce 01       	movw	r24, r28
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	3c 01       	movw	r6, r24
    2220:	f6 01       	movw	r30, r12
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	f7 01       	movw	r30, r14
    2226:	93 fd       	sbrc	r25, 3
    2228:	85 91       	lpm	r24, Z+
    222a:	93 ff       	sbrs	r25, 3
    222c:	81 91       	ld	r24, Z+
    222e:	7f 01       	movw	r14, r30
    2230:	88 23       	and	r24, r24
    2232:	09 f4       	brne	.+2      	; 0x2236 <vfprintf+0x3a>
    2234:	ba c1       	rjmp	.+884    	; 0x25aa <vfprintf+0x3ae>
    2236:	85 32       	cpi	r24, 0x25	; 37
    2238:	39 f4       	brne	.+14     	; 0x2248 <vfprintf+0x4c>
    223a:	93 fd       	sbrc	r25, 3
    223c:	85 91       	lpm	r24, Z+
    223e:	93 ff       	sbrs	r25, 3
    2240:	81 91       	ld	r24, Z+
    2242:	7f 01       	movw	r14, r30
    2244:	85 32       	cpi	r24, 0x25	; 37
    2246:	29 f4       	brne	.+10     	; 0x2252 <vfprintf+0x56>
    2248:	b6 01       	movw	r22, r12
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    2250:	e7 cf       	rjmp	.-50     	; 0x2220 <vfprintf+0x24>
    2252:	91 2c       	mov	r9, r1
    2254:	21 2c       	mov	r2, r1
    2256:	31 2c       	mov	r3, r1
    2258:	ff e1       	ldi	r31, 0x1F	; 31
    225a:	f3 15       	cp	r31, r3
    225c:	d8 f0       	brcs	.+54     	; 0x2294 <vfprintf+0x98>
    225e:	8b 32       	cpi	r24, 0x2B	; 43
    2260:	79 f0       	breq	.+30     	; 0x2280 <vfprintf+0x84>
    2262:	38 f4       	brcc	.+14     	; 0x2272 <vfprintf+0x76>
    2264:	80 32       	cpi	r24, 0x20	; 32
    2266:	79 f0       	breq	.+30     	; 0x2286 <vfprintf+0x8a>
    2268:	83 32       	cpi	r24, 0x23	; 35
    226a:	a1 f4       	brne	.+40     	; 0x2294 <vfprintf+0x98>
    226c:	23 2d       	mov	r18, r3
    226e:	20 61       	ori	r18, 0x10	; 16
    2270:	1d c0       	rjmp	.+58     	; 0x22ac <vfprintf+0xb0>
    2272:	8d 32       	cpi	r24, 0x2D	; 45
    2274:	61 f0       	breq	.+24     	; 0x228e <vfprintf+0x92>
    2276:	80 33       	cpi	r24, 0x30	; 48
    2278:	69 f4       	brne	.+26     	; 0x2294 <vfprintf+0x98>
    227a:	23 2d       	mov	r18, r3
    227c:	21 60       	ori	r18, 0x01	; 1
    227e:	16 c0       	rjmp	.+44     	; 0x22ac <vfprintf+0xb0>
    2280:	83 2d       	mov	r24, r3
    2282:	82 60       	ori	r24, 0x02	; 2
    2284:	38 2e       	mov	r3, r24
    2286:	e3 2d       	mov	r30, r3
    2288:	e4 60       	ori	r30, 0x04	; 4
    228a:	3e 2e       	mov	r3, r30
    228c:	2a c0       	rjmp	.+84     	; 0x22e2 <vfprintf+0xe6>
    228e:	f3 2d       	mov	r31, r3
    2290:	f8 60       	ori	r31, 0x08	; 8
    2292:	1d c0       	rjmp	.+58     	; 0x22ce <vfprintf+0xd2>
    2294:	37 fc       	sbrc	r3, 7
    2296:	2d c0       	rjmp	.+90     	; 0x22f2 <vfprintf+0xf6>
    2298:	20 ed       	ldi	r18, 0xD0	; 208
    229a:	28 0f       	add	r18, r24
    229c:	2a 30       	cpi	r18, 0x0A	; 10
    229e:	40 f0       	brcs	.+16     	; 0x22b0 <vfprintf+0xb4>
    22a0:	8e 32       	cpi	r24, 0x2E	; 46
    22a2:	b9 f4       	brne	.+46     	; 0x22d2 <vfprintf+0xd6>
    22a4:	36 fc       	sbrc	r3, 6
    22a6:	81 c1       	rjmp	.+770    	; 0x25aa <vfprintf+0x3ae>
    22a8:	23 2d       	mov	r18, r3
    22aa:	20 64       	ori	r18, 0x40	; 64
    22ac:	32 2e       	mov	r3, r18
    22ae:	19 c0       	rjmp	.+50     	; 0x22e2 <vfprintf+0xe6>
    22b0:	36 fe       	sbrs	r3, 6
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <vfprintf+0xc4>
    22b4:	8a e0       	ldi	r24, 0x0A	; 10
    22b6:	98 9e       	mul	r9, r24
    22b8:	20 0d       	add	r18, r0
    22ba:	11 24       	eor	r1, r1
    22bc:	92 2e       	mov	r9, r18
    22be:	11 c0       	rjmp	.+34     	; 0x22e2 <vfprintf+0xe6>
    22c0:	ea e0       	ldi	r30, 0x0A	; 10
    22c2:	2e 9e       	mul	r2, r30
    22c4:	20 0d       	add	r18, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	22 2e       	mov	r2, r18
    22ca:	f3 2d       	mov	r31, r3
    22cc:	f0 62       	ori	r31, 0x20	; 32
    22ce:	3f 2e       	mov	r3, r31
    22d0:	08 c0       	rjmp	.+16     	; 0x22e2 <vfprintf+0xe6>
    22d2:	8c 36       	cpi	r24, 0x6C	; 108
    22d4:	21 f4       	brne	.+8      	; 0x22de <vfprintf+0xe2>
    22d6:	83 2d       	mov	r24, r3
    22d8:	80 68       	ori	r24, 0x80	; 128
    22da:	38 2e       	mov	r3, r24
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <vfprintf+0xe6>
    22de:	88 36       	cpi	r24, 0x68	; 104
    22e0:	41 f4       	brne	.+16     	; 0x22f2 <vfprintf+0xf6>
    22e2:	f7 01       	movw	r30, r14
    22e4:	93 fd       	sbrc	r25, 3
    22e6:	85 91       	lpm	r24, Z+
    22e8:	93 ff       	sbrs	r25, 3
    22ea:	81 91       	ld	r24, Z+
    22ec:	7f 01       	movw	r14, r30
    22ee:	81 11       	cpse	r24, r1
    22f0:	b3 cf       	rjmp	.-154    	; 0x2258 <vfprintf+0x5c>
    22f2:	98 2f       	mov	r25, r24
    22f4:	9f 7d       	andi	r25, 0xDF	; 223
    22f6:	95 54       	subi	r25, 0x45	; 69
    22f8:	93 30       	cpi	r25, 0x03	; 3
    22fa:	28 f4       	brcc	.+10     	; 0x2306 <vfprintf+0x10a>
    22fc:	0c 5f       	subi	r16, 0xFC	; 252
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	9f e3       	ldi	r25, 0x3F	; 63
    2302:	99 83       	std	Y+1, r25	; 0x01
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <vfprintf+0x124>
    2306:	83 36       	cpi	r24, 0x63	; 99
    2308:	31 f0       	breq	.+12     	; 0x2316 <vfprintf+0x11a>
    230a:	83 37       	cpi	r24, 0x73	; 115
    230c:	71 f0       	breq	.+28     	; 0x232a <vfprintf+0x12e>
    230e:	83 35       	cpi	r24, 0x53	; 83
    2310:	09 f0       	breq	.+2      	; 0x2314 <vfprintf+0x118>
    2312:	59 c0       	rjmp	.+178    	; 0x23c6 <vfprintf+0x1ca>
    2314:	21 c0       	rjmp	.+66     	; 0x2358 <vfprintf+0x15c>
    2316:	f8 01       	movw	r30, r16
    2318:	80 81       	ld	r24, Z
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	0e 5f       	subi	r16, 0xFE	; 254
    231e:	1f 4f       	sbci	r17, 0xFF	; 255
    2320:	88 24       	eor	r8, r8
    2322:	83 94       	inc	r8
    2324:	91 2c       	mov	r9, r1
    2326:	53 01       	movw	r10, r6
    2328:	13 c0       	rjmp	.+38     	; 0x2350 <vfprintf+0x154>
    232a:	28 01       	movw	r4, r16
    232c:	f2 e0       	ldi	r31, 0x02	; 2
    232e:	4f 0e       	add	r4, r31
    2330:	51 1c       	adc	r5, r1
    2332:	f8 01       	movw	r30, r16
    2334:	a0 80       	ld	r10, Z
    2336:	b1 80       	ldd	r11, Z+1	; 0x01
    2338:	36 fe       	sbrs	r3, 6
    233a:	03 c0       	rjmp	.+6      	; 0x2342 <vfprintf+0x146>
    233c:	69 2d       	mov	r22, r9
    233e:	70 e0       	ldi	r23, 0x00	; 0
    2340:	02 c0       	rjmp	.+4      	; 0x2346 <vfprintf+0x14a>
    2342:	6f ef       	ldi	r22, 0xFF	; 255
    2344:	7f ef       	ldi	r23, 0xFF	; 255
    2346:	c5 01       	movw	r24, r10
    2348:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <strnlen>
    234c:	4c 01       	movw	r8, r24
    234e:	82 01       	movw	r16, r4
    2350:	f3 2d       	mov	r31, r3
    2352:	ff 77       	andi	r31, 0x7F	; 127
    2354:	3f 2e       	mov	r3, r31
    2356:	16 c0       	rjmp	.+44     	; 0x2384 <vfprintf+0x188>
    2358:	28 01       	movw	r4, r16
    235a:	22 e0       	ldi	r18, 0x02	; 2
    235c:	42 0e       	add	r4, r18
    235e:	51 1c       	adc	r5, r1
    2360:	f8 01       	movw	r30, r16
    2362:	a0 80       	ld	r10, Z
    2364:	b1 80       	ldd	r11, Z+1	; 0x01
    2366:	36 fe       	sbrs	r3, 6
    2368:	03 c0       	rjmp	.+6      	; 0x2370 <vfprintf+0x174>
    236a:	69 2d       	mov	r22, r9
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <vfprintf+0x178>
    2370:	6f ef       	ldi	r22, 0xFF	; 255
    2372:	7f ef       	ldi	r23, 0xFF	; 255
    2374:	c5 01       	movw	r24, r10
    2376:	0e 94 df 12 	call	0x25be	; 0x25be <strnlen_P>
    237a:	4c 01       	movw	r8, r24
    237c:	f3 2d       	mov	r31, r3
    237e:	f0 68       	ori	r31, 0x80	; 128
    2380:	3f 2e       	mov	r3, r31
    2382:	82 01       	movw	r16, r4
    2384:	33 fc       	sbrc	r3, 3
    2386:	1b c0       	rjmp	.+54     	; 0x23be <vfprintf+0x1c2>
    2388:	82 2d       	mov	r24, r2
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	88 16       	cp	r8, r24
    238e:	99 06       	cpc	r9, r25
    2390:	b0 f4       	brcc	.+44     	; 0x23be <vfprintf+0x1c2>
    2392:	b6 01       	movw	r22, r12
    2394:	80 e2       	ldi	r24, 0x20	; 32
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    239c:	2a 94       	dec	r2
    239e:	f4 cf       	rjmp	.-24     	; 0x2388 <vfprintf+0x18c>
    23a0:	f5 01       	movw	r30, r10
    23a2:	37 fc       	sbrc	r3, 7
    23a4:	85 91       	lpm	r24, Z+
    23a6:	37 fe       	sbrs	r3, 7
    23a8:	81 91       	ld	r24, Z+
    23aa:	5f 01       	movw	r10, r30
    23ac:	b6 01       	movw	r22, r12
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    23b4:	21 10       	cpse	r2, r1
    23b6:	2a 94       	dec	r2
    23b8:	21 e0       	ldi	r18, 0x01	; 1
    23ba:	82 1a       	sub	r8, r18
    23bc:	91 08       	sbc	r9, r1
    23be:	81 14       	cp	r8, r1
    23c0:	91 04       	cpc	r9, r1
    23c2:	71 f7       	brne	.-36     	; 0x23a0 <vfprintf+0x1a4>
    23c4:	e8 c0       	rjmp	.+464    	; 0x2596 <vfprintf+0x39a>
    23c6:	84 36       	cpi	r24, 0x64	; 100
    23c8:	11 f0       	breq	.+4      	; 0x23ce <vfprintf+0x1d2>
    23ca:	89 36       	cpi	r24, 0x69	; 105
    23cc:	41 f5       	brne	.+80     	; 0x241e <vfprintf+0x222>
    23ce:	f8 01       	movw	r30, r16
    23d0:	37 fe       	sbrs	r3, 7
    23d2:	07 c0       	rjmp	.+14     	; 0x23e2 <vfprintf+0x1e6>
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	0c 5f       	subi	r16, 0xFC	; 252
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <vfprintf+0x1f6>
    23e2:	60 81       	ld	r22, Z
    23e4:	71 81       	ldd	r23, Z+1	; 0x01
    23e6:	07 2e       	mov	r0, r23
    23e8:	00 0c       	add	r0, r0
    23ea:	88 0b       	sbc	r24, r24
    23ec:	99 0b       	sbc	r25, r25
    23ee:	0e 5f       	subi	r16, 0xFE	; 254
    23f0:	1f 4f       	sbci	r17, 0xFF	; 255
    23f2:	f3 2d       	mov	r31, r3
    23f4:	ff 76       	andi	r31, 0x6F	; 111
    23f6:	3f 2e       	mov	r3, r31
    23f8:	97 ff       	sbrs	r25, 7
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <vfprintf+0x212>
    23fc:	90 95       	com	r25
    23fe:	80 95       	com	r24
    2400:	70 95       	com	r23
    2402:	61 95       	neg	r22
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	8f 4f       	sbci	r24, 0xFF	; 255
    2408:	9f 4f       	sbci	r25, 0xFF	; 255
    240a:	f0 68       	ori	r31, 0x80	; 128
    240c:	3f 2e       	mov	r3, r31
    240e:	2a e0       	ldi	r18, 0x0A	; 10
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	a3 01       	movw	r20, r6
    2414:	0e 94 41 13 	call	0x2682	; 0x2682 <__ultoa_invert>
    2418:	88 2e       	mov	r8, r24
    241a:	86 18       	sub	r8, r6
    241c:	45 c0       	rjmp	.+138    	; 0x24a8 <vfprintf+0x2ac>
    241e:	85 37       	cpi	r24, 0x75	; 117
    2420:	31 f4       	brne	.+12     	; 0x242e <vfprintf+0x232>
    2422:	23 2d       	mov	r18, r3
    2424:	2f 7e       	andi	r18, 0xEF	; 239
    2426:	b2 2e       	mov	r11, r18
    2428:	2a e0       	ldi	r18, 0x0A	; 10
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	25 c0       	rjmp	.+74     	; 0x2478 <vfprintf+0x27c>
    242e:	93 2d       	mov	r25, r3
    2430:	99 7f       	andi	r25, 0xF9	; 249
    2432:	b9 2e       	mov	r11, r25
    2434:	8f 36       	cpi	r24, 0x6F	; 111
    2436:	c1 f0       	breq	.+48     	; 0x2468 <vfprintf+0x26c>
    2438:	18 f4       	brcc	.+6      	; 0x2440 <vfprintf+0x244>
    243a:	88 35       	cpi	r24, 0x58	; 88
    243c:	79 f0       	breq	.+30     	; 0x245c <vfprintf+0x260>
    243e:	b5 c0       	rjmp	.+362    	; 0x25aa <vfprintf+0x3ae>
    2440:	80 37       	cpi	r24, 0x70	; 112
    2442:	19 f0       	breq	.+6      	; 0x244a <vfprintf+0x24e>
    2444:	88 37       	cpi	r24, 0x78	; 120
    2446:	21 f0       	breq	.+8      	; 0x2450 <vfprintf+0x254>
    2448:	b0 c0       	rjmp	.+352    	; 0x25aa <vfprintf+0x3ae>
    244a:	e9 2f       	mov	r30, r25
    244c:	e0 61       	ori	r30, 0x10	; 16
    244e:	be 2e       	mov	r11, r30
    2450:	b4 fe       	sbrs	r11, 4
    2452:	0d c0       	rjmp	.+26     	; 0x246e <vfprintf+0x272>
    2454:	fb 2d       	mov	r31, r11
    2456:	f4 60       	ori	r31, 0x04	; 4
    2458:	bf 2e       	mov	r11, r31
    245a:	09 c0       	rjmp	.+18     	; 0x246e <vfprintf+0x272>
    245c:	34 fe       	sbrs	r3, 4
    245e:	0a c0       	rjmp	.+20     	; 0x2474 <vfprintf+0x278>
    2460:	29 2f       	mov	r18, r25
    2462:	26 60       	ori	r18, 0x06	; 6
    2464:	b2 2e       	mov	r11, r18
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <vfprintf+0x278>
    2468:	28 e0       	ldi	r18, 0x08	; 8
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	05 c0       	rjmp	.+10     	; 0x2478 <vfprintf+0x27c>
    246e:	20 e1       	ldi	r18, 0x10	; 16
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0x27c>
    2474:	20 e1       	ldi	r18, 0x10	; 16
    2476:	32 e0       	ldi	r19, 0x02	; 2
    2478:	f8 01       	movw	r30, r16
    247a:	b7 fe       	sbrs	r11, 7
    247c:	07 c0       	rjmp	.+14     	; 0x248c <vfprintf+0x290>
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	0c 5f       	subi	r16, 0xFC	; 252
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <vfprintf+0x29c>
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 5f       	subi	r16, 0xFE	; 254
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	a3 01       	movw	r20, r6
    249a:	0e 94 41 13 	call	0x2682	; 0x2682 <__ultoa_invert>
    249e:	88 2e       	mov	r8, r24
    24a0:	86 18       	sub	r8, r6
    24a2:	fb 2d       	mov	r31, r11
    24a4:	ff 77       	andi	r31, 0x7F	; 127
    24a6:	3f 2e       	mov	r3, r31
    24a8:	36 fe       	sbrs	r3, 6
    24aa:	0d c0       	rjmp	.+26     	; 0x24c6 <vfprintf+0x2ca>
    24ac:	23 2d       	mov	r18, r3
    24ae:	2e 7f       	andi	r18, 0xFE	; 254
    24b0:	a2 2e       	mov	r10, r18
    24b2:	89 14       	cp	r8, r9
    24b4:	58 f4       	brcc	.+22     	; 0x24cc <vfprintf+0x2d0>
    24b6:	34 fe       	sbrs	r3, 4
    24b8:	0b c0       	rjmp	.+22     	; 0x24d0 <vfprintf+0x2d4>
    24ba:	32 fc       	sbrc	r3, 2
    24bc:	09 c0       	rjmp	.+18     	; 0x24d0 <vfprintf+0x2d4>
    24be:	83 2d       	mov	r24, r3
    24c0:	8e 7e       	andi	r24, 0xEE	; 238
    24c2:	a8 2e       	mov	r10, r24
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <vfprintf+0x2d4>
    24c6:	b8 2c       	mov	r11, r8
    24c8:	a3 2c       	mov	r10, r3
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <vfprintf+0x2d6>
    24cc:	b8 2c       	mov	r11, r8
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <vfprintf+0x2d6>
    24d0:	b9 2c       	mov	r11, r9
    24d2:	a4 fe       	sbrs	r10, 4
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <vfprintf+0x2f8>
    24d6:	fe 01       	movw	r30, r28
    24d8:	e8 0d       	add	r30, r8
    24da:	f1 1d       	adc	r31, r1
    24dc:	80 81       	ld	r24, Z
    24de:	80 33       	cpi	r24, 0x30	; 48
    24e0:	21 f4       	brne	.+8      	; 0x24ea <vfprintf+0x2ee>
    24e2:	9a 2d       	mov	r25, r10
    24e4:	99 7e       	andi	r25, 0xE9	; 233
    24e6:	a9 2e       	mov	r10, r25
    24e8:	09 c0       	rjmp	.+18     	; 0x24fc <vfprintf+0x300>
    24ea:	a2 fe       	sbrs	r10, 2
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <vfprintf+0x2fe>
    24ee:	b3 94       	inc	r11
    24f0:	b3 94       	inc	r11
    24f2:	04 c0       	rjmp	.+8      	; 0x24fc <vfprintf+0x300>
    24f4:	8a 2d       	mov	r24, r10
    24f6:	86 78       	andi	r24, 0x86	; 134
    24f8:	09 f0       	breq	.+2      	; 0x24fc <vfprintf+0x300>
    24fa:	b3 94       	inc	r11
    24fc:	a3 fc       	sbrc	r10, 3
    24fe:	11 c0       	rjmp	.+34     	; 0x2522 <vfprintf+0x326>
    2500:	a0 fe       	sbrs	r10, 0
    2502:	06 c0       	rjmp	.+12     	; 0x2510 <vfprintf+0x314>
    2504:	b2 14       	cp	r11, r2
    2506:	88 f4       	brcc	.+34     	; 0x252a <vfprintf+0x32e>
    2508:	28 0c       	add	r2, r8
    250a:	92 2c       	mov	r9, r2
    250c:	9b 18       	sub	r9, r11
    250e:	0e c0       	rjmp	.+28     	; 0x252c <vfprintf+0x330>
    2510:	b2 14       	cp	r11, r2
    2512:	60 f4       	brcc	.+24     	; 0x252c <vfprintf+0x330>
    2514:	b6 01       	movw	r22, r12
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    251e:	b3 94       	inc	r11
    2520:	f7 cf       	rjmp	.-18     	; 0x2510 <vfprintf+0x314>
    2522:	b2 14       	cp	r11, r2
    2524:	18 f4       	brcc	.+6      	; 0x252c <vfprintf+0x330>
    2526:	2b 18       	sub	r2, r11
    2528:	02 c0       	rjmp	.+4      	; 0x252e <vfprintf+0x332>
    252a:	98 2c       	mov	r9, r8
    252c:	21 2c       	mov	r2, r1
    252e:	a4 fe       	sbrs	r10, 4
    2530:	10 c0       	rjmp	.+32     	; 0x2552 <vfprintf+0x356>
    2532:	b6 01       	movw	r22, r12
    2534:	80 e3       	ldi	r24, 0x30	; 48
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    253c:	a2 fe       	sbrs	r10, 2
    253e:	17 c0       	rjmp	.+46     	; 0x256e <vfprintf+0x372>
    2540:	a1 fc       	sbrc	r10, 1
    2542:	03 c0       	rjmp	.+6      	; 0x254a <vfprintf+0x34e>
    2544:	88 e7       	ldi	r24, 0x78	; 120
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 c0       	rjmp	.+4      	; 0x254e <vfprintf+0x352>
    254a:	88 e5       	ldi	r24, 0x58	; 88
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	b6 01       	movw	r22, r12
    2550:	0c c0       	rjmp	.+24     	; 0x256a <vfprintf+0x36e>
    2552:	8a 2d       	mov	r24, r10
    2554:	86 78       	andi	r24, 0x86	; 134
    2556:	59 f0       	breq	.+22     	; 0x256e <vfprintf+0x372>
    2558:	a1 fe       	sbrs	r10, 1
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <vfprintf+0x364>
    255c:	8b e2       	ldi	r24, 0x2B	; 43
    255e:	01 c0       	rjmp	.+2      	; 0x2562 <vfprintf+0x366>
    2560:	80 e2       	ldi	r24, 0x20	; 32
    2562:	a7 fc       	sbrc	r10, 7
    2564:	8d e2       	ldi	r24, 0x2D	; 45
    2566:	b6 01       	movw	r22, r12
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    256e:	89 14       	cp	r8, r9
    2570:	38 f4       	brcc	.+14     	; 0x2580 <vfprintf+0x384>
    2572:	b6 01       	movw	r22, r12
    2574:	80 e3       	ldi	r24, 0x30	; 48
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    257c:	9a 94       	dec	r9
    257e:	f7 cf       	rjmp	.-18     	; 0x256e <vfprintf+0x372>
    2580:	8a 94       	dec	r8
    2582:	f3 01       	movw	r30, r6
    2584:	e8 0d       	add	r30, r8
    2586:	f1 1d       	adc	r31, r1
    2588:	80 81       	ld	r24, Z
    258a:	b6 01       	movw	r22, r12
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    2592:	81 10       	cpse	r8, r1
    2594:	f5 cf       	rjmp	.-22     	; 0x2580 <vfprintf+0x384>
    2596:	22 20       	and	r2, r2
    2598:	09 f4       	brne	.+2      	; 0x259c <vfprintf+0x3a0>
    259a:	42 ce       	rjmp	.-892    	; 0x2220 <vfprintf+0x24>
    259c:	b6 01       	movw	r22, r12
    259e:	80 e2       	ldi	r24, 0x20	; 32
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 05 13 	call	0x260a	; 0x260a <fputc>
    25a6:	2a 94       	dec	r2
    25a8:	f6 cf       	rjmp	.-20     	; 0x2596 <vfprintf+0x39a>
    25aa:	f6 01       	movw	r30, r12
    25ac:	86 81       	ldd	r24, Z+6	; 0x06
    25ae:	97 81       	ldd	r25, Z+7	; 0x07
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <vfprintf+0x3ba>
    25b2:	8f ef       	ldi	r24, 0xFF	; 255
    25b4:	9f ef       	ldi	r25, 0xFF	; 255
    25b6:	2b 96       	adiw	r28, 0x0b	; 11
    25b8:	e2 e1       	ldi	r30, 0x12	; 18
    25ba:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__epilogue_restores__>

000025be <strnlen_P>:
    25be:	fc 01       	movw	r30, r24
    25c0:	05 90       	lpm	r0, Z+
    25c2:	61 50       	subi	r22, 0x01	; 1
    25c4:	70 40       	sbci	r23, 0x00	; 0
    25c6:	01 10       	cpse	r0, r1
    25c8:	d8 f7       	brcc	.-10     	; 0x25c0 <strnlen_P+0x2>
    25ca:	80 95       	com	r24
    25cc:	90 95       	com	r25
    25ce:	8e 0f       	add	r24, r30
    25d0:	9f 1f       	adc	r25, r31
    25d2:	08 95       	ret

000025d4 <strnlen>:
    25d4:	fc 01       	movw	r30, r24
    25d6:	61 50       	subi	r22, 0x01	; 1
    25d8:	70 40       	sbci	r23, 0x00	; 0
    25da:	01 90       	ld	r0, Z+
    25dc:	01 10       	cpse	r0, r1
    25de:	d8 f7       	brcc	.-10     	; 0x25d6 <strnlen+0x2>
    25e0:	80 95       	com	r24
    25e2:	90 95       	com	r25
    25e4:	8e 0f       	add	r24, r30
    25e6:	9f 1f       	adc	r25, r31
    25e8:	08 95       	ret

000025ea <strrev>:
    25ea:	dc 01       	movw	r26, r24
    25ec:	fc 01       	movw	r30, r24
    25ee:	67 2f       	mov	r22, r23
    25f0:	71 91       	ld	r23, Z+
    25f2:	77 23       	and	r23, r23
    25f4:	e1 f7       	brne	.-8      	; 0x25ee <strrev+0x4>
    25f6:	32 97       	sbiw	r30, 0x02	; 2
    25f8:	04 c0       	rjmp	.+8      	; 0x2602 <strrev+0x18>
    25fa:	7c 91       	ld	r23, X
    25fc:	6d 93       	st	X+, r22
    25fe:	70 83       	st	Z, r23
    2600:	62 91       	ld	r22, -Z
    2602:	ae 17       	cp	r26, r30
    2604:	bf 07       	cpc	r27, r31
    2606:	c8 f3       	brcs	.-14     	; 0x25fa <strrev+0x10>
    2608:	08 95       	ret

0000260a <fputc>:
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	fb 01       	movw	r30, r22
    2614:	23 81       	ldd	r18, Z+3	; 0x03
    2616:	21 fd       	sbrc	r18, 1
    2618:	03 c0       	rjmp	.+6      	; 0x2620 <fputc+0x16>
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	9f ef       	ldi	r25, 0xFF	; 255
    261e:	2c c0       	rjmp	.+88     	; 0x2678 <fputc+0x6e>
    2620:	22 ff       	sbrs	r18, 2
    2622:	16 c0       	rjmp	.+44     	; 0x2650 <fputc+0x46>
    2624:	46 81       	ldd	r20, Z+6	; 0x06
    2626:	57 81       	ldd	r21, Z+7	; 0x07
    2628:	24 81       	ldd	r18, Z+4	; 0x04
    262a:	35 81       	ldd	r19, Z+5	; 0x05
    262c:	42 17       	cp	r20, r18
    262e:	53 07       	cpc	r21, r19
    2630:	44 f4       	brge	.+16     	; 0x2642 <fputc+0x38>
    2632:	a0 81       	ld	r26, Z
    2634:	b1 81       	ldd	r27, Z+1	; 0x01
    2636:	9d 01       	movw	r18, r26
    2638:	2f 5f       	subi	r18, 0xFF	; 255
    263a:	3f 4f       	sbci	r19, 0xFF	; 255
    263c:	31 83       	std	Z+1, r19	; 0x01
    263e:	20 83       	st	Z, r18
    2640:	8c 93       	st	X, r24
    2642:	26 81       	ldd	r18, Z+6	; 0x06
    2644:	37 81       	ldd	r19, Z+7	; 0x07
    2646:	2f 5f       	subi	r18, 0xFF	; 255
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	37 83       	std	Z+7, r19	; 0x07
    264c:	26 83       	std	Z+6, r18	; 0x06
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <fputc+0x6e>
    2650:	8b 01       	movw	r16, r22
    2652:	ec 01       	movw	r28, r24
    2654:	fb 01       	movw	r30, r22
    2656:	00 84       	ldd	r0, Z+8	; 0x08
    2658:	f1 85       	ldd	r31, Z+9	; 0x09
    265a:	e0 2d       	mov	r30, r0
    265c:	09 95       	icall
    265e:	89 2b       	or	r24, r25
    2660:	e1 f6       	brne	.-72     	; 0x261a <fputc+0x10>
    2662:	d8 01       	movw	r26, r16
    2664:	16 96       	adiw	r26, 0x06	; 6
    2666:	8d 91       	ld	r24, X+
    2668:	9c 91       	ld	r25, X
    266a:	17 97       	sbiw	r26, 0x07	; 7
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	17 96       	adiw	r26, 0x07	; 7
    2670:	9c 93       	st	X, r25
    2672:	8e 93       	st	-X, r24
    2674:	16 97       	sbiw	r26, 0x06	; 6
    2676:	ce 01       	movw	r24, r28
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	08 95       	ret

00002682 <__ultoa_invert>:
    2682:	fa 01       	movw	r30, r20
    2684:	aa 27       	eor	r26, r26
    2686:	28 30       	cpi	r18, 0x08	; 8
    2688:	51 f1       	breq	.+84     	; 0x26de <__ultoa_invert+0x5c>
    268a:	20 31       	cpi	r18, 0x10	; 16
    268c:	81 f1       	breq	.+96     	; 0x26ee <__ultoa_invert+0x6c>
    268e:	e8 94       	clt
    2690:	6f 93       	push	r22
    2692:	6e 7f       	andi	r22, 0xFE	; 254
    2694:	6e 5f       	subi	r22, 0xFE	; 254
    2696:	7f 4f       	sbci	r23, 0xFF	; 255
    2698:	8f 4f       	sbci	r24, 0xFF	; 255
    269a:	9f 4f       	sbci	r25, 0xFF	; 255
    269c:	af 4f       	sbci	r26, 0xFF	; 255
    269e:	b1 e0       	ldi	r27, 0x01	; 1
    26a0:	3e d0       	rcall	.+124    	; 0x271e <__ultoa_invert+0x9c>
    26a2:	b4 e0       	ldi	r27, 0x04	; 4
    26a4:	3c d0       	rcall	.+120    	; 0x271e <__ultoa_invert+0x9c>
    26a6:	67 0f       	add	r22, r23
    26a8:	78 1f       	adc	r23, r24
    26aa:	89 1f       	adc	r24, r25
    26ac:	9a 1f       	adc	r25, r26
    26ae:	a1 1d       	adc	r26, r1
    26b0:	68 0f       	add	r22, r24
    26b2:	79 1f       	adc	r23, r25
    26b4:	8a 1f       	adc	r24, r26
    26b6:	91 1d       	adc	r25, r1
    26b8:	a1 1d       	adc	r26, r1
    26ba:	6a 0f       	add	r22, r26
    26bc:	71 1d       	adc	r23, r1
    26be:	81 1d       	adc	r24, r1
    26c0:	91 1d       	adc	r25, r1
    26c2:	a1 1d       	adc	r26, r1
    26c4:	20 d0       	rcall	.+64     	; 0x2706 <__ultoa_invert+0x84>
    26c6:	09 f4       	brne	.+2      	; 0x26ca <__ultoa_invert+0x48>
    26c8:	68 94       	set
    26ca:	3f 91       	pop	r19
    26cc:	2a e0       	ldi	r18, 0x0A	; 10
    26ce:	26 9f       	mul	r18, r22
    26d0:	11 24       	eor	r1, r1
    26d2:	30 19       	sub	r19, r0
    26d4:	30 5d       	subi	r19, 0xD0	; 208
    26d6:	31 93       	st	Z+, r19
    26d8:	de f6       	brtc	.-74     	; 0x2690 <__ultoa_invert+0xe>
    26da:	cf 01       	movw	r24, r30
    26dc:	08 95       	ret
    26de:	46 2f       	mov	r20, r22
    26e0:	47 70       	andi	r20, 0x07	; 7
    26e2:	40 5d       	subi	r20, 0xD0	; 208
    26e4:	41 93       	st	Z+, r20
    26e6:	b3 e0       	ldi	r27, 0x03	; 3
    26e8:	0f d0       	rcall	.+30     	; 0x2708 <__ultoa_invert+0x86>
    26ea:	c9 f7       	brne	.-14     	; 0x26de <__ultoa_invert+0x5c>
    26ec:	f6 cf       	rjmp	.-20     	; 0x26da <__ultoa_invert+0x58>
    26ee:	46 2f       	mov	r20, r22
    26f0:	4f 70       	andi	r20, 0x0F	; 15
    26f2:	40 5d       	subi	r20, 0xD0	; 208
    26f4:	4a 33       	cpi	r20, 0x3A	; 58
    26f6:	18 f0       	brcs	.+6      	; 0x26fe <__ultoa_invert+0x7c>
    26f8:	49 5d       	subi	r20, 0xD9	; 217
    26fa:	31 fd       	sbrc	r19, 1
    26fc:	40 52       	subi	r20, 0x20	; 32
    26fe:	41 93       	st	Z+, r20
    2700:	02 d0       	rcall	.+4      	; 0x2706 <__ultoa_invert+0x84>
    2702:	a9 f7       	brne	.-22     	; 0x26ee <__ultoa_invert+0x6c>
    2704:	ea cf       	rjmp	.-44     	; 0x26da <__ultoa_invert+0x58>
    2706:	b4 e0       	ldi	r27, 0x04	; 4
    2708:	a6 95       	lsr	r26
    270a:	97 95       	ror	r25
    270c:	87 95       	ror	r24
    270e:	77 95       	ror	r23
    2710:	67 95       	ror	r22
    2712:	ba 95       	dec	r27
    2714:	c9 f7       	brne	.-14     	; 0x2708 <__ultoa_invert+0x86>
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	61 05       	cpc	r22, r1
    271a:	71 05       	cpc	r23, r1
    271c:	08 95       	ret
    271e:	9b 01       	movw	r18, r22
    2720:	ac 01       	movw	r20, r24
    2722:	0a 2e       	mov	r0, r26
    2724:	06 94       	lsr	r0
    2726:	57 95       	ror	r21
    2728:	47 95       	ror	r20
    272a:	37 95       	ror	r19
    272c:	27 95       	ror	r18
    272e:	ba 95       	dec	r27
    2730:	c9 f7       	brne	.-14     	; 0x2724 <__ultoa_invert+0xa2>
    2732:	62 0f       	add	r22, r18
    2734:	73 1f       	adc	r23, r19
    2736:	84 1f       	adc	r24, r20
    2738:	95 1f       	adc	r25, r21
    273a:	a0 1d       	adc	r26, r0
    273c:	08 95       	ret

0000273e <__prologue_saves__>:
    273e:	2f 92       	push	r2
    2740:	3f 92       	push	r3
    2742:	4f 92       	push	r4
    2744:	5f 92       	push	r5
    2746:	6f 92       	push	r6
    2748:	7f 92       	push	r7
    274a:	8f 92       	push	r8
    274c:	9f 92       	push	r9
    274e:	af 92       	push	r10
    2750:	bf 92       	push	r11
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	ca 1b       	sub	r28, r26
    2768:	db 0b       	sbc	r29, r27
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	09 94       	ijmp

00002776 <__epilogue_restores__>:
    2776:	2a 88       	ldd	r2, Y+18	; 0x12
    2778:	39 88       	ldd	r3, Y+17	; 0x11
    277a:	48 88       	ldd	r4, Y+16	; 0x10
    277c:	5f 84       	ldd	r5, Y+15	; 0x0f
    277e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2780:	7d 84       	ldd	r7, Y+13	; 0x0d
    2782:	8c 84       	ldd	r8, Y+12	; 0x0c
    2784:	9b 84       	ldd	r9, Y+11	; 0x0b
    2786:	aa 84       	ldd	r10, Y+10	; 0x0a
    2788:	b9 84       	ldd	r11, Y+9	; 0x09
    278a:	c8 84       	ldd	r12, Y+8	; 0x08
    278c:	df 80       	ldd	r13, Y+7	; 0x07
    278e:	ee 80       	ldd	r14, Y+6	; 0x06
    2790:	fd 80       	ldd	r15, Y+5	; 0x05
    2792:	0c 81       	ldd	r16, Y+4	; 0x04
    2794:	1b 81       	ldd	r17, Y+3	; 0x03
    2796:	aa 81       	ldd	r26, Y+2	; 0x02
    2798:	b9 81       	ldd	r27, Y+1	; 0x01
    279a:	ce 0f       	add	r28, r30
    279c:	d1 1d       	adc	r29, r1
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	ed 01       	movw	r28, r26
    27aa:	08 95       	ret

000027ac <_exit>:
    27ac:	f8 94       	cli

000027ae <__stop_program>:
    27ae:	ff cf       	rjmp	.-2      	; 0x27ae <__stop_program>
