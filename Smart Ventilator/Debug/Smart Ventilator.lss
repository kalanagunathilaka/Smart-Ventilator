
Smart Ventilator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00002d00  00002d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000375  008001ac  008001ac  00002ee0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028f0  00000000  00000000  00003168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b89  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000163b  00000000  00000000  000065e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  00007c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e1  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001975  00000000  00000000  00008ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000a43e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__vector_1>
       8:	0c 94 be 09 	jmp	0x137c	; 0x137c <__vector_2>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_7>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	34 05       	cpc	r19, r4
      56:	69 05       	cpc	r22, r9
      58:	9e 05       	cpc	r25, r14
      5a:	d3 05       	cpc	r29, r3
      5c:	08 06       	cpc	r0, r24
      5e:	3d 06       	cpc	r3, r29
      60:	72 06       	cpc	r7, r18
      62:	a7 06       	cpc	r10, r23
      64:	dc 06       	cpc	r13, r28
      66:	11 07       	cpc	r17, r17
      68:	46 07       	cpc	r20, r22
      6a:	7b 07       	cpc	r23, r27
      6c:	b0 07       	cpc	r27, r16
      6e:	ee 08       	sbc	r14, r14
      70:	e5 07       	cpc	r30, r21
      72:	1a 08       	sbc	r1, r10
      74:	4f 08       	sbc	r4, r15
      76:	84 08       	sbc	r8, r4
      78:	b9 08       	sbc	r11, r9

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf e5       	ldi	r28, 0x5F	; 95
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e6       	ldi	r26, 0x60	; 96
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	e0 e0       	ldi	r30, 0x00	; 0
      8e:	fd e2       	ldi	r31, 0x2D	; 45
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	ac 3a       	cpi	r26, 0xAC	; 172
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	25 e0       	ldi	r18, 0x05	; 5
      9e:	ac ea       	ldi	r26, 0xAC	; 172
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	a1 32       	cpi	r26, 0x21	; 33
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 37 0c 	call	0x186e	; 0x186e <main>
      b0:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <Keypad>:


char Keypad()
{
	
	PORTB=0b1111110;         // make first row 0
      b8:	8e e7       	ldi	r24, 0x7E	; 126
      ba:	88 bb       	out	0x18, r24	; 24
	if((PINB &(1<<PINB4))==0)
      bc:	b4 99       	sbic	0x16, 4	; 22
      be:	0c c0       	rjmp	.+24     	; 0xd8 <Keypad+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	2f ef       	ldi	r18, 0xFF	; 255
      c2:	89 ef       	ldi	r24, 0xF9	; 249
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	21 50       	subi	r18, 0x01	; 1
      c8:	80 40       	sbci	r24, 0x00	; 0
      ca:	90 40       	sbci	r25, 0x00	; 0
      cc:	e1 f7       	brne	.-8      	; 0xc6 <Keypad+0xe>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <Keypad+0x18>
      d0:	00 00       	nop
	{
		_delay_ms(20);
		return"1";
      d2:	8e e6       	ldi	r24, 0x6E	; 110
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret
	}

	else if((PINB&(1<<PINB5))==0)
      d8:	b5 99       	sbic	0x16, 5	; 22
      da:	0c c0       	rjmp	.+24     	; 0xf4 <Keypad+0x3c>
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	89 ef       	ldi	r24, 0xF9	; 249
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	21 50       	subi	r18, 0x01	; 1
      e4:	80 40       	sbci	r24, 0x00	; 0
      e6:	90 40       	sbci	r25, 0x00	; 0
      e8:	e1 f7       	brne	.-8      	; 0xe2 <Keypad+0x2a>
      ea:	00 c0       	rjmp	.+0      	; 0xec <Keypad+0x34>
      ec:	00 00       	nop
	{
		_delay_ms(20);
		return"2";
      ee:	80 e7       	ldi	r24, 0x70	; 112
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret
	}
	else if((PINB&(1<<PINB6))==0)
      f4:	b6 99       	sbic	0x16, 6	; 22
      f6:	0c c0       	rjmp	.+24     	; 0x110 <Keypad+0x58>
      f8:	2f ef       	ldi	r18, 0xFF	; 255
      fa:	89 ef       	ldi	r24, 0xF9	; 249
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	21 50       	subi	r18, 0x01	; 1
     100:	80 40       	sbci	r24, 0x00	; 0
     102:	90 40       	sbci	r25, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <Keypad+0x46>
     106:	00 c0       	rjmp	.+0      	; 0x108 <Keypad+0x50>
     108:	00 00       	nop
	{
		_delay_ms(20);
		return"3";
     10a:	82 e7       	ldi	r24, 0x72	; 114
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	08 95       	ret
	}
	

	PORTB=0b1111101;   // make second row 0
     110:	8d e7       	ldi	r24, 0x7D	; 125
     112:	88 bb       	out	0x18, r24	; 24
	if((PINB &(1<<PINB4))==0)
     114:	b4 99       	sbic	0x16, 4	; 22
     116:	0c c0       	rjmp	.+24     	; 0x130 <Keypad+0x78>
     118:	2f ef       	ldi	r18, 0xFF	; 255
     11a:	89 ef       	ldi	r24, 0xF9	; 249
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	21 50       	subi	r18, 0x01	; 1
     120:	80 40       	sbci	r24, 0x00	; 0
     122:	90 40       	sbci	r25, 0x00	; 0
     124:	e1 f7       	brne	.-8      	; 0x11e <Keypad+0x66>
     126:	00 c0       	rjmp	.+0      	; 0x128 <Keypad+0x70>
     128:	00 00       	nop
	{
		_delay_ms(20);
		return"4";
     12a:	84 e7       	ldi	r24, 0x74	; 116
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	08 95       	ret
	}
	else if((PINB&(1<<PINB5))==0)
     130:	b5 99       	sbic	0x16, 5	; 22
     132:	0c c0       	rjmp	.+24     	; 0x14c <Keypad+0x94>
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	89 ef       	ldi	r24, 0xF9	; 249
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <Keypad+0x82>
     142:	00 c0       	rjmp	.+0      	; 0x144 <Keypad+0x8c>
     144:	00 00       	nop
	{
		_delay_ms(20);
		return"5";
     146:	86 e7       	ldi	r24, 0x76	; 118
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	08 95       	ret
	}
	else if((PINB&(1<<PINB6))==0)
     14c:	b6 99       	sbic	0x16, 6	; 22
     14e:	0c c0       	rjmp	.+24     	; 0x168 <Keypad+0xb0>
     150:	2f ef       	ldi	r18, 0xFF	; 255
     152:	89 ef       	ldi	r24, 0xF9	; 249
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	21 50       	subi	r18, 0x01	; 1
     158:	80 40       	sbci	r24, 0x00	; 0
     15a:	90 40       	sbci	r25, 0x00	; 0
     15c:	e1 f7       	brne	.-8      	; 0x156 <Keypad+0x9e>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <Keypad+0xa8>
     160:	00 00       	nop
	{
		_delay_ms(20);
		return"6";
     162:	88 e7       	ldi	r24, 0x78	; 120
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret
	}
	

	PORTB=0b1111011;   // make third row 0
     168:	8b e7       	ldi	r24, 0x7B	; 123
     16a:	88 bb       	out	0x18, r24	; 24
	if((PINB &(1<<PINB4))==0)
     16c:	b4 99       	sbic	0x16, 4	; 22
     16e:	0c c0       	rjmp	.+24     	; 0x188 <Keypad+0xd0>
     170:	2f ef       	ldi	r18, 0xFF	; 255
     172:	89 ef       	ldi	r24, 0xF9	; 249
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	21 50       	subi	r18, 0x01	; 1
     178:	80 40       	sbci	r24, 0x00	; 0
     17a:	90 40       	sbci	r25, 0x00	; 0
     17c:	e1 f7       	brne	.-8      	; 0x176 <Keypad+0xbe>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <Keypad+0xc8>
     180:	00 00       	nop
	{
		_delay_ms(20);
		return"7";
     182:	8a e7       	ldi	r24, 0x7A	; 122
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret
	}
	else if((PINB&(1<<PINB5))==0)
     188:	b5 99       	sbic	0x16, 5	; 22
     18a:	0c c0       	rjmp	.+24     	; 0x1a4 <Keypad+0xec>
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	89 ef       	ldi	r24, 0xF9	; 249
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	21 50       	subi	r18, 0x01	; 1
     194:	80 40       	sbci	r24, 0x00	; 0
     196:	90 40       	sbci	r25, 0x00	; 0
     198:	e1 f7       	brne	.-8      	; 0x192 <Keypad+0xda>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <Keypad+0xe4>
     19c:	00 00       	nop
	{
		_delay_ms(20);
		return"8";
     19e:	8c e7       	ldi	r24, 0x7C	; 124
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret
	}
	else if((PINB&(1<<PINB6))==0)
     1a4:	b6 99       	sbic	0x16, 6	; 22
     1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <Keypad+0x108>
     1a8:	2f ef       	ldi	r18, 0xFF	; 255
     1aa:	89 ef       	ldi	r24, 0xF9	; 249
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	21 50       	subi	r18, 0x01	; 1
     1b0:	80 40       	sbci	r24, 0x00	; 0
     1b2:	90 40       	sbci	r25, 0x00	; 0
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <Keypad+0xf6>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Keypad+0x100>
     1b8:	00 00       	nop
	{
		_delay_ms(20);
		return"9";
     1ba:	8e e7       	ldi	r24, 0x7E	; 126
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	08 95       	ret
	}
	

	PORTB=0b1110111;   // make fourth row 0
     1c0:	87 e7       	ldi	r24, 0x77	; 119
     1c2:	88 bb       	out	0x18, r24	; 24
	{
		_delay_ms(20);
		return"del";
		
	}*/
	 if((PINB&(1<<PINB5))==0)
     1c4:	b5 99       	sbic	0x16, 5	; 22
     1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <Keypad+0x128>
     1c8:	2f ef       	ldi	r18, 0xFF	; 255
     1ca:	89 ef       	ldi	r24, 0xF9	; 249
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	21 50       	subi	r18, 0x01	; 1
     1d0:	80 40       	sbci	r24, 0x00	; 0
     1d2:	90 40       	sbci	r25, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <Keypad+0x116>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Keypad+0x120>
     1d8:	00 00       	nop
	{
		_delay_ms(20);
		return"0";
     1da:	80 e8       	ldi	r24, 0x80	; 128
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	08 95       	ret
		_delay_ms(20);
		return"ok";
	}*/
	

}
     1e0:	08 95       	ret

000001e2 <delay>:

char i2c_read(){
	TWCR  = (1<<TWEN) | (1<<TWINT);	//Enable I2C and clear interrupt
	while (!(TWCR & (1<<TWINT)));	//Read successful with all data received in TWDR
	return TWDR;
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0a c0       	rjmp	.+20     	; 0x1fc <delay+0x1a>
     1e8:	2f 5f       	subi	r18, 0xFF	; 255
     1ea:	3f 4f       	sbci	r19, 0xFF	; 255
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <delay+0x10>
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	29 37       	cpi	r18, 0x79	; 121
     1f4:	31 05       	cpc	r19, r1
     1f6:	c4 f3       	brlt	.-16     	; 0x1e8 <delay+0x6>
     1f8:	4f 5f       	subi	r20, 0xFF	; 255
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	84 17       	cp	r24, r20
     1fe:	95 07       	cpc	r25, r21
     200:	b4 f7       	brge	.-20     	; 0x1ee <delay+0xc>
     202:	08 95       	ret

00000204 <toggle>:
     204:	83 b1       	in	r24, 0x03	; 3
     206:	82 60       	ori	r24, 0x02	; 2
     208:	83 b9       	out	0x03, r24	; 3
     20a:	84 e8       	ldi	r24, 0x84	; 132
     20c:	86 bf       	out	0x36, r24	; 54
     20e:	06 b6       	in	r0, 0x36	; 54
     210:	07 fe       	sbrs	r0, 7
     212:	fd cf       	rjmp	.-6      	; 0x20e <toggle+0xa>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <delay>
     21c:	83 b1       	in	r24, 0x03	; 3
     21e:	8d 7f       	andi	r24, 0xFD	; 253
     220:	83 b9       	out	0x03, r24	; 3
     222:	84 e8       	ldi	r24, 0x84	; 132
     224:	86 bf       	out	0x36, r24	; 54
     226:	06 b6       	in	r0, 0x36	; 54
     228:	07 fe       	sbrs	r0, 7
     22a:	fd cf       	rjmp	.-6      	; 0x226 <toggle+0x22>
     22c:	08 95       	ret

0000022e <lcd_cmd_hf>:
     22e:	93 b1       	in	r25, 0x03	; 3
     230:	9e 7f       	andi	r25, 0xFE	; 254
     232:	93 b9       	out	0x03, r25	; 3
     234:	94 e8       	ldi	r25, 0x84	; 132
     236:	96 bf       	out	0x36, r25	; 54
     238:	06 b6       	in	r0, 0x36	; 54
     23a:	07 fe       	sbrs	r0, 7
     23c:	fd cf       	rjmp	.-6      	; 0x238 <lcd_cmd_hf+0xa>
     23e:	93 b1       	in	r25, 0x03	; 3
     240:	9f 70       	andi	r25, 0x0F	; 15
     242:	93 b9       	out	0x03, r25	; 3
     244:	94 e8       	ldi	r25, 0x84	; 132
     246:	96 bf       	out	0x36, r25	; 54
     248:	06 b6       	in	r0, 0x36	; 54
     24a:	07 fe       	sbrs	r0, 7
     24c:	fd cf       	rjmp	.-6      	; 0x248 <lcd_cmd_hf+0x1a>
     24e:	93 b1       	in	r25, 0x03	; 3
     250:	80 7f       	andi	r24, 0xF0	; 240
     252:	89 2b       	or	r24, r25
     254:	83 b9       	out	0x03, r24	; 3
     256:	84 e8       	ldi	r24, 0x84	; 132
     258:	86 bf       	out	0x36, r24	; 54
     25a:	06 b6       	in	r0, 0x36	; 54
     25c:	07 fe       	sbrs	r0, 7
     25e:	fd cf       	rjmp	.-6      	; 0x25a <lcd_cmd_hf+0x2c>
     260:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
     264:	08 95       	ret

00000266 <lcd_cmd>:
     266:	cf 93       	push	r28
     268:	c8 2f       	mov	r28, r24
     26a:	83 b1       	in	r24, 0x03	; 3
     26c:	8e 7f       	andi	r24, 0xFE	; 254
     26e:	83 b9       	out	0x03, r24	; 3
     270:	84 e8       	ldi	r24, 0x84	; 132
     272:	86 bf       	out	0x36, r24	; 54
     274:	06 b6       	in	r0, 0x36	; 54
     276:	07 fe       	sbrs	r0, 7
     278:	fd cf       	rjmp	.-6      	; 0x274 <lcd_cmd+0xe>
     27a:	83 b1       	in	r24, 0x03	; 3
     27c:	8f 70       	andi	r24, 0x0F	; 15
     27e:	83 b9       	out	0x03, r24	; 3
     280:	84 e8       	ldi	r24, 0x84	; 132
     282:	86 bf       	out	0x36, r24	; 54
     284:	06 b6       	in	r0, 0x36	; 54
     286:	07 fe       	sbrs	r0, 7
     288:	fd cf       	rjmp	.-6      	; 0x284 <lcd_cmd+0x1e>
     28a:	83 b1       	in	r24, 0x03	; 3
     28c:	9c 2f       	mov	r25, r28
     28e:	90 7f       	andi	r25, 0xF0	; 240
     290:	89 2b       	or	r24, r25
     292:	83 b9       	out	0x03, r24	; 3
     294:	84 e8       	ldi	r24, 0x84	; 132
     296:	86 bf       	out	0x36, r24	; 54
     298:	06 b6       	in	r0, 0x36	; 54
     29a:	07 fe       	sbrs	r0, 7
     29c:	fd cf       	rjmp	.-6      	; 0x298 <lcd_cmd+0x32>
     29e:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
     2a2:	83 b1       	in	r24, 0x03	; 3
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	83 b9       	out	0x03, r24	; 3
     2a8:	84 e8       	ldi	r24, 0x84	; 132
     2aa:	86 bf       	out	0x36, r24	; 54
     2ac:	06 b6       	in	r0, 0x36	; 54
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <lcd_cmd+0x46>
     2b2:	23 b1       	in	r18, 0x03	; 3
     2b4:	30 e1       	ldi	r19, 0x10	; 16
     2b6:	c3 9f       	mul	r28, r19
     2b8:	c0 01       	movw	r24, r0
     2ba:	11 24       	eor	r1, r1
     2bc:	82 2b       	or	r24, r18
     2be:	83 b9       	out	0x03, r24	; 3
     2c0:	84 e8       	ldi	r24, 0x84	; 132
     2c2:	86 bf       	out	0x36, r24	; 54
     2c4:	06 b6       	in	r0, 0x36	; 54
     2c6:	07 fe       	sbrs	r0, 7
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <lcd_cmd+0x5e>
     2ca:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_init>:
     2d2:	80 e3       	ldi	r24, 0x30	; 48
     2d4:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_cmd_hf>
     2d8:	80 e3       	ldi	r24, 0x30	; 48
     2da:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_cmd_hf>
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_cmd_hf>
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
     2f6:	86 e0       	ldi	r24, 0x06	; 6
     2f8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
     2fc:	80 e8       	ldi	r24, 0x80	; 128
     2fe:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
     302:	08 95       	ret

00000304 <lcd_dwr>:
     304:	cf 93       	push	r28
     306:	c8 2f       	mov	r28, r24
     308:	83 b1       	in	r24, 0x03	; 3
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	83 b9       	out	0x03, r24	; 3
     30e:	84 e8       	ldi	r24, 0x84	; 132
     310:	86 bf       	out	0x36, r24	; 54
     312:	06 b6       	in	r0, 0x36	; 54
     314:	07 fe       	sbrs	r0, 7
     316:	fd cf       	rjmp	.-6      	; 0x312 <lcd_dwr+0xe>
     318:	83 b1       	in	r24, 0x03	; 3
     31a:	8f 70       	andi	r24, 0x0F	; 15
     31c:	83 b9       	out	0x03, r24	; 3
     31e:	84 e8       	ldi	r24, 0x84	; 132
     320:	86 bf       	out	0x36, r24	; 54
     322:	06 b6       	in	r0, 0x36	; 54
     324:	07 fe       	sbrs	r0, 7
     326:	fd cf       	rjmp	.-6      	; 0x322 <lcd_dwr+0x1e>
     328:	83 b1       	in	r24, 0x03	; 3
     32a:	9c 2f       	mov	r25, r28
     32c:	90 7f       	andi	r25, 0xF0	; 240
     32e:	89 2b       	or	r24, r25
     330:	83 b9       	out	0x03, r24	; 3
     332:	84 e8       	ldi	r24, 0x84	; 132
     334:	86 bf       	out	0x36, r24	; 54
     336:	06 b6       	in	r0, 0x36	; 54
     338:	07 fe       	sbrs	r0, 7
     33a:	fd cf       	rjmp	.-6      	; 0x336 <lcd_dwr+0x32>
     33c:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
     340:	83 b1       	in	r24, 0x03	; 3
     342:	8f 70       	andi	r24, 0x0F	; 15
     344:	83 b9       	out	0x03, r24	; 3
     346:	84 e8       	ldi	r24, 0x84	; 132
     348:	86 bf       	out	0x36, r24	; 54
     34a:	06 b6       	in	r0, 0x36	; 54
     34c:	07 fe       	sbrs	r0, 7
     34e:	fd cf       	rjmp	.-6      	; 0x34a <lcd_dwr+0x46>
     350:	23 b1       	in	r18, 0x03	; 3
     352:	30 e1       	ldi	r19, 0x10	; 16
     354:	c3 9f       	mul	r28, r19
     356:	c0 01       	movw	r24, r0
     358:	11 24       	eor	r1, r1
     35a:	82 2b       	or	r24, r18
     35c:	83 b9       	out	0x03, r24	; 3
     35e:	84 e8       	ldi	r24, 0x84	; 132
     360:	86 bf       	out	0x36, r24	; 54
     362:	06 b6       	in	r0, 0x36	; 54
     364:	07 fe       	sbrs	r0, 7
     366:	fd cf       	rjmp	.-6      	; 0x362 <lcd_dwr+0x5e>
     368:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <lcd_msg>:
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
     376:	03 c0       	rjmp	.+6      	; 0x37e <lcd_msg+0xe>
     378:	21 96       	adiw	r28, 0x01	; 1
     37a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_dwr>
     37e:	88 81       	ld	r24, Y
     380:	81 11       	cpse	r24, r1
     382:	fa cf       	rjmp	.-12     	; 0x378 <lcd_msg+0x8>
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <i2c_init>:
     38a:	82 e6       	ldi	r24, 0x62	; 98
     38c:	80 b9       	out	0x00, r24	; 0
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	86 bf       	out	0x36, r24	; 54
     392:	11 b8       	out	0x01, r1	; 1
     394:	08 95       	ret

00000396 <i2c_start>:
     396:	84 ea       	ldi	r24, 0xA4	; 164
     398:	86 bf       	out	0x36, r24	; 54
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <i2c_start+0x4>
     3a0:	08 95       	ret

000003a2 <i2c_write>:
     3a2:	83 b9       	out	0x03, r24	; 3
     3a4:	84 e8       	ldi	r24, 0x84	; 132
     3a6:	86 bf       	out	0x36, r24	; 54
     3a8:	06 b6       	in	r0, 0x36	; 54
     3aa:	07 fe       	sbrs	r0, 7
     3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <i2c_write+0x6>
     3ae:	08 95       	ret

000003b0 <USART_Init>:

char USART_BUFFER[500] = "";
char data[150]; // GSM Data Buffer
void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{
	UCSRB |= (1 << RXEN) | (1 << TXEN) | (1 << RXCIE);	/* Enable USART transmitter and receiver */
     3b0:	2a b1       	in	r18, 0x0a	; 10
     3b2:	28 69       	ori	r18, 0x98	; 152
     3b4:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */
     3b6:	20 b5       	in	r18, 0x20	; 32
     3b8:	26 68       	ori	r18, 0x86	; 134
     3ba:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
     3bc:	dc 01       	movw	r26, r24
     3be:	cb 01       	movw	r24, r22
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	aa 1f       	adc	r26, r26
     3c6:	bb 1f       	adc	r27, r27
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	aa 1f       	adc	r26, r26
     3ce:	bb 1f       	adc	r27, r27
     3d0:	9c 01       	movw	r18, r24
     3d2:	ad 01       	movw	r20, r26
     3d4:	22 0f       	add	r18, r18
     3d6:	33 1f       	adc	r19, r19
     3d8:	44 1f       	adc	r20, r20
     3da:	55 1f       	adc	r21, r21
     3dc:	22 0f       	add	r18, r18
     3de:	33 1f       	adc	r19, r19
     3e0:	44 1f       	adc	r20, r20
     3e2:	55 1f       	adc	r21, r21
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	72 e1       	ldi	r23, 0x12	; 18
     3e8:	8a e7       	ldi	r24, 0x7A	; 122
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__udivmodsi4>
     3f0:	8f ef       	ldi	r24, 0xFF	; 255
     3f2:	82 0f       	add	r24, r18
     3f4:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
     3f6:	da 01       	movw	r26, r20
     3f8:	c9 01       	movw	r24, r18
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	a1 09       	sbc	r26, r1
     3fe:	b1 09       	sbc	r27, r1
     400:	89 2f       	mov	r24, r25
     402:	9a 2f       	mov	r25, r26
     404:	ab 2f       	mov	r26, r27
     406:	bb 27       	eor	r27, r27
     408:	80 bd       	out	0x20, r24	; 32
     40a:	08 95       	ret

0000040c <USART_TxChar>:
}
void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
     40c:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
     40e:	5d 9b       	sbis	0x0b, 5	; 11
     410:	fe cf       	rjmp	.-4      	; 0x40e <USART_TxChar+0x2>
}
     412:	08 95       	ret

00000414 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	8c 01       	movw	r16, r24
	int i=0;
     41e:	c0 e0       	ldi	r28, 0x00	; 0
     420:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
     422:	03 c0       	rjmp	.+6      	; 0x42a <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     424:	0e 94 06 02 	call	0x40c	; 0x40c <USART_TxChar>
		i++;
     428:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
     42a:	f8 01       	movw	r30, r16
     42c:	ec 0f       	add	r30, r28
     42e:	fd 1f       	adc	r31, r29
     430:	80 81       	ld	r24, Z
     432:	81 11       	cpse	r24, r1
     434:	f7 cf       	rjmp	.-18     	; 0x424 <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	08 95       	ret

00000440 <sendSMS>:
#define GSM_H_

#define ISP "mobitel"
#define APN "dialog"
#include "USART.h"
void sendSMS(char no[], const char *string) {
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	c4 56       	subi	r28, 0x64	; 100
     458:	d1 09       	sbc	r29, r1
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	de bf       	out	0x3e, r29	; 62
     460:	0f be       	out	0x3f, r0	; 63
     462:	cd bf       	out	0x3d, r28	; 61
     464:	18 2f       	mov	r17, r24
     466:	09 2f       	mov	r16, r25
     468:	c6 2e       	mov	r12, r22
     46a:	b7 2e       	mov	r11, r23
	USART_SendString("AT\r");
     46c:	82 e8       	ldi	r24, 0x82	; 130
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
     474:	8f e1       	ldi	r24, 0x1F	; 31
     476:	9e e4       	ldi	r25, 0x4E	; 78
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <sendSMS+0x38>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <sendSMS+0x3e>
     47e:	00 00       	nop
	_delay_ms(10);
	USART_SendString("AT+CMGF=1\r");
     480:	86 e8       	ldi	r24, 0x86	; 134
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
     488:	ef e1       	ldi	r30, 0x1F	; 31
     48a:	fe e4       	ldi	r31, 0x4E	; 78
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <sendSMS+0x4c>
     490:	00 c0       	rjmp	.+0      	; 0x492 <sendSMS+0x52>
     492:	00 00       	nop
	_delay_ms(10);
	char data_buffer[100];
	sprintf(data_buffer,"AT+CMGS=%s\r",no);
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	81 e9       	ldi	r24, 0x91	; 145
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	8e 01       	movw	r16, r28
     4a2:	0f 5f       	subi	r16, 0xFF	; 255
     4a4:	1f 4f       	sbci	r17, 0xFF	; 255
     4a6:	1f 93       	push	r17
     4a8:	0f 93       	push	r16
     4aa:	0e 94 84 13 	call	0x2708	; 0x2708 <sprintf>
	USART_SendString(data_buffer);
     4ae:	c8 01       	movw	r24, r16
     4b0:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
	memset(USART_BUFFER, 0, 100);
     4b4:	0f 2e       	mov	r0, r31
     4b6:	fc ea       	ldi	r31, 0xAC	; 172
     4b8:	ef 2e       	mov	r14, r31
     4ba:	f1 e0       	ldi	r31, 0x01	; 1
     4bc:	ff 2e       	mov	r15, r31
     4be:	f0 2d       	mov	r31, r0
     4c0:	0f 2e       	mov	r0, r31
     4c2:	f4 e6       	ldi	r31, 0x64	; 100
     4c4:	df 2e       	mov	r13, r31
     4c6:	f0 2d       	mov	r31, r0
     4c8:	f7 01       	movw	r30, r14
     4ca:	8d 2d       	mov	r24, r13
     4cc:	11 92       	st	Z+, r1
     4ce:	8a 95       	dec	r24
     4d0:	e9 f7       	brne	.-6      	; 0x4cc <sendSMS+0x8c>
	sprintf(data_buffer,"%s\r",string);
     4d2:	bf 92       	push	r11
     4d4:	cf 92       	push	r12
     4d6:	89 e9       	ldi	r24, 0x99	; 153
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	9f 93       	push	r25
     4dc:	8f 93       	push	r24
     4de:	1f 93       	push	r17
     4e0:	0f 93       	push	r16
     4e2:	0e 94 84 13 	call	0x2708	; 0x2708 <sprintf>
	USART_SendString(data_buffer);
     4e6:	c8 01       	movw	r24, r16
     4e8:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
	memset(USART_BUFFER, 0, 100);//clear data buffer
     4ec:	f7 01       	movw	r30, r14
     4ee:	11 92       	st	Z+, r1
     4f0:	da 94       	dec	r13
     4f2:	e9 f7       	brne	.-6      	; 0x4ee <sendSMS+0xae>

}
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	cc 59       	subi	r28, 0x9C	; 156
     500:	df 4f       	sbci	r29, 0xFF	; 255
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	bf 90       	pop	r11
     51e:	08 95       	ret

00000520 <GSMConnect>:
void GSMConnect(){
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	c4 56       	subi	r28, 0x64	; 100
     52e:	d1 09       	sbc	r29, r1
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
	USART_SendString("ATE0\r");
     53a:	8d e9       	ldi	r24, 0x9D	; 157
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
     542:	8f e1       	ldi	r24, 0x1F	; 31
     544:	9e e4       	ldi	r25, 0x4E	; 78
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <GSMConnect+0x26>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <GSMConnect+0x2c>
     54c:	00 00       	nop
	_delay_ms(10);
	char data_buffer[100];
	sprintf(data_buffer,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r",APN,ISP,ISP);
     54e:	83 ea       	ldi	r24, 0xA3	; 163
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	8b ea       	ldi	r24, 0xAB	; 171
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	82 eb       	ldi	r24, 0xB2	; 178
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	8e 01       	movw	r16, r28
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	1f 93       	push	r17
     572:	0f 93       	push	r16
     574:	0e 94 84 13 	call	0x2708	; 0x2708 <sprintf>
	USART_SendString(data_buffer);
     578:	c8 01       	movw	r24, r16
     57a:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
	memset(USART_BUFFER, 0, 100);
     57e:	84 e6       	ldi	r24, 0x64	; 100
     580:	ec ea       	ldi	r30, 0xAC	; 172
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	df 01       	movw	r26, r30
     586:	1d 92       	st	X+, r1
     588:	8a 95       	dec	r24
     58a:	e9 f7       	brne	.-6      	; 0x586 <GSMConnect+0x66>
     58c:	8f e1       	ldi	r24, 0x1F	; 31
     58e:	9e e4       	ldi	r25, 0x4E	; 78
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <GSMConnect+0x70>
     594:	00 c0       	rjmp	.+0      	; 0x596 <GSMConnect+0x76>
     596:	00 00       	nop
	_delay_ms(10);
	USART_SendString("AT+SAPBR=1,1\r");
     598:	8a ec       	ldi	r24, 0xCA	; 202
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 0a 02 	call	0x414	; 0x414 <USART_SendString>
}
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	cc 59       	subi	r28, 0x9C	; 156
     5ac:	df 4f       	sbci	r29, 0xFF	; 255
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret

000005c2 <openSolenoidValves>:
#define SOLENOIDVALVES_H_

unsigned long case_num1;
unsigned long prev_millis1;
unsigned long need_millis1;
void openSolenoidValves(double oxygen, double air) {
     5c2:	8f 92       	push	r8
     5c4:	9f 92       	push	r9
     5c6:	af 92       	push	r10
     5c8:	bf 92       	push	r11
     5ca:	cf 92       	push	r12
     5cc:	df 92       	push	r13
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	4b 01       	movw	r8, r22
     5d8:	5c 01       	movw	r10, r24
     5da:	ca 01       	movw	r24, r20
     5dc:	b9 01       	movw	r22, r18
	
	air=air*1000;
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4a e7       	ldi	r20, 0x7A	; 122
     5e4:	54 e4       	ldi	r21, 0x44	; 68
     5e6:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
     5ea:	6b 01       	movw	r12, r22
     5ec:	7c 01       	movw	r14, r24
	oxygen=oxygen*1000;
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	4a e7       	ldi	r20, 0x7A	; 122
     5f4:	54 e4       	ldi	r21, 0x44	; 68
     5f6:	c5 01       	movw	r24, r10
     5f8:	b4 01       	movw	r22, r8
     5fa:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
     5fe:	4b 01       	movw	r8, r22
     600:	5c 01       	movw	r10, r24
	
	if(air>oxygen){
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
     60e:	18 16       	cp	r1, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <openSolenoidValves+0x52>
     612:	b7 c1       	rjmp	.+878    	; 0x982 <__stack+0x123>
		if(prev_millis1==NULL){
     614:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <prev_millis1>
     618:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <prev_millis1+0x1>
     61c:	89 2b       	or	r24, r25
     61e:	09 f0       	breq	.+2      	; 0x622 <openSolenoidValves+0x60>
     620:	40 c0       	rjmp	.+128    	; 0x6a2 <openSolenoidValves+0xe0>
			
			prev_millis1=millis();
     622:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
     626:	60 93 67 04 	sts	0x0467, r22	; 0x800467 <prev_millis1>
     62a:	70 93 68 04 	sts	0x0468, r23	; 0x800468 <prev_millis1+0x1>
     62e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <prev_millis1+0x2>
     632:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <prev_millis1+0x3>
			need_millis1=oxygen+prev_millis1;
     636:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__floatunsisf>
     63a:	a5 01       	movw	r20, r10
     63c:	94 01       	movw	r18, r8
     63e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
     642:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
     646:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <need_millis1>
     64a:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <need_millis1+0x1>
     64e:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <need_millis1+0x2>
     652:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <need_millis1+0x3>
			case_num1=1;
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	a0 e0       	ldi	r26, 0x00	; 0
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     662:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     666:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     66a:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
			PORTC = PORTC | (1<<2);  //open oxygen(normally closed valve)
     66e:	85 b3       	in	r24, 0x15	; 21
     670:	84 60       	ori	r24, 0x04	; 4
     672:	85 bb       	out	0x15, r24	; 21
			PORTC = PORTC & (~(1<<3)); //open air (normally open valve)
     674:	85 b3       	in	r24, 0x15	; 21
     676:	87 7f       	andi	r24, 0xF7	; 247
     678:	85 bb       	out	0x15, r24	; 21
			case_num1++;
     67a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     67e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     682:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     686:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	a1 1d       	adc	r26, r1
     68e:	b1 1d       	adc	r27, r1
     690:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     694:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     698:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     69c:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
     6a0:	70 c1       	rjmp	.+736    	; 0x982 <__stack+0x123>
			}else if(need_millis1<millis()){
     6a2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
     6a6:	00 91 63 04 	lds	r16, 0x0463	; 0x800463 <need_millis1>
     6aa:	10 91 64 04 	lds	r17, 0x0464	; 0x800464 <need_millis1+0x1>
     6ae:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <need_millis1+0x2>
     6b2:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <need_millis1+0x3>
     6b6:	06 17       	cp	r16, r22
     6b8:	17 07       	cpc	r17, r23
     6ba:	28 07       	cpc	r18, r24
     6bc:	39 07       	cpc	r19, r25
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <openSolenoidValves+0x100>
     6c0:	85 c0       	rjmp	.+266    	; 0x7cc <openSolenoidValves+0x20a>
			
			switch(case_num1){
     6c2:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     6c6:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     6ca:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     6ce:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	91 05       	cpc	r25, r1
     6d6:	a1 05       	cpc	r26, r1
     6d8:	b1 05       	cpc	r27, r1
     6da:	29 f0       	breq	.+10     	; 0x6e6 <openSolenoidValves+0x124>
     6dc:	03 97       	sbiw	r24, 0x03	; 3
     6de:	a1 05       	cpc	r26, r1
     6e0:	b1 05       	cpc	r27, r1
     6e2:	a1 f1       	breq	.+104    	; 0x74c <openSolenoidValves+0x18a>
     6e4:	62 c0       	rjmp	.+196    	; 0x7aa <openSolenoidValves+0x1e8>
				
				case 2:{PORTC = PORTC & (~(1<<2));
     6e6:	85 b3       	in	r24, 0x15	; 21
     6e8:	8b 7f       	andi	r24, 0xFB	; 251
     6ea:	85 bb       	out	0x15, r24	; 21
						case_num1++;
     6ec:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     6f0:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     6f4:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     6f8:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     706:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     70a:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     70e:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
						need_millis1=need_millis1+air-oxygen;
     712:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <need_millis1>
     716:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <need_millis1+0x1>
     71a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <need_millis1+0x2>
     71e:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <need_millis1+0x3>
     722:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__floatunsisf>
     726:	a7 01       	movw	r20, r14
     728:	96 01       	movw	r18, r12
     72a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
     72e:	a5 01       	movw	r20, r10
     730:	94 01       	movw	r18, r8
     732:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
     736:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
     73a:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <need_millis1>
     73e:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <need_millis1+0x1>
     742:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <need_millis1+0x2>
     746:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <need_millis1+0x3>
						break;
     74a:	1b c1       	rjmp	.+566    	; 0x982 <__stack+0x123>
						} //close oxygen
				case 3:{PORTC = PORTC | (1<<3);
     74c:	85 b3       	in	r24, 0x15	; 21
     74e:	88 60       	ori	r24, 0x08	; 8
     750:	85 bb       	out	0x15, r24	; 21
						case_num1++;
     752:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     756:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     75a:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     75e:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	a1 1d       	adc	r26, r1
     766:	b1 1d       	adc	r27, r1
     768:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     76c:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     770:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     774:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
						need_millis1=need_millis1+air;
     778:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <need_millis1>
     77c:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <need_millis1+0x1>
     780:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <need_millis1+0x2>
     784:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <need_millis1+0x3>
     788:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__floatunsisf>
     78c:	a7 01       	movw	r20, r14
     78e:	96 01       	movw	r18, r12
     790:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
     794:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
     798:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <need_millis1>
     79c:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <need_millis1+0x1>
     7a0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <need_millis1+0x2>
     7a4:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <need_millis1+0x3>
						break;
     7a8:	ec c0       	rjmp	.+472    	; 0x982 <__stack+0x123>
						}//close air
				default:{case_num1=NULL;
     7aa:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <case_num1>
     7ae:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <case_num1+0x1>
     7b2:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <case_num1+0x2>
     7b6:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <case_num1+0x3>
						prev_millis1=NULL;
     7ba:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <prev_millis1>
     7be:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <prev_millis1+0x1>
     7c2:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <prev_millis1+0x2>
     7c6:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <prev_millis1+0x3>
     7ca:	db c0       	rjmp	.+438    	; 0x982 <__stack+0x123>
			}
			
			
			
			}else {
			if(prev_millis1==NULL){
     7cc:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <prev_millis1>
     7d0:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <prev_millis1+0x1>
     7d4:	89 2b       	or	r24, r25
     7d6:	09 f0       	breq	.+2      	; 0x7da <openSolenoidValves+0x218>
     7d8:	40 c0       	rjmp	.+128    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
				
				prev_millis1=millis();
     7da:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
     7de:	60 93 67 04 	sts	0x0467, r22	; 0x800467 <prev_millis1>
     7e2:	70 93 68 04 	sts	0x0468, r23	; 0x800468 <prev_millis1+0x1>
     7e6:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <prev_millis1+0x2>
     7ea:	90 93 6a 04 	sts	0x046A, r25	; 0x80046a <prev_millis1+0x3>
				need_millis1=air+prev_millis1;
     7ee:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__floatunsisf>
     7f2:	a7 01       	movw	r20, r14
     7f4:	96 01       	movw	r18, r12
     7f6:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
     7fa:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
     7fe:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <need_millis1>
     802:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <need_millis1+0x1>
     806:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <need_millis1+0x2>
     80a:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <need_millis1+0x3>
				case_num1=1;
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     81a:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     81e:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     822:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
				PORTC = PORTC | (1 << 2); //open oxygen(normally closed valve)
     826:	85 b3       	in	r24, 0x15	; 21
     828:	84 60       	ori	r24, 0x04	; 4
     82a:	85 bb       	out	0x15, r24	; 21
				PORTC = PORTC & (~(1 << 3)); //open air (normally open valve)
     82c:	85 b3       	in	r24, 0x15	; 21
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	85 bb       	out	0x15, r24	; 21
				case_num1++;
     832:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     836:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     83a:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     83e:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	a1 1d       	adc	r26, r1
     846:	b1 1d       	adc	r27, r1
     848:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     84c:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     850:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     854:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
     858:	94 c0       	rjmp	.+296    	; 0x982 <__stack+0x123>
				}else if(need_millis1<millis()){
     85a:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
     85e:	00 91 63 04 	lds	r16, 0x0463	; 0x800463 <need_millis1>
     862:	10 91 64 04 	lds	r17, 0x0464	; 0x800464 <need_millis1+0x1>
     866:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <need_millis1+0x2>
     86a:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <need_millis1+0x3>
     86e:	06 17       	cp	r16, r22
     870:	17 07       	cpc	r17, r23
     872:	28 07       	cpc	r18, r24
     874:	39 07       	cpc	r19, r25
     876:	08 f0       	brcs	.+2      	; 0x87a <__stack+0x1b>
     878:	84 c0       	rjmp	.+264    	; 0x982 <__stack+0x123>
				
				switch(case_num1){
     87a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     87e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     882:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     886:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	91 05       	cpc	r25, r1
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	29 f0       	breq	.+10     	; 0x89e <__stack+0x3f>
     894:	03 97       	sbiw	r24, 0x03	; 3
     896:	a1 05       	cpc	r26, r1
     898:	b1 05       	cpc	r27, r1
     89a:	a1 f1       	breq	.+104    	; 0x904 <__stack+0xa5>
     89c:	62 c0       	rjmp	.+196    	; 0x962 <__stack+0x103>
					
					case 2:{PORTC = PORTC | (1<<3);
     89e:	85 b3       	in	r24, 0x15	; 21
     8a0:	88 60       	ori	r24, 0x08	; 8
     8a2:	85 bb       	out	0x15, r24	; 21
							case_num1++;
     8a4:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     8a8:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     8ac:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     8b0:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	a1 1d       	adc	r26, r1
     8b8:	b1 1d       	adc	r27, r1
     8ba:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     8be:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     8c2:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     8c6:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
							need_millis1=need_millis1+oxygen-air;
     8ca:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <need_millis1>
     8ce:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <need_millis1+0x1>
     8d2:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <need_millis1+0x2>
     8d6:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <need_millis1+0x3>
     8da:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__floatunsisf>
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
     8e6:	a7 01       	movw	r20, r14
     8e8:	96 01       	movw	r18, r12
     8ea:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
     8ee:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
     8f2:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <need_millis1>
     8f6:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <need_millis1+0x1>
     8fa:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <need_millis1+0x2>
     8fe:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <need_millis1+0x3>
							break;
     902:	3f c0       	rjmp	.+126    	; 0x982 <__stack+0x123>
							} //close air
					case 3:{PORTC = PORTC & (~(1<<2));
     904:	85 b3       	in	r24, 0x15	; 21
     906:	8b 7f       	andi	r24, 0xFB	; 251
     908:	85 bb       	out	0x15, r24	; 21
							case_num1++;
     90a:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <case_num1>
     90e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <case_num1+0x1>
     912:	a0 91 a4 03 	lds	r26, 0x03A4	; 0x8003a4 <case_num1+0x2>
     916:	b0 91 a5 03 	lds	r27, 0x03A5	; 0x8003a5 <case_num1+0x3>
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	a1 1d       	adc	r26, r1
     91e:	b1 1d       	adc	r27, r1
     920:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <case_num1>
     924:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <case_num1+0x1>
     928:	a0 93 a4 03 	sts	0x03A4, r26	; 0x8003a4 <case_num1+0x2>
     92c:	b0 93 a5 03 	sts	0x03A5, r27	; 0x8003a5 <case_num1+0x3>
							need_millis1=need_millis1+oxygen;
     930:	60 91 63 04 	lds	r22, 0x0463	; 0x800463 <need_millis1>
     934:	70 91 64 04 	lds	r23, 0x0464	; 0x800464 <need_millis1+0x1>
     938:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <need_millis1+0x2>
     93c:	90 91 66 04 	lds	r25, 0x0466	; 0x800466 <need_millis1+0x3>
     940:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__floatunsisf>
     944:	a5 01       	movw	r20, r10
     946:	94 01       	movw	r18, r8
     948:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <__addsf3>
     94c:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
     950:	60 93 63 04 	sts	0x0463, r22	; 0x800463 <need_millis1>
     954:	70 93 64 04 	sts	0x0464, r23	; 0x800464 <need_millis1+0x1>
     958:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <need_millis1+0x2>
     95c:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <need_millis1+0x3>
							break;
     960:	10 c0       	rjmp	.+32     	; 0x982 <__stack+0x123>
							}//close oxygen
					default:{case_num1=NULL;
     962:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <case_num1>
     966:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <case_num1+0x1>
     96a:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <case_num1+0x2>
     96e:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <case_num1+0x3>
							prev_millis1=NULL;
     972:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <prev_millis1>
     976:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <prev_millis1+0x1>
     97a:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <prev_millis1+0x2>
     97e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <prev_millis1+0x3>
			}

		}

	}
}
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	bf 90       	pop	r11
     990:	af 90       	pop	r10
     992:	9f 90       	pop	r9
     994:	8f 90       	pop	r8
     996:	08 95       	ret

00000998 <startStepperMotor>:

unsigned long prev_millis0;
unsigned long need_millis0;
int case_num0;

void startStepperMotor(int breathPerMin, int BreathLength) {
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ec 01       	movw	r28, r24
	if(prev_millis0==NULL){
     9a2:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <prev_millis0>
     9a6:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <prev_millis0+0x1>
     9aa:	89 2b       	or	r24, r25
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <startStepperMotor+0x18>
     9ae:	3f c0       	rjmp	.+126    	; 0xa2e <startStepperMotor+0x96>
		
		prev_millis0=millis();
     9b0:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
     9b4:	8b 01       	movw	r16, r22
     9b6:	9c 01       	movw	r18, r24
     9b8:	60 93 17 05 	sts	0x0517, r22	; 0x800517 <prev_millis0>
     9bc:	70 93 18 05 	sts	0x0518, r23	; 0x800518 <prev_millis0+0x1>
     9c0:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <prev_millis0+0x2>
     9c4:	90 93 1a 05 	sts	0x051A, r25	; 0x80051a <prev_millis0+0x3>
		need_millis0=30000/(breathPerMin*10)+prev_millis0;
     9c8:	ce 01       	movw	r24, r28
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	be 01       	movw	r22, r28
     9d0:	66 0f       	add	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	66 0f       	add	r22, r22
     9d6:	77 1f       	adc	r23, r23
     9d8:	66 0f       	add	r22, r22
     9da:	77 1f       	adc	r23, r23
     9dc:	68 0f       	add	r22, r24
     9de:	79 1f       	adc	r23, r25
     9e0:	80 e3       	ldi	r24, 0x30	; 48
     9e2:	95 e7       	ldi	r25, 0x75	; 117
     9e4:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     9e8:	cb 01       	movw	r24, r22
     9ea:	77 0f       	add	r23, r23
     9ec:	aa 0b       	sbc	r26, r26
     9ee:	bb 0b       	sbc	r27, r27
     9f0:	08 0f       	add	r16, r24
     9f2:	19 1f       	adc	r17, r25
     9f4:	2a 1f       	adc	r18, r26
     9f6:	3b 1f       	adc	r19, r27
     9f8:	00 93 b3 03 	sts	0x03B3, r16	; 0x8003b3 <need_millis0>
     9fc:	10 93 b4 03 	sts	0x03B4, r17	; 0x8003b4 <need_millis0+0x1>
     a00:	20 93 b5 03 	sts	0x03B5, r18	; 0x8003b5 <need_millis0+0x2>
     a04:	30 93 b6 03 	sts	0x03B6, r19	; 0x8003b6 <need_millis0+0x3>
		case_num0=1;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     a10:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
		PORTC = PORTC | (1<<4);case_num0++;
     a14:	85 b3       	in	r24, 0x15	; 21
     a16:	80 61       	ori	r24, 0x10	; 16
     a18:	85 bb       	out	0x15, r24	; 21
     a1a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     a1e:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     a28:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     a2c:	e3 c3       	rjmp	.+1990   	; 0x11f4 <startStepperMotor+0x85c>
		}else if(need_millis0<millis()){
     a2e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
     a32:	00 91 b3 03 	lds	r16, 0x03B3	; 0x8003b3 <need_millis0>
     a36:	10 91 b4 03 	lds	r17, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     a3a:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     a3e:	30 91 b6 03 	lds	r19, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     a42:	06 17       	cp	r16, r22
     a44:	17 07       	cpc	r17, r23
     a46:	28 07       	cpc	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	08 f0       	brcs	.+2      	; 0xa4e <startStepperMotor+0xb6>
     a4c:	d3 c3       	rjmp	.+1958   	; 0x11f4 <startStepperMotor+0x85c>
		
		switch(case_num0){
     a4e:	e0 91 5d 04 	lds	r30, 0x045D	; 0x80045d <case_num0>
     a52:	f0 91 5e 04 	lds	r31, 0x045E	; 0x80045e <case_num0+0x1>
     a56:	32 97       	sbiw	r30, 0x02	; 2
     a58:	e3 31       	cpi	r30, 0x13	; 19
     a5a:	f1 05       	cpc	r31, r1
     a5c:	08 f0       	brcs	.+2      	; 0xa60 <startStepperMotor+0xc8>
     a5e:	be c3       	rjmp	.+1916   	; 0x11dc <startStepperMotor+0x844>
     a60:	e6 5d       	subi	r30, 0xD6	; 214
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__tablejump2__>
			
			case 2:{PORTC = PORTC | (1<<6);
     a68:	85 b3       	in	r24, 0x15	; 21
     a6a:	80 64       	ori	r24, 0x40	; 64
     a6c:	85 bb       	out	0x15, r24	; 21
				case_num0++;
     a6e:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     a72:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     a7c:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     a80:	ce 01       	movw	r24, r28
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	be 01       	movw	r22, r28
     a88:	66 0f       	add	r22, r22
     a8a:	77 1f       	adc	r23, r23
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	68 0f       	add	r22, r24
     a96:	79 1f       	adc	r23, r25
     a98:	80 e3       	ldi	r24, 0x30	; 48
     a9a:	95 e7       	ldi	r25, 0x75	; 117
     a9c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     aa0:	ab 01       	movw	r20, r22
     aa2:	77 0f       	add	r23, r23
     aa4:	66 0b       	sbc	r22, r22
     aa6:	77 0b       	sbc	r23, r23
     aa8:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     aac:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     ab0:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     ab4:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     ab8:	84 0f       	add	r24, r20
     aba:	95 1f       	adc	r25, r21
     abc:	a6 1f       	adc	r26, r22
     abe:	b7 1f       	adc	r27, r23
     ac0:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     ac4:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     ac8:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     acc:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     ad0:	91 c3       	rjmp	.+1826   	; 0x11f4 <startStepperMotor+0x85c>
			case 3:{PORTC = PORTC & (~(1<<4));
     ad2:	85 b3       	in	r24, 0x15	; 21
     ad4:	8f 7e       	andi	r24, 0xEF	; 239
     ad6:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     ad8:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     adc:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     ae6:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     aea:	ce 01       	movw	r24, r28
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	be 01       	movw	r22, r28
     af2:	66 0f       	add	r22, r22
     af4:	77 1f       	adc	r23, r23
     af6:	66 0f       	add	r22, r22
     af8:	77 1f       	adc	r23, r23
     afa:	66 0f       	add	r22, r22
     afc:	77 1f       	adc	r23, r23
     afe:	68 0f       	add	r22, r24
     b00:	79 1f       	adc	r23, r25
     b02:	80 e3       	ldi	r24, 0x30	; 48
     b04:	95 e7       	ldi	r25, 0x75	; 117
     b06:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     b0a:	ab 01       	movw	r20, r22
     b0c:	77 0f       	add	r23, r23
     b0e:	66 0b       	sbc	r22, r22
     b10:	77 0b       	sbc	r23, r23
     b12:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     b16:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     b1a:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     b1e:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     b22:	84 0f       	add	r24, r20
     b24:	95 1f       	adc	r25, r21
     b26:	a6 1f       	adc	r26, r22
     b28:	b7 1f       	adc	r27, r23
     b2a:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     b2e:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     b32:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     b36:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     b3a:	5c c3       	rjmp	.+1720   	; 0x11f4 <startStepperMotor+0x85c>
			case 4:{PORTC = PORTC | (1<<5);
     b3c:	85 b3       	in	r24, 0x15	; 21
     b3e:	80 62       	ori	r24, 0x20	; 32
     b40:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     b42:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     b46:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     b50:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     b54:	ce 01       	movw	r24, r28
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	be 01       	movw	r22, r28
     b5c:	66 0f       	add	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	66 0f       	add	r22, r22
     b62:	77 1f       	adc	r23, r23
     b64:	66 0f       	add	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	68 0f       	add	r22, r24
     b6a:	79 1f       	adc	r23, r25
     b6c:	80 e3       	ldi	r24, 0x30	; 48
     b6e:	95 e7       	ldi	r25, 0x75	; 117
     b70:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     b74:	ab 01       	movw	r20, r22
     b76:	77 0f       	add	r23, r23
     b78:	66 0b       	sbc	r22, r22
     b7a:	77 0b       	sbc	r23, r23
     b7c:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     b80:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     b84:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     b88:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     b8c:	84 0f       	add	r24, r20
     b8e:	95 1f       	adc	r25, r21
     b90:	a6 1f       	adc	r26, r22
     b92:	b7 1f       	adc	r27, r23
     b94:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     b98:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     b9c:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     ba0:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     ba4:	27 c3       	rjmp	.+1614   	; 0x11f4 <startStepperMotor+0x85c>
			case 5:{PORTC = PORTC & (~(1<<6));
     ba6:	85 b3       	in	r24, 0x15	; 21
     ba8:	8f 7b       	andi	r24, 0xBF	; 191
     baa:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     bac:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     bb0:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     bba:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     bbe:	ce 01       	movw	r24, r28
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	be 01       	movw	r22, r28
     bc6:	66 0f       	add	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	66 0f       	add	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	68 0f       	add	r22, r24
     bd4:	79 1f       	adc	r23, r25
     bd6:	80 e3       	ldi	r24, 0x30	; 48
     bd8:	95 e7       	ldi	r25, 0x75	; 117
     bda:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     bde:	ab 01       	movw	r20, r22
     be0:	77 0f       	add	r23, r23
     be2:	66 0b       	sbc	r22, r22
     be4:	77 0b       	sbc	r23, r23
     be6:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     bea:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     bee:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     bf2:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     bf6:	84 0f       	add	r24, r20
     bf8:	95 1f       	adc	r25, r21
     bfa:	a6 1f       	adc	r26, r22
     bfc:	b7 1f       	adc	r27, r23
     bfe:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     c02:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     c06:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     c0a:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     c0e:	f2 c2       	rjmp	.+1508   	; 0x11f4 <startStepperMotor+0x85c>
			case 6:{PORTC = PORTC | (1<<7);case_num0++;
     c10:	85 b3       	in	r24, 0x15	; 21
     c12:	80 68       	ori	r24, 0x80	; 128
     c14:	85 bb       	out	0x15, r24	; 21
     c16:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     c1a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     c24:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     c28:	ce 01       	movw	r24, r28
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	be 01       	movw	r22, r28
     c30:	66 0f       	add	r22, r22
     c32:	77 1f       	adc	r23, r23
     c34:	66 0f       	add	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	68 0f       	add	r22, r24
     c3e:	79 1f       	adc	r23, r25
     c40:	80 e3       	ldi	r24, 0x30	; 48
     c42:	95 e7       	ldi	r25, 0x75	; 117
     c44:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     c48:	ab 01       	movw	r20, r22
     c4a:	77 0f       	add	r23, r23
     c4c:	66 0b       	sbc	r22, r22
     c4e:	77 0b       	sbc	r23, r23
     c50:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     c54:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     c58:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     c5c:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     c60:	84 0f       	add	r24, r20
     c62:	95 1f       	adc	r25, r21
     c64:	a6 1f       	adc	r26, r22
     c66:	b7 1f       	adc	r27, r23
     c68:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     c6c:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     c70:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     c74:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     c78:	bd c2       	rjmp	.+1402   	; 0x11f4 <startStepperMotor+0x85c>
			case 7:{PORTC = PORTC & (~(1<<5));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     c7a:	85 b3       	in	r24, 0x15	; 21
     c7c:	8f 7d       	andi	r24, 0xDF	; 223
     c7e:	85 bb       	out	0x15, r24	; 21
     c80:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     c84:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     c8e:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     c92:	ce 01       	movw	r24, r28
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	be 01       	movw	r22, r28
     c9a:	66 0f       	add	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	66 0f       	add	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	66 0f       	add	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	68 0f       	add	r22, r24
     ca8:	79 1f       	adc	r23, r25
     caa:	80 e3       	ldi	r24, 0x30	; 48
     cac:	95 e7       	ldi	r25, 0x75	; 117
     cae:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     cb2:	ab 01       	movw	r20, r22
     cb4:	77 0f       	add	r23, r23
     cb6:	66 0b       	sbc	r22, r22
     cb8:	77 0b       	sbc	r23, r23
     cba:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     cbe:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     cc2:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     cc6:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     cca:	84 0f       	add	r24, r20
     ccc:	95 1f       	adc	r25, r21
     cce:	a6 1f       	adc	r26, r22
     cd0:	b7 1f       	adc	r27, r23
     cd2:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     cd6:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     cda:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     cde:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     ce2:	88 c2       	rjmp	.+1296   	; 0x11f4 <startStepperMotor+0x85c>
			case 8:{PORTC = PORTC | (1<<4);case_num0++;
     ce4:	85 b3       	in	r24, 0x15	; 21
     ce6:	80 61       	ori	r24, 0x10	; 16
     ce8:	85 bb       	out	0x15, r24	; 21
     cea:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     cee:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     cf8:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     cfc:	ce 01       	movw	r24, r28
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	be 01       	movw	r22, r28
     d04:	66 0f       	add	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	66 0f       	add	r22, r22
     d0e:	77 1f       	adc	r23, r23
     d10:	68 0f       	add	r22, r24
     d12:	79 1f       	adc	r23, r25
     d14:	80 e3       	ldi	r24, 0x30	; 48
     d16:	95 e7       	ldi	r25, 0x75	; 117
     d18:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     d1c:	ab 01       	movw	r20, r22
     d1e:	77 0f       	add	r23, r23
     d20:	66 0b       	sbc	r22, r22
     d22:	77 0b       	sbc	r23, r23
     d24:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     d28:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     d2c:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     d30:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     d34:	84 0f       	add	r24, r20
     d36:	95 1f       	adc	r25, r21
     d38:	a6 1f       	adc	r26, r22
     d3a:	b7 1f       	adc	r27, r23
     d3c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     d40:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     d44:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     d48:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     d4c:	53 c2       	rjmp	.+1190   	; 0x11f4 <startStepperMotor+0x85c>
			case 9:{PORTC = PORTC & (~(1<<7));case_num0++;
     d4e:	85 b3       	in	r24, 0x15	; 21
     d50:	8f 77       	andi	r24, 0x7F	; 127
     d52:	85 bb       	out	0x15, r24	; 21
     d54:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     d58:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     d62:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     d66:	ce 01       	movw	r24, r28
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	be 01       	movw	r22, r28
     d6e:	66 0f       	add	r22, r22
     d70:	77 1f       	adc	r23, r23
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	66 0f       	add	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	68 0f       	add	r22, r24
     d7c:	79 1f       	adc	r23, r25
     d7e:	80 e3       	ldi	r24, 0x30	; 48
     d80:	95 e7       	ldi	r25, 0x75	; 117
     d82:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     d86:	ab 01       	movw	r20, r22
     d88:	77 0f       	add	r23, r23
     d8a:	66 0b       	sbc	r22, r22
     d8c:	77 0b       	sbc	r23, r23
     d8e:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     d92:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     d96:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     d9a:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     d9e:	84 0f       	add	r24, r20
     da0:	95 1f       	adc	r25, r21
     da2:	a6 1f       	adc	r26, r22
     da4:	b7 1f       	adc	r27, r23
     da6:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     daa:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     dae:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     db2:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     db6:	1e c2       	rjmp	.+1084   	; 0x11f4 <startStepperMotor+0x85c>
			case 10:{PORTC = PORTC & (~(1<<4));
     db8:	85 b3       	in	r24, 0x15	; 21
     dba:	8f 7e       	andi	r24, 0xEF	; 239
     dbc:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     dbe:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     dc2:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     dc6:	01 96       	adiw	r24, 0x01	; 1
     dc8:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     dcc:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     dd0:	ce 01       	movw	r24, r28
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	be 01       	movw	r22, r28
     dd8:	66 0f       	add	r22, r22
     dda:	77 1f       	adc	r23, r23
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	66 0f       	add	r22, r22
     de2:	77 1f       	adc	r23, r23
     de4:	68 0f       	add	r22, r24
     de6:	79 1f       	adc	r23, r25
     de8:	80 e3       	ldi	r24, 0x30	; 48
     dea:	95 e7       	ldi	r25, 0x75	; 117
     dec:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     df0:	ab 01       	movw	r20, r22
     df2:	77 0f       	add	r23, r23
     df4:	66 0b       	sbc	r22, r22
     df6:	77 0b       	sbc	r23, r23
     df8:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     dfc:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     e00:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     e04:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     e08:	84 0f       	add	r24, r20
     e0a:	95 1f       	adc	r25, r21
     e0c:	a6 1f       	adc	r26, r22
     e0e:	b7 1f       	adc	r27, r23
     e10:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     e14:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     e18:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     e1c:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     e20:	e9 c1       	rjmp	.+978    	; 0x11f4 <startStepperMotor+0x85c>
			case 11:{PORTC = PORTC | (1<<4);case_num0++;
     e22:	85 b3       	in	r24, 0x15	; 21
     e24:	80 61       	ori	r24, 0x10	; 16
     e26:	85 bb       	out	0x15, r24	; 21
     e28:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     e2c:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     e36:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     e3a:	ce 01       	movw	r24, r28
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	be 01       	movw	r22, r28
     e42:	66 0f       	add	r22, r22
     e44:	77 1f       	adc	r23, r23
     e46:	66 0f       	add	r22, r22
     e48:	77 1f       	adc	r23, r23
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	68 0f       	add	r22, r24
     e50:	79 1f       	adc	r23, r25
     e52:	80 e3       	ldi	r24, 0x30	; 48
     e54:	95 e7       	ldi	r25, 0x75	; 117
     e56:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     e5a:	ab 01       	movw	r20, r22
     e5c:	77 0f       	add	r23, r23
     e5e:	66 0b       	sbc	r22, r22
     e60:	77 0b       	sbc	r23, r23
     e62:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     e66:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     e6a:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     e6e:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     e72:	84 0f       	add	r24, r20
     e74:	95 1f       	adc	r25, r21
     e76:	a6 1f       	adc	r26, r22
     e78:	b7 1f       	adc	r27, r23
     e7a:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     e7e:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     e82:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     e86:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     e8a:	b4 c1       	rjmp	.+872    	; 0x11f4 <startStepperMotor+0x85c>
			case 12:{PORTC = PORTC | (1<<7);
     e8c:	85 b3       	in	r24, 0x15	; 21
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     e92:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     e96:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     ea0:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     ea4:	ce 01       	movw	r24, r28
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	be 01       	movw	r22, r28
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	66 0f       	add	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	68 0f       	add	r22, r24
     eba:	79 1f       	adc	r23, r25
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	95 e7       	ldi	r25, 0x75	; 117
     ec0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     ec4:	ab 01       	movw	r20, r22
     ec6:	77 0f       	add	r23, r23
     ec8:	66 0b       	sbc	r22, r22
     eca:	77 0b       	sbc	r23, r23
     ecc:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     ed0:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     ed4:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     ed8:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     edc:	84 0f       	add	r24, r20
     ede:	95 1f       	adc	r25, r21
     ee0:	a6 1f       	adc	r26, r22
     ee2:	b7 1f       	adc	r27, r23
     ee4:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     ee8:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     eec:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     ef0:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     ef4:	7f c1       	rjmp	.+766    	; 0x11f4 <startStepperMotor+0x85c>
			case 13:{PORTC = PORTC & (~(1<<4));
     ef6:	85 b3       	in	r24, 0x15	; 21
     ef8:	8f 7e       	andi	r24, 0xEF	; 239
     efa:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     efc:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     f00:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     f0a:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     f0e:	ce 01       	movw	r24, r28
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	be 01       	movw	r22, r28
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	66 0f       	add	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	68 0f       	add	r22, r24
     f24:	79 1f       	adc	r23, r25
     f26:	80 e3       	ldi	r24, 0x30	; 48
     f28:	95 e7       	ldi	r25, 0x75	; 117
     f2a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     f2e:	ab 01       	movw	r20, r22
     f30:	77 0f       	add	r23, r23
     f32:	66 0b       	sbc	r22, r22
     f34:	77 0b       	sbc	r23, r23
     f36:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     f3a:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     f3e:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     f42:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     f46:	84 0f       	add	r24, r20
     f48:	95 1f       	adc	r25, r21
     f4a:	a6 1f       	adc	r26, r22
     f4c:	b7 1f       	adc	r27, r23
     f4e:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     f52:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     f56:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     f5a:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     f5e:	4a c1       	rjmp	.+660    	; 0x11f4 <startStepperMotor+0x85c>
			case 14:{PORTC = PORTC | (1<<5);case_num0++;
     f60:	85 b3       	in	r24, 0x15	; 21
     f62:	80 62       	ori	r24, 0x20	; 32
     f64:	85 bb       	out	0x15, r24	; 21
     f66:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     f6a:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     f74:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     f78:	ce 01       	movw	r24, r28
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	be 01       	movw	r22, r28
     f80:	66 0f       	add	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	66 0f       	add	r22, r22
     f8a:	77 1f       	adc	r23, r23
     f8c:	68 0f       	add	r22, r24
     f8e:	79 1f       	adc	r23, r25
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	95 e7       	ldi	r25, 0x75	; 117
     f94:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
     f98:	ab 01       	movw	r20, r22
     f9a:	77 0f       	add	r23, r23
     f9c:	66 0b       	sbc	r22, r22
     f9e:	77 0b       	sbc	r23, r23
     fa0:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
     fa4:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
     fa8:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
     fac:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
     fb0:	84 0f       	add	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	a6 1f       	adc	r26, r22
     fb6:	b7 1f       	adc	r27, r23
     fb8:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
     fbc:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
     fc0:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
     fc4:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
     fc8:	15 c1       	rjmp	.+554    	; 0x11f4 <startStepperMotor+0x85c>
			case 16:{PORTC = PORTC & (~(1<<7));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     fca:	85 b3       	in	r24, 0x15	; 21
     fcc:	8f 77       	andi	r24, 0x7F	; 127
     fce:	85 bb       	out	0x15, r24	; 21
     fd0:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
     fd4:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
     fde:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
     fe2:	ce 01       	movw	r24, r28
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	be 01       	movw	r22, r28
     fea:	66 0f       	add	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	68 0f       	add	r22, r24
     ff8:	79 1f       	adc	r23, r25
     ffa:	80 e3       	ldi	r24, 0x30	; 48
     ffc:	95 e7       	ldi	r25, 0x75	; 117
     ffe:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
    1002:	ab 01       	movw	r20, r22
    1004:	77 0f       	add	r23, r23
    1006:	66 0b       	sbc	r22, r22
    1008:	77 0b       	sbc	r23, r23
    100a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
    100e:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
    1012:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
    1016:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
    101a:	84 0f       	add	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	a6 1f       	adc	r26, r22
    1020:	b7 1f       	adc	r27, r23
    1022:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
    1026:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
    102a:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
    102e:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
    1032:	e0 c0       	rjmp	.+448    	; 0x11f4 <startStepperMotor+0x85c>
			case 17:{PORTC = PORTC | (1<<6);case_num0++;
    1034:	85 b3       	in	r24, 0x15	; 21
    1036:	80 64       	ori	r24, 0x40	; 64
    1038:	85 bb       	out	0x15, r24	; 21
    103a:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
    103e:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
    1048:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
    104c:	ce 01       	movw	r24, r28
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	be 01       	movw	r22, r28
    1054:	66 0f       	add	r22, r22
    1056:	77 1f       	adc	r23, r23
    1058:	66 0f       	add	r22, r22
    105a:	77 1f       	adc	r23, r23
    105c:	66 0f       	add	r22, r22
    105e:	77 1f       	adc	r23, r23
    1060:	68 0f       	add	r22, r24
    1062:	79 1f       	adc	r23, r25
    1064:	80 e3       	ldi	r24, 0x30	; 48
    1066:	95 e7       	ldi	r25, 0x75	; 117
    1068:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
    106c:	ab 01       	movw	r20, r22
    106e:	77 0f       	add	r23, r23
    1070:	66 0b       	sbc	r22, r22
    1072:	77 0b       	sbc	r23, r23
    1074:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
    1078:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
    107c:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
    1080:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
    1084:	84 0f       	add	r24, r20
    1086:	95 1f       	adc	r25, r21
    1088:	a6 1f       	adc	r26, r22
    108a:	b7 1f       	adc	r27, r23
    108c:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
    1090:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
    1094:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
    1098:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
    109c:	ab c0       	rjmp	.+342    	; 0x11f4 <startStepperMotor+0x85c>
			case 18:{PORTC = PORTC & (~(1<<5));case_num0++;
    109e:	85 b3       	in	r24, 0x15	; 21
    10a0:	8f 7d       	andi	r24, 0xDF	; 223
    10a2:	85 bb       	out	0x15, r24	; 21
    10a4:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
    10a8:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
    10b2:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);break;}
    10b6:	ce 01       	movw	r24, r28
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	be 01       	movw	r22, r28
    10be:	66 0f       	add	r22, r22
    10c0:	77 1f       	adc	r23, r23
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	68 0f       	add	r22, r24
    10cc:	79 1f       	adc	r23, r25
    10ce:	80 e3       	ldi	r24, 0x30	; 48
    10d0:	95 e7       	ldi	r25, 0x75	; 117
    10d2:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
    10d6:	ab 01       	movw	r20, r22
    10d8:	77 0f       	add	r23, r23
    10da:	66 0b       	sbc	r22, r22
    10dc:	77 0b       	sbc	r23, r23
    10de:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
    10e2:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
    10e6:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
    10ea:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
    10ee:	84 0f       	add	r24, r20
    10f0:	95 1f       	adc	r25, r21
    10f2:	a6 1f       	adc	r26, r22
    10f4:	b7 1f       	adc	r27, r23
    10f6:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
    10fa:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
    10fe:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
    1102:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
    1106:	76 c0       	rjmp	.+236    	; 0x11f4 <startStepperMotor+0x85c>
			case 19:{PORTC = PORTC & (~(1<<6));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
    1108:	85 b3       	in	r24, 0x15	; 21
    110a:	8f 7b       	andi	r24, 0xBF	; 191
    110c:	85 bb       	out	0x15, r24	; 21
    110e:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
    1112:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
    111c:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
    1120:	ce 01       	movw	r24, r28
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	be 01       	movw	r22, r28
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	68 0f       	add	r22, r24
    1136:	79 1f       	adc	r23, r25
    1138:	80 e3       	ldi	r24, 0x30	; 48
    113a:	95 e7       	ldi	r25, 0x75	; 117
    113c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
    1140:	ab 01       	movw	r20, r22
    1142:	77 0f       	add	r23, r23
    1144:	66 0b       	sbc	r22, r22
    1146:	77 0b       	sbc	r23, r23
    1148:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
    114c:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
    1150:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
    1154:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
    1158:	84 0f       	add	r24, r20
    115a:	95 1f       	adc	r25, r21
    115c:	a6 1f       	adc	r26, r22
    115e:	b7 1f       	adc	r27, r23
    1160:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
    1164:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
    1168:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
    116c:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
    1170:	41 c0       	rjmp	.+130    	; 0x11f4 <startStepperMotor+0x85c>
			case 20:{PORTC = PORTC & (~(1<<4));case_num0++;
    1172:	85 b3       	in	r24, 0x15	; 21
    1174:	8f 7e       	andi	r24, 0xEF	; 239
    1176:	85 bb       	out	0x15, r24	; 21
    1178:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <case_num0>
    117c:	90 91 5e 04 	lds	r25, 0x045E	; 0x80045e <case_num0+0x1>
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <case_num0+0x1>
    1186:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
    118a:	ce 01       	movw	r24, r28
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	be 01       	movw	r22, r28
    1192:	66 0f       	add	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	66 0f       	add	r22, r22
    1198:	77 1f       	adc	r23, r23
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	68 0f       	add	r22, r24
    11a0:	79 1f       	adc	r23, r25
    11a2:	80 e3       	ldi	r24, 0x30	; 48
    11a4:	95 e7       	ldi	r25, 0x75	; 117
    11a6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <__divmodhi4>
    11aa:	ab 01       	movw	r20, r22
    11ac:	77 0f       	add	r23, r23
    11ae:	66 0b       	sbc	r22, r22
    11b0:	77 0b       	sbc	r23, r23
    11b2:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <need_millis0>
    11b6:	90 91 b4 03 	lds	r25, 0x03B4	; 0x8003b4 <need_millis0+0x1>
    11ba:	a0 91 b5 03 	lds	r26, 0x03B5	; 0x8003b5 <need_millis0+0x2>
    11be:	b0 91 b6 03 	lds	r27, 0x03B6	; 0x8003b6 <need_millis0+0x3>
    11c2:	84 0f       	add	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	a6 1f       	adc	r26, r22
    11c8:	b7 1f       	adc	r27, r23
    11ca:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <need_millis0>
    11ce:	90 93 b4 03 	sts	0x03B4, r25	; 0x8003b4 <need_millis0+0x1>
    11d2:	a0 93 b5 03 	sts	0x03B5, r26	; 0x8003b5 <need_millis0+0x2>
    11d6:	b0 93 b6 03 	sts	0x03B6, r27	; 0x8003b6 <need_millis0+0x3>
				break;}
    11da:	0c c0       	rjmp	.+24     	; 0x11f4 <startStepperMotor+0x85c>
			default:{case_num0=NULL;
    11dc:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <case_num0+0x1>
    11e0:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <case_num0>
				prev_millis0=NULL;
    11e4:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <prev_millis0>
    11e8:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <prev_millis0+0x1>
    11ec:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <prev_millis0+0x2>
    11f0:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <prev_millis0+0x3>
	



	
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <ADC_Init>:
#ifndef POTENTIOMETER_H_
#define POTENTIOMETER_H_

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
    11fe:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
    1200:	87 e8       	ldi	r24, 0x87	; 135
    1202:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
    1204:	80 e4       	ldi	r24, 0x40	; 64
    1206:	87 b9       	out	0x07, r24	; 7
    1208:	08 95       	ret

0000120a <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
    120a:	97 b1       	in	r25, 0x07	; 7
    120c:	8f 70       	andi	r24, 0x0F	; 15
    120e:	98 2b       	or	r25, r24
    1210:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
    1212:	86 b1       	in	r24, 0x06	; 6
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
    1218:	34 9b       	sbis	0x06, 4	; 6
    121a:	fe cf       	rjmp	.-4      	; 0x1218 <ADC_Read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121c:	8a e1       	ldi	r24, 0x1A	; 26
    121e:	8a 95       	dec	r24
    1220:	f1 f7       	brne	.-4      	; 0x121e <ADC_Read+0x14>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <ADC_Read+0x1a>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
    1224:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
    1226:	85 b1       	in	r24, 0x05	; 5
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	98 2f       	mov	r25, r24
    122c:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
    122e:	82 0f       	add	r24, r18
    1230:	91 1d       	adc	r25, r1
    1232:	08 95       	ret

00001234 <ADC_Read_Pressure>:
#ifndef MPX4250 PRESSURE SENSOR_H_
#define MPX4250 PRESSURE SENSOR_H_

int ADC_Read_Pressure(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    1234:	87 70       	andi	r24, 0x07	; 7
    1236:	80 64       	ori	r24, 0x40	; 64
    1238:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
    123a:	86 b1       	in	r24, 0x06	; 6
    123c:	80 64       	ori	r24, 0x40	; 64
    123e:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    1240:	34 9b       	sbis	0x06, 4	; 6
    1242:	fe cf       	rjmp	.-4      	; 0x1240 <ADC_Read_Pressure+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
    1244:	86 b1       	in	r24, 0x06	; 6
    1246:	80 61       	ori	r24, 0x10	; 16
    1248:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    124a:	8f ec       	ldi	r24, 0xCF	; 207
    124c:	97 e0       	ldi	r25, 0x07	; 7
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <ADC_Read_Pressure+0x1a>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <ADC_Read_Pressure+0x20>
    1254:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
    1256:	84 b1       	in	r24, 0x04	; 4
    1258:	95 b1       	in	r25, 0x05	; 5
}
    125a:	08 95       	ret

0000125c <get_pressure>:

float get_pressure(int pin)
{
	float kilopascal;
	kilopascal = (ADC_Read_Pressure(pin));
    125c:	0e 94 1a 09 	call	0x1234	; 0x1234 <ADC_Read_Pressure>
    1260:	bc 01       	movw	r22, r24
    1262:	99 0f       	add	r25, r25
    1264:	88 0b       	sbc	r24, r24
    1266:	99 0b       	sbc	r25, r25
    1268:	0e 94 5f 10 	call	0x20be	; 0x20be <__floatsisf>
	kilopascal = ((((kilopascal/1024)-0.04)/0.00369)-3.3);
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5a e3       	ldi	r21, 0x3A	; 58
    1274:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
    1278:	2a e0       	ldi	r18, 0x0A	; 10
    127a:	37 ed       	ldi	r19, 0xD7	; 215
    127c:	43 e2       	ldi	r20, 0x23	; 35
    127e:	5d e3       	ldi	r21, 0x3D	; 61
    1280:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
    1284:	2d ee       	ldi	r18, 0xED	; 237
    1286:	33 ed       	ldi	r19, 0xD3	; 211
    1288:	41 e7       	ldi	r20, 0x71	; 113
    128a:	5b e3       	ldi	r21, 0x3B	; 59
    128c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    1290:	23 e3       	ldi	r18, 0x33	; 51
    1292:	33 e3       	ldi	r19, 0x33	; 51
    1294:	43 e5       	ldi	r20, 0x53	; 83
    1296:	50 e4       	ldi	r21, 0x40	; 64
    1298:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
	return kilopascal;
}
    129c:	08 95       	ret

0000129e <ADC_Read_Temperature>:
#ifndef LM35 TEMPERATURE SENSOR_H_
#define LM35 TEMPERATURE SENSOR_H_

int ADC_Read_Temperature(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    129e:	87 70       	andi	r24, 0x07	; 7
    12a0:	80 64       	ori	r24, 0x40	; 64
    12a2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
    12a4:	86 b1       	in	r24, 0x06	; 6
    12a6:	80 64       	ori	r24, 0x40	; 64
    12a8:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    12aa:	34 9b       	sbis	0x06, 4	; 6
    12ac:	fe cf       	rjmp	.-4      	; 0x12aa <ADC_Read_Temperature+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
    12ae:	86 b1       	in	r24, 0x06	; 6
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	86 b9       	out	0x06, r24	; 6
    12b4:	8f ec       	ldi	r24, 0xCF	; 207
    12b6:	97 e0       	ldi	r25, 0x07	; 7
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <ADC_Read_Temperature+0x1a>
    12bc:	00 c0       	rjmp	.+0      	; 0x12be <ADC_Read_Temperature+0x20>
    12be:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
    12c0:	84 b1       	in	r24, 0x04	; 4
    12c2:	95 b1       	in	r25, 0x05	; 5
}
    12c4:	08 95       	ret

000012c6 <get_Temperature>:

float get_Temperature()
{
	float celsius;
	celsius = (ADC_Read_Temperature(5)*4.88);
    12c6:	85 e0       	ldi	r24, 0x05	; 5
    12c8:	0e 94 4f 09 	call	0x129e	; 0x129e <ADC_Read_Temperature>
    12cc:	bc 01       	movw	r22, r24
    12ce:	99 0f       	add	r25, r25
    12d0:	88 0b       	sbc	r24, r24
    12d2:	99 0b       	sbc	r25, r25
    12d4:	0e 94 5f 10 	call	0x20be	; 0x20be <__floatsisf>
    12d8:	26 ef       	ldi	r18, 0xF6	; 246
    12da:	38 e2       	ldi	r19, 0x28	; 40
    12dc:	4c e9       	ldi	r20, 0x9C	; 156
    12de:	50 e4       	ldi	r21, 0x40	; 64
    12e0:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
	celsius = (celsius/10.00);
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
	return celsius;
}
    12f0:	08 95       	ret

000012f2 <__vector_1>:
            return 0;
        }
    }
}
ISR(INT0_vect)
{ // External interrupt
    12f2:	1f 92       	push	r1
    12f4:	0f 92       	push	r0
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	0f 92       	push	r0
    12fa:	11 24       	eor	r1, r1
    12fc:	2f 93       	push	r18
    12fe:	3f 93       	push	r19
    1300:	4f 93       	push	r20
    1302:	5f 93       	push	r21
    1304:	6f 93       	push	r22
    1306:	7f 93       	push	r23
    1308:	8f 93       	push	r24
    130a:	9f 93       	push	r25
    130c:	af 93       	push	r26
    130e:	bf 93       	push	r27
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31

    OxygenAutomation = !OxygenAutomation;
    1314:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <OxygenAutomation>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 27       	eor	r24, r25
    131c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <OxygenAutomation>

    if (OxygenAutomation)
    1320:	88 23       	and	r24, r24
    1322:	41 f0       	breq	.+16     	; 0x1334 <__vector_1+0x42>
    {
        lcd_cmd(0x01);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("O2 Auto On");
    132a:	88 ed       	ldi	r24, 0xD8	; 216
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1332:	07 c0       	rjmp	.+14     	; 0x1342 <__vector_1+0x50>
    }
    else
    {
        lcd_cmd(0x01);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("O2 Auto Off");
    133a:	83 ee       	ldi	r24, 0xE3	; 227
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1342:	2f e7       	ldi	r18, 0x7F	; 127
    1344:	88 e3       	ldi	r24, 0x38	; 56
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	21 50       	subi	r18, 0x01	; 1
    134a:	80 40       	sbci	r24, 0x00	; 0
    134c:	90 40       	sbci	r25, 0x00	; 0
    134e:	e1 f7       	brne	.-8      	; 0x1348 <__vector_1+0x56>
    1350:	00 c0       	rjmp	.+0      	; 0x1352 <__vector_1+0x60>
    1352:	00 00       	nop
    }
    _delay_ms(50);
    lcd_cmd(0x01);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
}
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__vector_2>:
ISR(INT1_vect)
{ // External interrupt
    137c:	1f 92       	push	r1
    137e:	0f 92       	push	r0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	0f 92       	push	r0
    1384:	11 24       	eor	r1, r1
    1386:	2f 93       	push	r18
    1388:	3f 93       	push	r19
    138a:	4f 93       	push	r20
    138c:	5f 93       	push	r21
    138e:	6f 93       	push	r22
    1390:	7f 93       	push	r23
    1392:	8f 93       	push	r24
    1394:	9f 93       	push	r25
    1396:	af 93       	push	r26
    1398:	bf 93       	push	r27
    139a:	ef 93       	push	r30
    139c:	ff 93       	push	r31
    power = !power;
    139e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <power>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	89 27       	eor	r24, r25
    13a6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <power>
    if (power)
    13aa:	88 23       	and	r24, r24
    13ac:	41 f0       	breq	.+16     	; 0x13be <__vector_2+0x42>
    {
        lcd_cmd(0x01);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("Power On");
    13b4:	8f ee       	ldi	r24, 0xEF	; 239
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    13bc:	07 c0       	rjmp	.+14     	; 0x13cc <__vector_2+0x50>
    }
    else
    {
        lcd_cmd(0x01);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("Power Off");
    13c4:	88 ef       	ldi	r24, 0xF8	; 248
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    13cc:	2f e7       	ldi	r18, 0x7F	; 127
    13ce:	88 e3       	ldi	r24, 0x38	; 56
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	21 50       	subi	r18, 0x01	; 1
    13d4:	80 40       	sbci	r24, 0x00	; 0
    13d6:	90 40       	sbci	r25, 0x00	; 0
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <__vector_2+0x56>
    13da:	00 c0       	rjmp	.+0      	; 0x13dc <__vector_2+0x60>
    13dc:	00 00       	nop
    }
    _delay_ms(50);
    lcd_cmd(0x01);
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
}
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <controlOxygenPercentage>:
    controlSolenoidValve(Oxygen_percentage, rBPM);
    startStepperMotor(rBPM, rBL);
}
void controlOxygenPercentage(int bloodOxygenLevel)
{
    if (bloodOxygenLevel < 40)
    1406:	88 32       	cpi	r24, 0x28	; 40
    1408:	91 05       	cpc	r25, r1
    140a:	3c f4       	brge	.+14     	; 0x141a <controlOxygenPercentage+0x14>
    {
        Oxygen_percentage = 90;
    140c:	8a e5       	ldi	r24, 0x5A	; 90
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1414:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1418:	08 95       	ret
    }
    else if (bloodOxygenLevel < 70)
    141a:	86 34       	cpi	r24, 0x46	; 70
    141c:	91 05       	cpc	r25, r1
    141e:	3c f4       	brge	.+14     	; 0x142e <controlOxygenPercentage+0x28>
    {
        Oxygen_percentage = 70;
    1420:	86 e4       	ldi	r24, 0x46	; 70
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1428:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    142c:	08 95       	ret
    }
    else if (bloodOxygenLevel < 90)
    142e:	8a 35       	cpi	r24, 0x5A	; 90
    1430:	91 05       	cpc	r25, r1
    1432:	3c f4       	brge	.+14     	; 0x1442 <controlOxygenPercentage+0x3c>
    {
        Oxygen_percentage = 60;
    1434:	8c e3       	ldi	r24, 0x3C	; 60
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    143c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1440:	08 95       	ret
    }
    else if (bloodOxygenLevel < 94)
    1442:	8e 35       	cpi	r24, 0x5E	; 94
    1444:	91 05       	cpc	r25, r1
    1446:	34 f4       	brge	.+12     	; 0x1454 <controlOxygenPercentage+0x4e>
    {
        Oxygen_percentage = 40;
    1448:	88 e2       	ldi	r24, 0x28	; 40
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1450:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1454:	08 95       	ret

00001456 <getOxygenTankPressure>:
    }
}

double getOxygenTankPressure()
{
    float kilopascal = get_pressure(1); 
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 2e 09 	call	0x125c	; 0x125c <get_pressure>
	return kilopascal*1000; // return Oxygen tank pressure in pascal
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a e7       	ldi	r20, 0x7A	; 122
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
}
    146a:	08 95       	ret

0000146c <controlSolenoidValve>:
    }
    // update variable Oxygen Percentage According to Blood Oxygen Level
}

void controlSolenoidValve(double oxygenPercentage, int breathPerMin)
{
    146c:	4f 92       	push	r4
    146e:	5f 92       	push	r5
    1470:	6f 92       	push	r6
    1472:	7f 92       	push	r7
    1474:	8f 92       	push	r8
    1476:	9f 92       	push	r9
    1478:	af 92       	push	r10
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	6b 01       	movw	r12, r22
    1486:	7c 01       	movw	r14, r24
    double inflationTime = 30.0000 / breathPerMin;
    1488:	ba 01       	movw	r22, r20
    148a:	55 0f       	add	r21, r21
    148c:	88 0b       	sbc	r24, r24
    148e:	99 0b       	sbc	r25, r25
    1490:	0e 94 5f 10 	call	0x20be	; 0x20be <__floatsisf>
    1494:	9b 01       	movw	r18, r22
    1496:	ac 01       	movw	r20, r24
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	80 ef       	ldi	r24, 0xF0	; 240
    149e:	91 e4       	ldi	r25, 0x41	; 65
    14a0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    14a4:	4b 01       	movw	r8, r22
    14a6:	5c 01       	movw	r10, r24
    double constValue;
    double Pressure = 101325;
    double airDensity = 1.225;
    double OxygenDensity = 1.355;

    constValue = (0.79 * (1.266 * oxygenPercentage - 26.67) / (100 - oxygenPercentage)) * sqrt(Pressure * OxygenDensity / getOxygenTankPressure() / airDensity);
    14a8:	2a e4       	ldi	r18, 0x4A	; 74
    14aa:	3c e0       	ldi	r19, 0x0C	; 12
    14ac:	42 ea       	ldi	r20, 0xA2	; 162
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
    14b8:	29 e2       	ldi	r18, 0x29	; 41
    14ba:	3c e5       	ldi	r19, 0x5C	; 92
    14bc:	45 ed       	ldi	r20, 0xD5	; 213
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
    14c4:	21 e7       	ldi	r18, 0x71	; 113
    14c6:	3d e3       	ldi	r19, 0x3D	; 61
    14c8:	4a e4       	ldi	r20, 0x4A	; 74
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
    14d0:	2b 01       	movw	r4, r22
    14d2:	3c 01       	movw	r6, r24
    14d4:	a7 01       	movw	r20, r14
    14d6:	96 01       	movw	r18, r12
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	92 e4       	ldi	r25, 0x42	; 66
    14e0:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
    14e4:	9b 01       	movw	r18, r22
    14e6:	ac 01       	movw	r20, r24
    14e8:	c3 01       	movw	r24, r6
    14ea:	b2 01       	movw	r22, r4
    14ec:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    14f0:	2b 01       	movw	r4, r22
    14f2:	3c 01       	movw	r6, r24
    14f4:	0e 94 2b 0a 	call	0x1456	; 0x1456 <getOxygenTankPressure>
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	68 ed       	ldi	r22, 0xD8	; 216
    14fe:	73 e1       	ldi	r23, 0x13	; 19
    1500:	86 e0       	ldi	r24, 0x06	; 6
    1502:	98 e4       	ldi	r25, 0x48	; 72
    1504:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    1508:	6b 01       	movw	r12, r22
    150a:	7c 01       	movw	r14, r24
    150c:	2d ec       	ldi	r18, 0xCD	; 205
    150e:	3c ec       	ldi	r19, 0xCC	; 204
    1510:	4c e9       	ldi	r20, 0x9C	; 156
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	c7 01       	movw	r24, r14
    1516:	b6 01       	movw	r22, r12
    1518:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    151c:	0e 94 87 11 	call	0x230e	; 0x230e <sqrt>
    1520:	9b 01       	movw	r18, r22
    1522:	ac 01       	movw	r20, r24
    1524:	c3 01       	movw	r24, r6
    1526:	b2 01       	movw	r22, r4
    1528:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
    152c:	6b 01       	movw	r12, r22
    152e:	7c 01       	movw	r14, r24
    if (constValue > 1)
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
    153c:	18 16       	cp	r1, r24
    153e:	5c f4       	brge	.+22     	; 0x1556 <controlSolenoidValve+0xea>
    {
        tOxygen = inflationTime;
        tAir = tOxygen / constValue;
    1540:	a7 01       	movw	r20, r14
    1542:	96 01       	movw	r18, r12
    1544:	c5 01       	movw	r24, r10
    1546:	b4 01       	movw	r22, r8
    1548:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
        openSolenoidValves(tAir, tOxygen); // values in s
    154c:	a5 01       	movw	r20, r10
    154e:	94 01       	movw	r18, r8
    1550:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <openSolenoidValves>
    1554:	0c c0       	rjmp	.+24     	; 0x156e <controlSolenoidValve+0x102>
    }
    else
    {
        tAir = inflationTime;
        tOxygen = tAir * constValue;
    1556:	a7 01       	movw	r20, r14
    1558:	96 01       	movw	r18, r12
    155a:	c5 01       	movw	r24, r10
    155c:	b4 01       	movw	r22, r8
    155e:	0e 94 14 11 	call	0x2228	; 0x2228 <__mulsf3>
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
        openSolenoidValves(tAir, tOxygen); // values in s
    1566:	c5 01       	movw	r24, r10
    1568:	b4 01       	movw	r22, r8
    156a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <openSolenoidValves>
    }
}
    156e:	ff 90       	pop	r15
    1570:	ef 90       	pop	r14
    1572:	df 90       	pop	r13
    1574:	cf 90       	pop	r12
    1576:	bf 90       	pop	r11
    1578:	af 90       	pop	r10
    157a:	9f 90       	pop	r9
    157c:	8f 90       	pop	r8
    157e:	7f 90       	pop	r7
    1580:	6f 90       	pop	r6
    1582:	5f 90       	pop	r5
    1584:	4f 90       	pop	r4
    1586:	08 95       	ret

00001588 <startAirSupply>:
	return kilopascal*1000; // return Oxygen tank pressure in pascal
}

void startAirSupply()
{
    startStepperMotor(rBPM, rBL);
    1588:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <rBL>
    158c:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <rBL+0x1>
    1590:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <rBPM>
    1594:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <rBPM+0x1>
    1598:	0e 94 cc 04 	call	0x998	; 0x998 <startStepperMotor>
    controlSolenoidValve(0, rBPM);
    159c:	40 91 59 04 	lds	r20, 0x0459	; 0x800459 <rBPM>
    15a0:	50 91 5a 04 	lds	r21, 0x045A	; 0x80045a <rBPM+0x1>
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	cb 01       	movw	r24, r22
    15aa:	0e 94 36 0a 	call	0x146c	; 0x146c <controlSolenoidValve>
    15ae:	08 95       	ret

000015b0 <checkBloodOxygenLevel>:
}
int checkBloodOxygenLevel()
{

    return 39; // return Blood Oxygen Level
}
    15b0:	87 e2       	ldi	r24, 0x27	; 39
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	08 95       	ret

000015b6 <startOxygenAndAirSupply>:
    _delay_ms(50);
    lcd_cmd(0x01);
}

void startOxygenAndAirSupply(int percentage)
{
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    controlOxygenPercentage(checkBloodOxygenLevel());
    15ba:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <checkBloodOxygenLevel>
    15be:	0e 94 03 0a 	call	0x1406	; 0x1406 <controlOxygenPercentage>
    controlSolenoidValve(Oxygen_percentage, rBPM);
    15c2:	c0 91 59 04 	lds	r28, 0x0459	; 0x800459 <rBPM>
    15c6:	d0 91 5a 04 	lds	r29, 0x045A	; 0x80045a <rBPM+0x1>
    15ca:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Oxygen_percentage>
    15ce:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    15d2:	07 2e       	mov	r0, r23
    15d4:	00 0c       	add	r0, r0
    15d6:	88 0b       	sbc	r24, r24
    15d8:	99 0b       	sbc	r25, r25
    15da:	0e 94 5f 10 	call	0x20be	; 0x20be <__floatsisf>
    15de:	ae 01       	movw	r20, r28
    15e0:	0e 94 36 0a 	call	0x146c	; 0x146c <controlSolenoidValve>
    startStepperMotor(rBPM, rBL);
    15e4:	60 91 57 04 	lds	r22, 0x0457	; 0x800457 <rBL>
    15e8:	70 91 58 04 	lds	r23, 0x0458	; 0x800458 <rBL+0x1>
    15ec:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <rBPM>
    15f0:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <rBPM+0x1>
    15f4:	0e 94 cc 04 	call	0x998	; 0x998 <startStepperMotor>
}
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <PatientTemp>:
}

int PatientTemp()
{
	float temp;
	temp= get_Temperature();
    15fe:	0e 94 63 09 	call	0x12c6	; 0x12c6 <get_Temperature>
    return temp; // return temperature value
    1602:	0e 94 27 10 	call	0x204e	; 0x204e <__fixsfsi>
}
    1606:	cb 01       	movw	r24, r22
    1608:	08 95       	ret

0000160a <notifySpeaker>:

void notifySpeaker()
{
    DDRD = DDRD | (1 << 4);
    160a:	81 b3       	in	r24, 0x11	; 17
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	81 bb       	out	0x11, r24	; 17
    1610:	08 95       	ret

00001612 <getParametersFromKnobs>:
}

void getParametersFromKnobs()
{

    Oxygen_percentage = rOP;
    1612:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <rOP>
    1616:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <rOP+0x1>
    161a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    161e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1622:	08 95       	ret

00001624 <automationOn>:
}

bool automationOn()
{
    return OxygenAutomation; // Check Automation On/Off
}
    1624:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OxygenAutomation>
    1628:	08 95       	ret

0000162a <turnOn>:

bool turnOn()
{
    return power; // return 1 if power on switched pressed else return 0
}
    162a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <power>
    162e:	08 95       	ret

00001630 <notifyDisplay>:
    }
}

void notifyDisplay(const char *string)
{
    lcd_msg(string);
    1630:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    lcd_cmd(0x01);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    163a:	08 95       	ret

0000163c <checkPower>:
}

bool checkPower()
{
    if ((PINA & (1 << PINA7)) == (1 << PINA7))
    163c:	cf 9b       	sbis	0x19, 7	; 25
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <checkPower+0x8>
    {
        return 1; // pin is high
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	08 95       	ret
    }
    else
    {
        return 0; // pin is low
    1644:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    1646:	08 95       	ret

00001648 <concatS>:
    itoa(percentage, Spercentage, 10); // convert int to string

    sendSMS(Mobile_no, concatS(string, Spercentage));
}
const char *concatS(const char *string, char sPercentage[4])
{
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	8c 01       	movw	r16, r24
    1656:	eb 01       	movw	r28, r22
    char *result = malloc(strlen(string) + strlen(sPercentage) + 1);
    1658:	fc 01       	movw	r30, r24
    165a:	01 90       	ld	r0, Z+
    165c:	00 20       	and	r0, r0
    165e:	e9 f7       	brne	.-6      	; 0x165a <concatS+0x12>
    1660:	31 97       	sbiw	r30, 0x01	; 1
    1662:	cf 01       	movw	r24, r30
    1664:	80 1b       	sub	r24, r16
    1666:	91 0b       	sbc	r25, r17
    1668:	fb 01       	movw	r30, r22
    166a:	01 90       	ld	r0, Z+
    166c:	00 20       	and	r0, r0
    166e:	e9 f7       	brne	.-6      	; 0x166a <concatS+0x22>
    1670:	31 97       	sbiw	r30, 0x01	; 1
    1672:	e6 1b       	sub	r30, r22
    1674:	f7 0b       	sbc	r31, r23
    1676:	8e 0f       	add	r24, r30
    1678:	9f 1f       	adc	r25, r31
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	0e 94 2c 12 	call	0x2458	; 0x2458 <malloc>
    1680:	7c 01       	movw	r14, r24
    strcpy(result, string);
    1682:	b8 01       	movw	r22, r16
    1684:	0e 94 58 13 	call	0x26b0	; 0x26b0 <strcpy>
    strcat(result, sPercentage);
    1688:	be 01       	movw	r22, r28
    168a:	c7 01       	movw	r24, r14
    168c:	0e 94 4d 13 	call	0x269a	; 0x269a <strcat>
    return result;
}
    1690:	c7 01       	movw	r24, r14
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	08 95       	ret

000016a0 <notifyGSM>:
        return 0; // pin is low
    }
}

void notifyGSM(const char *string, int percentage)
{
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <notifyGSM+0xa>
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <notifyGSM+0xc>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	8c 01       	movw	r16, r24
    16b2:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    16b4:	4a e0       	ldi	r20, 0x0A	; 10
    16b6:	be 01       	movw	r22, r28
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
    char Spercentage[4];
    itoa(percentage, Spercentage, 10); // convert int to string

    sendSMS(Mobile_no, concatS(string, Spercentage));
    16c0:	be 01       	movw	r22, r28
    16c2:	6f 5f       	subi	r22, 0xFF	; 255
    16c4:	7f 4f       	sbci	r23, 0xFF	; 255
    16c6:	c8 01       	movw	r24, r16
    16c8:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    16cc:	bc 01       	movw	r22, r24
    16ce:	85 e0       	ldi	r24, 0x05	; 5
    16d0:	95 e0       	ldi	r25, 0x05	; 5
    16d2:	0e 94 20 02 	call	0x440	; 0x440 <sendSMS>
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <checkPatientTemp>:
{
    DDRD = DDRD | (1 << 4);
}

bool checkPatientTemp()
{
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <checkPatientTemp+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <checkPatientTemp+0x8>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    if (PatientTemp() > 37.2 || PatientTemp() < 36.1)
    16f4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <PatientTemp>
    16f8:	bc 01       	movw	r22, r24
    16fa:	99 0f       	add	r25, r25
    16fc:	88 0b       	sbc	r24, r24
    16fe:	99 0b       	sbc	r25, r25
    1700:	0e 94 5f 10 	call	0x20be	; 0x20be <__floatsisf>
    1704:	2d ec       	ldi	r18, 0xCD	; 205
    1706:	3c ec       	ldi	r19, 0xCC	; 204
    1708:	44 e1       	ldi	r20, 0x14	; 20
    170a:	52 e4       	ldi	r21, 0x42	; 66
    170c:	0e 94 0f 11 	call	0x221e	; 0x221e <__gesf2>
    1710:	18 16       	cp	r1, r24
    1712:	84 f0       	brlt	.+32     	; 0x1734 <checkPatientTemp+0x4c>
    1714:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <PatientTemp>
    1718:	bc 01       	movw	r22, r24
    171a:	99 0f       	add	r25, r25
    171c:	88 0b       	sbc	r24, r24
    171e:	99 0b       	sbc	r25, r25
    1720:	0e 94 5f 10 	call	0x20be	; 0x20be <__floatsisf>
    1724:	26 e6       	ldi	r18, 0x66	; 102
    1726:	36 e6       	ldi	r19, 0x66	; 102
    1728:	40 e1       	ldi	r20, 0x10	; 16
    172a:	52 e4       	ldi	r21, 0x42	; 66
    172c:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__cmpsf2>
    1730:	88 23       	and	r24, r24
    1732:	e4 f4       	brge	.+56     	; 0x176c <checkPatientTemp+0x84>
    {
        notifyGSM("Temperature Not Normal-", PatientTemp());
    1734:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <PatientTemp>
    1738:	bc 01       	movw	r22, r24
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <notifyGSM>
        char Spercentage[4];
        itoa(PatientTemp(), Spercentage, 10); // convert int to string
    1742:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <PatientTemp>
    1746:	4a e0       	ldi	r20, 0x0A	; 10
    1748:	be 01       	movw	r22, r28
    174a:	6f 5f       	subi	r22, 0xFF	; 255
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
        notifyDisplay(concatS("Abnormal Temp-", Spercentage));
    1752:	be 01       	movw	r22, r28
    1754:	6f 5f       	subi	r22, 0xFF	; 255
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	8a e1       	ldi	r24, 0x1A	; 26
    175a:	91 e0       	ldi	r25, 0x01	; 1
    175c:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1760:	0e 94 18 0b 	call	0x1630	; 0x1630 <notifyDisplay>
        notifySpeaker();
    1764:	0e 94 05 0b 	call	0x160a	; 0x160a <notifySpeaker>
        return 0;
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	01 c0       	rjmp	.+2      	; 0x176e <checkPatientTemp+0x86>
    }
    else
    {
        return 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    }
    // if normal return 1 else notify speaker and gsm
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <oxygenTankPercentage>:

int oxygenTankPercentage()
{
	float x;
	int y;
	x=getOxygenTankPressure();
    177c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <getOxygenTankPressure>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
	y= (100-((300000-x)/3000));
    1784:	60 e0       	ldi	r22, 0x00	; 0
    1786:	7c e7       	ldi	r23, 0x7C	; 124
    1788:	82 e9       	ldi	r24, 0x92	; 146
    178a:	98 e4       	ldi	r25, 0x48	; 72
    178c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e8       	ldi	r19, 0x80	; 128
    1794:	4b e3       	ldi	r20, 0x3B	; 59
    1796:	55 e4       	ldi	r21, 0x45	; 69
    1798:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divsf3>
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	88 ec       	ldi	r24, 0xC8	; 200
    17a6:	92 e4       	ldi	r25, 0x42	; 66
    17a8:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__subsf3>
    17ac:	0e 94 27 10 	call	0x204e	; 0x204e <__fixsfsi>
    return y;
}
    17b0:	cb 01       	movw	r24, r22
    17b2:	08 95       	ret

000017b4 <checkStatus>:
{
    return power; // return 1 if power on switched pressed else return 0
}

bool checkStatus()
{
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <checkStatus+0x8>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <checkStatus+0xa>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    if (turnOn())
    17c2:	0e 94 15 0b 	call	0x162a	; 0x162a <turnOn>
    17c6:	18 2f       	mov	r17, r24
    17c8:	88 23       	and	r24, r24
    17ca:	e9 f1       	breq	.+122    	; 0x1846 <checkStatus+0x92>
    {
        if (oxygenTankPercentage() < 10)
    17cc:	0e 94 be 0b 	call	0x177c	; 0x177c <oxygenTankPercentage>
    17d0:	0a 97       	sbiw	r24, 0x0a	; 10
    17d2:	c4 f4       	brge	.+48     	; 0x1804 <checkStatus+0x50>
        {
            notifyGSM("Oxygen Tank Percentage : ", oxygenTankPercentage());
    17d4:	0e 94 be 0b 	call	0x177c	; 0x177c <oxygenTankPercentage>
    17d8:	bc 01       	movw	r22, r24
    17da:	89 e2       	ldi	r24, 0x29	; 41
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <notifyGSM>
            char Spercentage[4];
            itoa(oxygenTankPercentage(), Spercentage, 10); // convert int to string
    17e2:	0e 94 be 0b 	call	0x177c	; 0x177c <oxygenTankPercentage>
    17e6:	4a e0       	ldi	r20, 0x0A	; 10
    17e8:	be 01       	movw	r22, r28
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
            notifyDisplay(concatS("OxyTank % ", Spercentage));
    17f2:	be 01       	movw	r22, r28
    17f4:	6f 5f       	subi	r22, 0xFF	; 255
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	83 e4       	ldi	r24, 0x43	; 67
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1800:	0e 94 18 0b 	call	0x1630	; 0x1630 <notifyDisplay>
        }
        if (!checkPower())
    1804:	0e 94 1e 0b 	call	0x163c	; 0x163c <checkPower>
    1808:	81 11       	cpse	r24, r1
    180a:	16 c0       	rjmp	.+44     	; 0x1838 <checkStatus+0x84>
        {
            if (powerfailure == NULL)
    180c:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <powerfailure>
    1810:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <powerfailure+0x1>
    1814:	89 2b       	or	r24, r25
    1816:	69 f4       	brne	.+26     	; 0x1832 <checkStatus+0x7e>
            {
                lcd_msg("POWER FAILURE");
    1818:	8e e4       	ldi	r24, 0x4E	; 78
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
                lcd_cmd(0x01);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
                powerfailure = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <powerfailure+0x1>
    182e:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <powerfailure>
            }
            notifySpeaker();
    1832:	0e 94 05 0b 	call	0x160a	; 0x160a <notifySpeaker>
    1836:	07 c0       	rjmp	.+14     	; 0x1846 <checkStatus+0x92>
        }
        else
        {
            powerfailure = NULL;
    1838:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <powerfailure+0x1>
    183c:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <powerfailure>
            DDRD = DDRD | (0 << 4);
    1840:	91 b3       	in	r25, 0x11	; 17
    1842:	91 bb       	out	0x11, r25	; 17
        }
        return 1;
    1844:	18 2f       	mov	r17, r24
    }
    else
    {
        return 0;
    }
}
    1846:	81 2f       	mov	r24, r17
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	08 95       	ret

00001858 <checkPatientExpPresure>:
	y= (100-((300000-x)/3000));
    return y;
}
int checkPatientExpPresure()
{
	float kilopascal = get_pressure(2);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 2e 09 	call	0x125c	; 0x125c <get_pressure>
	return kilopascal; // return patient expiration pressure in kilopascal
    1860:	0e 94 27 10 	call	0x204e	; 0x204e <__fixsfsi>
}
    1864:	cb 01       	movw	r24, r22
    1866:	08 95       	ret

00001868 <Set_Heart_Rate>:

int Set_Heart_Rate()
{
	return 80;
    1868:	80 e5       	ldi	r24, 0x50	; 80
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	08 95       	ret

0000186e <main>:
unsigned long case_num2;
unsigned long prev_millis2;
unsigned long need_millis2;

int main(void)
{
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <main+0xa>
    1878:	00 d0       	rcall	.+0      	; 0x187a <main+0xc>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62

    DDRC = DDRC | (1 << 2); // solenoid valve
    187e:	84 b3       	in	r24, 0x14	; 20
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 3); // solenoid valve
    1884:	84 b3       	in	r24, 0x14	; 20
    1886:	88 60       	ori	r24, 0x08	; 8
    1888:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 4); // stepper motor
    188a:	84 b3       	in	r24, 0x14	; 20
    188c:	80 61       	ori	r24, 0x10	; 16
    188e:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 5); // stepper motor
    1890:	84 b3       	in	r24, 0x14	; 20
    1892:	80 62       	ori	r24, 0x20	; 32
    1894:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 6); // stepper motor
    1896:	84 b3       	in	r24, 0x14	; 20
    1898:	80 64       	ori	r24, 0x40	; 64
    189a:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 7); // stepper motor
    189c:	84 b3       	in	r24, 0x14	; 20
    189e:	80 68       	ori	r24, 0x80	; 128
    18a0:	84 bb       	out	0x14, r24	; 20

    DDRB = 0x0F;            // 0,1,3,2--->1   4,5,6,7-->0 for keypad
    18a2:	8f e0       	ldi	r24, 0x0F	; 15
    18a4:	87 bb       	out	0x17, r24	; 23
    DDRD = DDRD | (0 << 2); // PD2 as Oxygen Automation
    18a6:	81 b3       	in	r24, 0x11	; 17
    18a8:	81 bb       	out	0x11, r24	; 17
    DDRD = DDRD | (0 << 3); // PD3 as input for power on
    18aa:	81 b3       	in	r24, 0x11	; 17
    18ac:	81 bb       	out	0x11, r24	; 17
    DDRD = DDRD | (1 << 4); // Speaker
    18ae:	81 b3       	in	r24, 0x11	; 17
    18b0:	80 61       	ori	r24, 0x10	; 16
    18b2:	81 bb       	out	0x11, r24	; 17
    DDRA = DDRA | (0 << 7); // PA7 as input for power supply
    18b4:	8a b3       	in	r24, 0x1a	; 26
    18b6:	8a bb       	out	0x1a, r24	; 26

    MCUCR |= 1 << ISC01; // interrupt fire on falling edge in INT0
    18b8:	85 b7       	in	r24, 0x35	; 53
    18ba:	82 60       	ori	r24, 0x02	; 2
    18bc:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 1 << ISC11; // interrupt fire on falling edge in INT1
    18be:	85 b7       	in	r24, 0x35	; 53
    18c0:	88 60       	ori	r24, 0x08	; 8
    18c2:	85 bf       	out	0x35, r24	; 53

    //
    GICR |= 1 << INT0; // Enable the external interrupt source in general interrupt control register
    18c4:	8b b7       	in	r24, 0x3b	; 59
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	8b bf       	out	0x3b, r24	; 59
    GICR |= 1 << INT1; // Enable the external interrupt source in general interrupt control register
    18ca:	8b b7       	in	r24, 0x3b	; 59
    18cc:	80 68       	ori	r24, 0x80	; 128
    18ce:	8b bf       	out	0x3b, r24	; 59

    init_millis(8000000UL);
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	72 e1       	ldi	r23, 0x12	; 18
    18d4:	8a e7       	ldi	r24, 0x7A	; 122
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <init_millis>
    sei();
    18dc:	78 94       	sei
    ADC_Init();
    18de:	0e 94 ff 08 	call	0x11fe	; 0x11fe <ADC_Init>
    i2c_init();
    18e2:	0e 94 c5 01 	call	0x38a	; 0x38a <i2c_init>
    i2c_start();
    18e6:	0e 94 cb 01 	call	0x396	; 0x396 <i2c_start>
    i2c_write(0x70);
    18ea:	80 e7       	ldi	r24, 0x70	; 112
    18ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_write>
    lcd_init();
    18f0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_init>

    lcd_cmd(0x80);
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    lcd_msg("Enter Phone");
    18fa:	8c e5       	ldi	r24, 0x5C	; 92
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1902:	8f e5       	ldi	r24, 0x5F	; 95
    1904:	9a ee       	ldi	r25, 0xEA	; 234
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <main+0x98>
    190a:	00 c0       	rjmp	.+0      	; 0x190c <main+0x9e>
    190c:	00 00       	nop
    _delay_ms(30);
    lcd_cmd(0xC0);
    190e:	80 ec       	ldi	r24, 0xC0	; 192
    1910:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    1914:	8f e1       	ldi	r24, 0x1F	; 31
    1916:	9e e4       	ldi	r25, 0x4E	; 78
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <main+0xaa>
    191c:	00 c0       	rjmp	.+0      	; 0x191e <main+0xb0>
    191e:	00 00       	nop
    _delay_ms(10);
    lcd_msg("Number");
    1920:	88 e6       	ldi	r24, 0x68	; 104
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1928:	8f e5       	ldi	r24, 0x5F	; 95
    192a:	9a ee       	ldi	r25, 0xEA	; 234
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <main+0xbe>
    1930:	00 c0       	rjmp	.+0      	; 0x1932 <main+0xc4>
    1932:	00 00       	nop
    _delay_ms(30);
    lcd_cmd(0x01);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    193a:	9f ef       	ldi	r25, 0xFF	; 255
    193c:	20 e7       	ldi	r18, 0x70	; 112
    193e:	42 e0       	ldi	r20, 0x02	; 2
    1940:	91 50       	subi	r25, 0x01	; 1
    1942:	20 40       	sbci	r18, 0x00	; 0
    1944:	40 40       	sbci	r20, 0x00	; 0
    1946:	e1 f7       	brne	.-8      	; 0x1940 <main+0xd2>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <main+0xdc>
    194a:	00 00       	nop
    _delay_ms(100);
    lcd_cmd(0x80);
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>

initialPoint:
    lcd_cmd(0x01);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>

    PORTB = 0xF0;
    1958:	80 ef       	ldi	r24, 0xF0	; 240
    195a:	88 bb       	out	0x18, r24	; 24
    int f = 0;
    195c:	00 e0       	ldi	r16, 0x00	; 0
    195e:	10 e0       	ldi	r17, 0x00	; 0
    do
    {
        x = Keypad();
    1960:	0e 94 5c 00 	call	0xb8	; 0xb8 <Keypad>
    1964:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <x>

        Mobile_no[f] = x;
    1968:	f8 01       	movw	r30, r16
    196a:	eb 5f       	subi	r30, 0xFB	; 251
    196c:	fa 4f       	sbci	r31, 0xFA	; 250
    196e:	80 83       	st	Z, r24
        if (((PINB & (1 << PINB4)) == 0) || ((PINB & (1 << PINB5)) == 0) || ((PINB & (1 << PINB6)) == 0))
    1970:	b4 9b       	sbis	0x16, 4	; 22
    1972:	04 c0       	rjmp	.+8      	; 0x197c <main+0x10e>
    1974:	b5 9b       	sbis	0x16, 5	; 22
    1976:	02 c0       	rjmp	.+4      	; 0x197c <main+0x10e>
    1978:	b6 99       	sbic	0x16, 6	; 22
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <main+0x112>
        {
            f++;
    197c:	0f 5f       	subi	r16, 0xFF	; 255
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        lcd_msg(x);
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1986:	5f e7       	ldi	r21, 0x7F	; 127
    1988:	85 eb       	ldi	r24, 0xB5	; 181
    198a:	91 e0       	ldi	r25, 0x01	; 1
    198c:	51 50       	subi	r21, 0x01	; 1
    198e:	80 40       	sbci	r24, 0x00	; 0
    1990:	90 40       	sbci	r25, 0x00	; 0
    1992:	e1 f7       	brne	.-8      	; 0x198c <main+0x11e>
    1994:	00 c0       	rjmp	.+0      	; 0x1996 <main+0x128>
    1996:	00 00       	nop
        _delay_ms(70);

        if ((PINB & (1 << PINB4)) == 0) // clr button
    1998:	b4 9b       	sbis	0x16, 4	; 22
    199a:	db cf       	rjmp	.-74     	; 0x1952 <main+0xe4>
        {
            goto initialPoint;
        }
        if ((PINB & (1 << PINB6)) == 0) // ok button
    199c:	b6 9b       	sbis	0x16, 6	; 22
    199e:	03 c0       	rjmp	.+6      	; 0x19a6 <main+0x138>
        {
            break;
        }

    } while (PINB != 0xF0);
    19a0:	86 b3       	in	r24, 0x16	; 22
    19a2:	80 3f       	cpi	r24, 0xF0	; 240
    19a4:	e9 f6       	brne	.-70     	; 0x1960 <main+0xf2>

    lcd_cmd(0x01);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        _delay_ms(50);
    }
    _delay_ms(100);
    lcd_cmd(0x01);*/

    lcd_cmd(0x80);
    19ac:	80 e8       	ldi	r24, 0x80	; 128
    19ae:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    lcd_msg("Number");
    19b2:	88 e6       	ldi	r24, 0x68	; 104
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    lcd_cmd(0xc0);
    19ba:	80 ec       	ldi	r24, 0xC0	; 192
    19bc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    lcd_msg("Registered");
    19c0:	8f e6       	ldi	r24, 0x6F	; 111
    19c2:	91 e0       	ldi	r25, 0x01	; 1
    19c4:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    19c8:	2f ef       	ldi	r18, 0xFF	; 255
    19ca:	40 e7       	ldi	r20, 0x70	; 112
    19cc:	52 e0       	ldi	r21, 0x02	; 2
    19ce:	21 50       	subi	r18, 0x01	; 1
    19d0:	40 40       	sbci	r20, 0x00	; 0
    19d2:	50 40       	sbci	r21, 0x00	; 0
    19d4:	e1 f7       	brne	.-8      	; 0x19ce <main+0x160>
    19d6:	00 c0       	rjmp	.+0      	; 0x19d8 <main+0x16a>
    19d8:	00 00       	nop
    _delay_ms(100);
    lcd_cmd(0x01);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>

    USART_Init(9600);
    19e0:	60 e8       	ldi	r22, 0x80	; 128
    19e2:	75 e2       	ldi	r23, 0x25	; 37
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <USART_Init>
    19ec:	8f ef       	ldi	r24, 0xFF	; 255
    19ee:	99 e6       	ldi	r25, 0x69	; 105
    19f0:	28 e1       	ldi	r18, 0x18	; 24
    19f2:	81 50       	subi	r24, 0x01	; 1
    19f4:	90 40       	sbci	r25, 0x00	; 0
    19f6:	20 40       	sbci	r18, 0x00	; 0
    19f8:	e1 f7       	brne	.-8      	; 0x19f2 <main+0x184>
    19fa:	00 c0       	rjmp	.+0      	; 0x19fc <main+0x18e>
    19fc:	00 00       	nop
    _delay_ms(1000);
    GSMConnect();
    19fe:	0e 94 90 02 	call	0x520	; 0x520 <GSMConnect>
    sendSMS(Mobile_no, "test");
    1a02:	6a e7       	ldi	r22, 0x7A	; 122
    1a04:	71 e0       	ldi	r23, 0x01	; 1
    1a06:	85 e0       	ldi	r24, 0x05	; 5
    1a08:	95 e0       	ldi	r25, 0x05	; 5
    1a0a:	0e 94 20 02 	call	0x440	; 0x440 <sendSMS>

    while (1)
    {
		
		if(prev_millis2==NULL){
    1a0e:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <prev_millis2>
    1a12:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <prev_millis2+0x1>
    1a16:	89 2b       	or	r24, r25
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <main+0x1ae>
    1a1a:	84 c0       	rjmp	.+264    	; 0x1b24 <main+0x2b6>
			
			prev_millis2=millis();
    1a1c:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
    1a20:	60 93 af 03 	sts	0x03AF, r22	; 0x8003af <prev_millis2>
    1a24:	70 93 b0 03 	sts	0x03B0, r23	; 0x8003b0 <prev_millis2+0x1>
    1a28:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <prev_millis2+0x2>
    1a2c:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <prev_millis2+0x3>
			need_millis2=500+prev_millis2;
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8c 50       	subi	r24, 0x0C	; 12
    1a36:	9e 4f       	sbci	r25, 0xFE	; 254
    1a38:	af 4f       	sbci	r26, 0xFF	; 255
    1a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3c:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <need_millis2>
    1a40:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <need_millis2+0x1>
    1a44:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <need_millis2+0x2>
    1a48:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <need_millis2+0x3>
			case_num2=1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e0       	ldi	r26, 0x00	; 0
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <case_num2>
    1a58:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <case_num2+0x1>
    1a5c:	a0 93 a9 03 	sts	0x03A9, r26	; 0x8003a9 <case_num2+0x2>
    1a60:	b0 93 aa 03 	sts	0x03AA, r27	; 0x8003aa <case_num2+0x3>
			     char Spercentage[4];
			     lcd_cmd(0x01);
    1a64:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
				 lcd_cmd(0x80);
    1a68:	80 e8       	ldi	r24, 0x80	; 128
    1a6a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
				 itoa(checkBloodOxygenLevel(), Spercentage, 10);
    1a6e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <checkBloodOxygenLevel>
    1a72:	4a e0       	ldi	r20, 0x0A	; 10
    1a74:	be 01       	movw	r22, r28
    1a76:	6f 5f       	subi	r22, 0xFF	; 255
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
				 lcd_msg(concatS("PBO2L-", Spercentage));
    1a7e:	be 01       	movw	r22, r28
    1a80:	6f 5f       	subi	r22, 0xFF	; 255
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	8f e7       	ldi	r24, 0x7F	; 127
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1a8c:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
				 itoa(Set_Heart_Rate(), Spercentage, 10);
    1a90:	0e 94 34 0c 	call	0x1868	; 0x1868 <Set_Heart_Rate>
    1a94:	4a e0       	ldi	r20, 0x0A	; 10
    1a96:	be 01       	movw	r22, r28
    1a98:	6f 5f       	subi	r22, 0xFF	; 255
    1a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9c:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
				 lcd_msg(concatS("  HR-", Spercentage));
    1aa0:	be 01       	movw	r22, r28
    1aa2:	6f 5f       	subi	r22, 0xFF	; 255
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	86 e8       	ldi	r24, 0x86	; 134
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1aae:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
				 lcd_cmd(0xc0);
    1ab2:	80 ec       	ldi	r24, 0xC0	; 192
    1ab4:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
				 itoa(PatientTemp(), Spercentage, 10);
    1ab8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <PatientTemp>
    1abc:	4a e0       	ldi	r20, 0x0A	; 10
    1abe:	be 01       	movw	r22, r28
    1ac0:	6f 5f       	subi	r22, 0xFF	; 255
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
				 lcd_msg(concatS("Temp-",Spercentage));
    1ac8:	be 01       	movw	r22, r28
    1aca:	6f 5f       	subi	r22, 0xFF	; 255
    1acc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ace:	83 e2       	ldi	r24, 0x23	; 35
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1ad6:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
				 itoa(checkPatientExpPresure(), Spercentage, 10);
    1ada:	0e 94 2c 0c 	call	0x1858	; 0x1858 <checkPatientExpPresure>
    1ade:	4a e0       	ldi	r20, 0x0A	; 10
    1ae0:	be 01       	movw	r22, r28
    1ae2:	6f 5f       	subi	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
				 lcd_msg(concatS(" ExpP-", Spercentage));
    1aea:	be 01       	movw	r22, r28
    1aec:	6f 5f       	subi	r22, 0xFF	; 255
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8c e8       	ldi	r24, 0x8C	; 140
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1af8:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
			case_num2++;
    1afc:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <case_num2>
    1b00:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <case_num2+0x1>
    1b04:	a0 91 a9 03 	lds	r26, 0x03A9	; 0x8003a9 <case_num2+0x2>
    1b08:	b0 91 aa 03 	lds	r27, 0x03AA	; 0x8003aa <case_num2+0x3>
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	a1 1d       	adc	r26, r1
    1b10:	b1 1d       	adc	r27, r1
    1b12:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <case_num2>
    1b16:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <case_num2+0x1>
    1b1a:	a0 93 a9 03 	sts	0x03A9, r26	; 0x8003a9 <case_num2+0x2>
    1b1e:	b0 93 aa 03 	sts	0x03AA, r27	; 0x8003aa <case_num2+0x3>
    1b22:	a8 c0       	rjmp	.+336    	; 0x1c74 <main+0x406>
			}else if(need_millis1<millis()){
    1b24:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <millis>
    1b28:	00 91 63 04 	lds	r16, 0x0463	; 0x800463 <need_millis1>
    1b2c:	10 91 64 04 	lds	r17, 0x0464	; 0x800464 <need_millis1+0x1>
    1b30:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <need_millis1+0x2>
    1b34:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <need_millis1+0x3>
    1b38:	06 17       	cp	r16, r22
    1b3a:	17 07       	cpc	r17, r23
    1b3c:	28 07       	cpc	r18, r24
    1b3e:	39 07       	cpc	r19, r25
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <main+0x2d6>
    1b42:	98 c0       	rjmp	.+304    	; 0x1c74 <main+0x406>
			
			switch(case_num2){
    1b44:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <case_num2>
    1b48:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <case_num2+0x1>
    1b4c:	a0 91 a9 03 	lds	r26, 0x03A9	; 0x8003a9 <case_num2+0x2>
    1b50:	b0 91 aa 03 	lds	r27, 0x03AA	; 0x8003aa <case_num2+0x3>
    1b54:	02 97       	sbiw	r24, 0x02	; 2
    1b56:	a1 05       	cpc	r26, r1
    1b58:	b1 05       	cpc	r27, r1
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <main+0x2f0>
    1b5c:	7b c0       	rjmp	.+246    	; 0x1c54 <main+0x3e6>
				
				case 2:{
					lcd_cmd(0x01);
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
					lcd_cmd(0x80);
    1b64:	80 e8       	ldi	r24, 0x80	; 128
    1b66:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    1b6a:	4a e0       	ldi	r20, 0x0A	; 10
    1b6c:	be 01       	movw	r22, r28
    1b6e:	6f 5f       	subi	r22, 0xFF	; 255
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <rBPM>
    1b76:	90 91 5a 04 	lds	r25, 0x045A	; 0x80045a <rBPM+0x1>
    1b7a:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
					char Spercentage1[4];
					itoa(rBPM, Spercentage1, 10);
					lcd_msg(concatS("BPM-", Spercentage1));
    1b7e:	be 01       	movw	r22, r28
    1b80:	6f 5f       	subi	r22, 0xFF	; 255
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	83 e9       	ldi	r24, 0x93	; 147
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1b8c:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1b90:	4a e0       	ldi	r20, 0x0A	; 10
    1b92:	be 01       	movw	r22, r28
    1b94:	6f 5f       	subi	r22, 0xFF	; 255
    1b96:	7f 4f       	sbci	r23, 0xFF	; 255
    1b98:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <rBL>
    1b9c:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <rBL+0x1>
    1ba0:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
					itoa(rBL, Spercentage1, 10);
					lcd_msg(concatS("   BL-", Spercentage1));
    1ba4:	be 01       	movw	r22, r28
    1ba6:	6f 5f       	subi	r22, 0xFF	; 255
    1ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    1baa:	88 e9       	ldi	r24, 0x98	; 152
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1bb2:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
					lcd_cmd(0xc0);
    1bb6:	80 ec       	ldi	r24, 0xC0	; 192
    1bb8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
					itoa(oxygenTankPercentage(), Spercentage1, 10);
    1bbc:	0e 94 be 0b 	call	0x177c	; 0x177c <oxygenTankPercentage>
    1bc0:	4a e0       	ldi	r20, 0x0A	; 10
    1bc2:	be 01       	movw	r22, r28
    1bc4:	6f 5f       	subi	r22, 0xFF	; 255
    1bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc8:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
					lcd_msg(concatS("O2TP-", Spercentage1));
    1bcc:	be 01       	movw	r22, r28
    1bce:	6f 5f       	subi	r22, 0xFF	; 255
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	8f e9       	ldi	r24, 0x9F	; 159
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1bda:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1bde:	4a e0       	ldi	r20, 0x0A	; 10
    1be0:	be 01       	movw	r22, r28
    1be2:	6f 5f       	subi	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    1bea:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    1bee:	0e 94 5f 13 	call	0x26be	; 0x26be <__itoa_ncheck>
					itoa(Oxygen_percentage, Spercentage1, 10);
					lcd_msg(concatS(" AO2P-", Spercentage1));
    1bf2:	be 01       	movw	r22, r28
    1bf4:	6f 5f       	subi	r22, 0xFF	; 255
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	85 ea       	ldi	r24, 0xA5	; 165
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	0e 94 24 0b 	call	0x1648	; 0x1648 <concatS>
    1c00:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
					case_num2++;
    1c04:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <case_num2>
    1c08:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <case_num2+0x1>
    1c0c:	a0 91 a9 03 	lds	r26, 0x03A9	; 0x8003a9 <case_num2+0x2>
    1c10:	b0 91 aa 03 	lds	r27, 0x03AA	; 0x8003aa <case_num2+0x3>
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	a1 1d       	adc	r26, r1
    1c18:	b1 1d       	adc	r27, r1
    1c1a:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <case_num2>
    1c1e:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <case_num2+0x1>
    1c22:	a0 93 a9 03 	sts	0x03A9, r26	; 0x8003a9 <case_num2+0x2>
    1c26:	b0 93 aa 03 	sts	0x03AA, r27	; 0x8003aa <case_num2+0x3>
					need_millis2=need_millis2+500;
    1c2a:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <need_millis2>
    1c2e:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <need_millis2+0x1>
    1c32:	a0 91 ad 03 	lds	r26, 0x03AD	; 0x8003ad <need_millis2+0x2>
    1c36:	b0 91 ae 03 	lds	r27, 0x03AE	; 0x8003ae <need_millis2+0x3>
    1c3a:	8c 50       	subi	r24, 0x0C	; 12
    1c3c:	9e 4f       	sbci	r25, 0xFE	; 254
    1c3e:	af 4f       	sbci	r26, 0xFF	; 255
    1c40:	bf 4f       	sbci	r27, 0xFF	; 255
    1c42:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <need_millis2>
    1c46:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <need_millis2+0x1>
    1c4a:	a0 93 ad 03 	sts	0x03AD, r26	; 0x8003ad <need_millis2+0x2>
    1c4e:	b0 93 ae 03 	sts	0x03AE, r27	; 0x8003ae <need_millis2+0x3>
    1c52:	10 c0       	rjmp	.+32     	; 0x1c74 <main+0x406>
					break;
				} 
				
				default:{case_num2=NULL;
    1c54:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <case_num2>
    1c58:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <case_num2+0x1>
    1c5c:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <case_num2+0x2>
    1c60:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <case_num2+0x3>
					prev_millis2=NULL;
    1c64:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <prev_millis2>
    1c68:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <prev_millis2+0x1>
    1c6c:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <prev_millis2+0x2>
    1c70:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <prev_millis2+0x3>
		
		
       
       

        switch (caseADC)
    1c74:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    1c78:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    1c7c:	82 30       	cpi	r24, 0x02	; 2
    1c7e:	91 05       	cpc	r25, r1
    1c80:	a9 f1       	breq	.+106    	; 0x1cec <main+0x47e>
    1c82:	83 30       	cpi	r24, 0x03	; 3
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <main+0x41c>
    1c88:	5d c0       	rjmp	.+186    	; 0x1d44 <main+0x4d6>
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <main+0x422>
    1c8e:	7d c0       	rjmp	.+250    	; 0x1d8a <main+0x51c>
        {
        case 1:
        {
			ADC_Init();
    1c90:	0e 94 ff 08 	call	0x11fe	; 0x11fe <ADC_Init>
            value = ADC_Read(0);
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	0e 94 05 09 	call	0x120a	; 0x120a <ADC_Read>
    1c9a:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <value+0x1>
    1c9e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <value>
            rBPM = ((value * 14) / 1024) + 10; // BPM range vary from 10 to 24
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	9c 01       	movw	r18, r24
    1ca8:	22 0f       	add	r18, r18
    1caa:	33 1f       	adc	r19, r19
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	22 0f       	add	r18, r18
    1cb2:	33 1f       	adc	r19, r19
    1cb4:	a9 01       	movw	r20, r18
    1cb6:	48 1b       	sub	r20, r24
    1cb8:	59 0b       	sbc	r21, r25
    1cba:	9a 01       	movw	r18, r20
    1cbc:	12 f4       	brpl	.+4      	; 0x1cc2 <main+0x454>
    1cbe:	21 50       	subi	r18, 0x01	; 1
    1cc0:	3c 4f       	sbci	r19, 0xFC	; 252
    1cc2:	83 2f       	mov	r24, r19
    1cc4:	85 95       	asr	r24
    1cc6:	85 95       	asr	r24
    1cc8:	93 2f       	mov	r25, r19
    1cca:	99 0f       	add	r25, r25
    1ccc:	99 0b       	sbc	r25, r25
    1cce:	0a 96       	adiw	r24, 0x0a	; 10
    1cd0:	90 93 5a 04 	sts	0x045A, r25	; 0x80045a <rBPM+0x1>
    1cd4:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <rBPM>
            caseADC++;
    1cd8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    1cdc:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1ce6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
            break;
    1cea:	4f c0       	rjmp	.+158    	; 0x1d8a <main+0x51c>
        }
        case 2:
        {
			ADC_Init();
    1cec:	0e 94 ff 08 	call	0x11fe	; 0x11fe <ADC_Init>
            value = ADC_Read(3);
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	0e 94 05 09 	call	0x120a	; 0x120a <ADC_Read>
    1cf6:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <value+0x1>
    1cfa:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <value>
            rBL = ((value * 650) / 1024) + 250; // BL range vary from 250 to 900
    1cfe:	4a e8       	ldi	r20, 0x8A	; 138
    1d00:	52 e0       	ldi	r21, 0x02	; 2
    1d02:	84 9f       	mul	r24, r20
    1d04:	90 01       	movw	r18, r0
    1d06:	85 9f       	mul	r24, r21
    1d08:	30 0d       	add	r19, r0
    1d0a:	94 9f       	mul	r25, r20
    1d0c:	30 0d       	add	r19, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	33 23       	and	r19, r19
    1d12:	14 f4       	brge	.+4      	; 0x1d18 <main+0x4aa>
    1d14:	21 50       	subi	r18, 0x01	; 1
    1d16:	3c 4f       	sbci	r19, 0xFC	; 252
    1d18:	83 2f       	mov	r24, r19
    1d1a:	85 95       	asr	r24
    1d1c:	85 95       	asr	r24
    1d1e:	93 2f       	mov	r25, r19
    1d20:	99 0f       	add	r25, r25
    1d22:	99 0b       	sbc	r25, r25
    1d24:	86 50       	subi	r24, 0x06	; 6
    1d26:	9f 4f       	sbci	r25, 0xFF	; 255
    1d28:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <rBL+0x1>
    1d2c:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <rBL>
            caseADC++;
    1d30:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    1d34:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    1d38:	01 96       	adiw	r24, 0x01	; 1
    1d3a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1d3e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
            break;
    1d42:	23 c0       	rjmp	.+70     	; 0x1d8a <main+0x51c>
        }
        case 3:
        {
			ADC_Init();
    1d44:	0e 94 ff 08 	call	0x11fe	; 0x11fe <ADC_Init>
            value = ADC_Read(4);
    1d48:	84 e0       	ldi	r24, 0x04	; 4
    1d4a:	0e 94 05 09 	call	0x120a	; 0x120a <ADC_Read>
    1d4e:	90 93 1c 05 	sts	0x051C, r25	; 0x80051c <value+0x1>
    1d52:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <value>
            rOP = (100 * value) / 1024; // OP range vary from 0 to 100
    1d56:	44 e6       	ldi	r20, 0x64	; 100
    1d58:	48 9f       	mul	r20, r24
    1d5a:	90 01       	movw	r18, r0
    1d5c:	49 9f       	mul	r20, r25
    1d5e:	30 0d       	add	r19, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	33 23       	and	r19, r19
    1d64:	14 f4       	brge	.+4      	; 0x1d6a <main+0x4fc>
    1d66:	21 50       	subi	r18, 0x01	; 1
    1d68:	3c 4f       	sbci	r19, 0xFC	; 252
    1d6a:	83 2f       	mov	r24, r19
    1d6c:	88 0f       	add	r24, r24
    1d6e:	88 0b       	sbc	r24, r24
    1d70:	93 2f       	mov	r25, r19
    1d72:	95 95       	asr	r25
    1d74:	95 95       	asr	r25
    1d76:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <rOP>
    1d7a:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <rOP+0x1>
            caseADC = 1;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1d86:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
            break;
        }
        }

        if (checkStatus())
    1d8a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <checkStatus>
    1d8e:	88 23       	and	r24, r24
    1d90:	39 f1       	breq	.+78     	; 0x1de0 <main+0x572>
        {
            if (automationOn())
    1d92:	0e 94 12 0b 	call	0x1624	; 0x1624 <automationOn>
    1d96:	88 23       	and	r24, r24
    1d98:	c1 f0       	breq	.+48     	; 0x1dca <main+0x55c>
            {
                if (checkPatientTemp())
    1d9a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <checkPatientTemp>
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <main+0x536>
    1da2:	35 ce       	rjmp	.-918    	; 0x1a0e <main+0x1a0>
                {

                    if (checkBloodOxygenLevel() < Average_Blood_Oxygen_level)
    1da4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <checkBloodOxygenLevel>
    1da8:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <Average_Blood_Oxygen_level>
    1dac:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <Average_Blood_Oxygen_level+0x1>
    1db0:	82 17       	cp	r24, r18
    1db2:	93 07       	cpc	r25, r19
    1db4:	3c f4       	brge	.+14     	; 0x1dc4 <main+0x556>
                    {
                        startOxygenAndAirSupply(Oxygen_percentage);
    1db6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    1dba:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    1dbe:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <startOxygenAndAirSupply>
    1dc2:	25 ce       	rjmp	.-950    	; 0x1a0e <main+0x1a0>
                    }
                    else
                    {
                        startAirSupply();
    1dc4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <startAirSupply>
    1dc8:	22 ce       	rjmp	.-956    	; 0x1a0e <main+0x1a0>
                    }
                }
            }
            else
            {
                checkPatientTemp();
    1dca:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <checkPatientTemp>
                getParametersFromKnobs(); // update o2 percentage manually
    1dce:	0e 94 09 0b 	call	0x1612	; 0x1612 <getParametersFromKnobs>
                startOxygenAndAirSupply(Oxygen_percentage);
    1dd2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    1dd6:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    1dda:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <startOxygenAndAirSupply>
    1dde:	17 ce       	rjmp	.-978    	; 0x1a0e <main+0x1a0>
        else
        {
            return 0;
        }
    }
}
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <__vector_7>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	8f 93       	push	r24
    1e02:	9f 93       	push	r25
    1e04:	af 93       	push	r26
    1e06:	bf 93       	push	r27
  timer1_millis++;
    1e08:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <timer1_millis>
    1e0c:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <timer1_millis+0x1>
    1e10:	a0 91 6d 04 	lds	r26, 0x046D	; 0x80046d <timer1_millis+0x2>
    1e14:	b0 91 6e 04 	lds	r27, 0x046E	; 0x80046e <timer1_millis+0x3>
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	a1 1d       	adc	r26, r1
    1e1c:	b1 1d       	adc	r27, r1
    1e1e:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <timer1_millis>
    1e22:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <timer1_millis+0x1>
    1e26:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <timer1_millis+0x2>
    1e2a:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <timer1_millis+0x3>
}
    1e2e:	bf 91       	pop	r27
    1e30:	af 91       	pop	r26
    1e32:	9f 91       	pop	r25
    1e34:	8f 91       	pop	r24
    1e36:	0f 90       	pop	r0
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	0f 90       	pop	r0
    1e3c:	1f 90       	pop	r1
    1e3e:	18 95       	reti

00001e40 <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    1e40:	20 e4       	ldi	r18, 0x40	; 64
    1e42:	3f e1       	ldi	r19, 0x1F	; 31
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    1e4c:	8e b5       	in	r24, 0x2e	; 46
    1e4e:	8a 60       	ori	r24, 0x0A	; 10
    1e50:	8e bd       	out	0x2e, r24	; 46

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    1e52:	bb 27       	eor	r27, r27
    1e54:	a5 2f       	mov	r26, r21
    1e56:	94 2f       	mov	r25, r20
    1e58:	83 2f       	mov	r24, r19
    1e5a:	8b bd       	out	0x2b, r24	; 43
  OCR1AL = ctc_match_overflow;
    1e5c:	2a bd       	out	0x2a, r18	; 42

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    1e5e:	89 b7       	in	r24, 0x39	; 57
    1e60:	80 61       	ori	r24, 0x10	; 16
    1e62:	89 bf       	out	0x39, r24	; 57
    1e64:	08 95       	ret

00001e66 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e66:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    1e68:	21 e0       	ldi	r18, 0x01	; 1
    1e6a:	09 c0       	rjmp	.+18     	; 0x1e7e <millis+0x18>
    millis_return = timer1_millis;
    1e6c:	60 91 6b 04 	lds	r22, 0x046B	; 0x80046b <timer1_millis>
    1e70:	70 91 6c 04 	lds	r23, 0x046C	; 0x80046c <timer1_millis+0x1>
    1e74:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <timer1_millis+0x2>
    1e78:	90 91 6e 04 	lds	r25, 0x046E	; 0x80046e <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	21 11       	cpse	r18, r1
    1e80:	f5 cf       	rjmp	.-22     	; 0x1e6c <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1e82:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
    1e84:	08 95       	ret

00001e86 <__subsf3>:
    1e86:	50 58       	subi	r21, 0x80	; 128

00001e88 <__addsf3>:
    1e88:	bb 27       	eor	r27, r27
    1e8a:	aa 27       	eor	r26, r26
    1e8c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__addsf3x>
    1e90:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_round>
    1e94:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_pscA>
    1e98:	38 f0       	brcs	.+14     	; 0x1ea8 <__addsf3+0x20>
    1e9a:	0e 94 ce 10 	call	0x219c	; 0x219c <__fp_pscB>
    1e9e:	20 f0       	brcs	.+8      	; 0x1ea8 <__addsf3+0x20>
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <__addsf3+0x28>
    1ea2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <__addsf3+0x24>
    1ea6:	26 f4       	brtc	.+8      	; 0x1eb0 <__addsf3+0x28>
    1ea8:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__fp_nan>
    1eac:	0e f4       	brtc	.+2      	; 0x1eb0 <__addsf3+0x28>
    1eae:	e0 95       	com	r30
    1eb0:	e7 fb       	bst	r30, 7
    1eb2:	0c 94 be 10 	jmp	0x217c	; 0x217c <__fp_inf>

00001eb6 <__addsf3x>:
    1eb6:	e9 2f       	mov	r30, r25
    1eb8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fp_split3>
    1ebc:	58 f3       	brcs	.-42     	; 0x1e94 <__addsf3+0xc>
    1ebe:	ba 17       	cp	r27, r26
    1ec0:	62 07       	cpc	r22, r18
    1ec2:	73 07       	cpc	r23, r19
    1ec4:	84 07       	cpc	r24, r20
    1ec6:	95 07       	cpc	r25, r21
    1ec8:	20 f0       	brcs	.+8      	; 0x1ed2 <__addsf3x+0x1c>
    1eca:	79 f4       	brne	.+30     	; 0x1eea <__addsf3x+0x34>
    1ecc:	a6 f5       	brtc	.+104    	; 0x1f36 <__addsf3x+0x80>
    1ece:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__fp_zero>
    1ed2:	0e f4       	brtc	.+2      	; 0x1ed6 <__addsf3x+0x20>
    1ed4:	e0 95       	com	r30
    1ed6:	0b 2e       	mov	r0, r27
    1ed8:	ba 2f       	mov	r27, r26
    1eda:	a0 2d       	mov	r26, r0
    1edc:	0b 01       	movw	r0, r22
    1ede:	b9 01       	movw	r22, r18
    1ee0:	90 01       	movw	r18, r0
    1ee2:	0c 01       	movw	r0, r24
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	a0 01       	movw	r20, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	ff 27       	eor	r31, r31
    1eec:	59 1b       	sub	r21, r25
    1eee:	99 f0       	breq	.+38     	; 0x1f16 <__addsf3x+0x60>
    1ef0:	59 3f       	cpi	r21, 0xF9	; 249
    1ef2:	50 f4       	brcc	.+20     	; 0x1f08 <__addsf3x+0x52>
    1ef4:	50 3e       	cpi	r21, 0xE0	; 224
    1ef6:	68 f1       	brcs	.+90     	; 0x1f52 <__addsf3x+0x9c>
    1ef8:	1a 16       	cp	r1, r26
    1efa:	f0 40       	sbci	r31, 0x00	; 0
    1efc:	a2 2f       	mov	r26, r18
    1efe:	23 2f       	mov	r18, r19
    1f00:	34 2f       	mov	r19, r20
    1f02:	44 27       	eor	r20, r20
    1f04:	58 5f       	subi	r21, 0xF8	; 248
    1f06:	f3 cf       	rjmp	.-26     	; 0x1eee <__addsf3x+0x38>
    1f08:	46 95       	lsr	r20
    1f0a:	37 95       	ror	r19
    1f0c:	27 95       	ror	r18
    1f0e:	a7 95       	ror	r26
    1f10:	f0 40       	sbci	r31, 0x00	; 0
    1f12:	53 95       	inc	r21
    1f14:	c9 f7       	brne	.-14     	; 0x1f08 <__addsf3x+0x52>
    1f16:	7e f4       	brtc	.+30     	; 0x1f36 <__addsf3x+0x80>
    1f18:	1f 16       	cp	r1, r31
    1f1a:	ba 0b       	sbc	r27, r26
    1f1c:	62 0b       	sbc	r22, r18
    1f1e:	73 0b       	sbc	r23, r19
    1f20:	84 0b       	sbc	r24, r20
    1f22:	ba f0       	brmi	.+46     	; 0x1f52 <__addsf3x+0x9c>
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	a1 f0       	breq	.+40     	; 0x1f50 <__addsf3x+0x9a>
    1f28:	ff 0f       	add	r31, r31
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	66 1f       	adc	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	c2 f7       	brpl	.-16     	; 0x1f24 <__addsf3x+0x6e>
    1f34:	0e c0       	rjmp	.+28     	; 0x1f52 <__addsf3x+0x9c>
    1f36:	ba 0f       	add	r27, r26
    1f38:	62 1f       	adc	r22, r18
    1f3a:	73 1f       	adc	r23, r19
    1f3c:	84 1f       	adc	r24, r20
    1f3e:	48 f4       	brcc	.+18     	; 0x1f52 <__addsf3x+0x9c>
    1f40:	87 95       	ror	r24
    1f42:	77 95       	ror	r23
    1f44:	67 95       	ror	r22
    1f46:	b7 95       	ror	r27
    1f48:	f7 95       	ror	r31
    1f4a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f4c:	08 f0       	brcs	.+2      	; 0x1f50 <__addsf3x+0x9a>
    1f4e:	b0 cf       	rjmp	.-160    	; 0x1eb0 <__addsf3+0x28>
    1f50:	93 95       	inc	r25
    1f52:	88 0f       	add	r24, r24
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <__addsf3x+0xa2>
    1f56:	99 27       	eor	r25, r25
    1f58:	ee 0f       	add	r30, r30
    1f5a:	97 95       	ror	r25
    1f5c:	87 95       	ror	r24
    1f5e:	08 95       	ret

00001f60 <__cmpsf2>:
    1f60:	0e 94 9a 10 	call	0x2134	; 0x2134 <__fp_cmp>
    1f64:	08 f4       	brcc	.+2      	; 0x1f68 <__cmpsf2+0x8>
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	08 95       	ret

00001f6a <__divsf3>:
    1f6a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__divsf3x>
    1f6e:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_round>
    1f72:	0e 94 ce 10 	call	0x219c	; 0x219c <__fp_pscB>
    1f76:	58 f0       	brcs	.+22     	; 0x1f8e <__divsf3+0x24>
    1f78:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_pscA>
    1f7c:	40 f0       	brcs	.+16     	; 0x1f8e <__divsf3+0x24>
    1f7e:	29 f4       	brne	.+10     	; 0x1f8a <__divsf3+0x20>
    1f80:	5f 3f       	cpi	r21, 0xFF	; 255
    1f82:	29 f0       	breq	.+10     	; 0x1f8e <__divsf3+0x24>
    1f84:	0c 94 be 10 	jmp	0x217c	; 0x217c <__fp_inf>
    1f88:	51 11       	cpse	r21, r1
    1f8a:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_szero>
    1f8e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__fp_nan>

00001f92 <__divsf3x>:
    1f92:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fp_split3>
    1f96:	68 f3       	brcs	.-38     	; 0x1f72 <__divsf3+0x8>

00001f98 <__divsf3_pse>:
    1f98:	99 23       	and	r25, r25
    1f9a:	b1 f3       	breq	.-20     	; 0x1f88 <__divsf3+0x1e>
    1f9c:	55 23       	and	r21, r21
    1f9e:	91 f3       	breq	.-28     	; 0x1f84 <__divsf3+0x1a>
    1fa0:	95 1b       	sub	r25, r21
    1fa2:	55 0b       	sbc	r21, r21
    1fa4:	bb 27       	eor	r27, r27
    1fa6:	aa 27       	eor	r26, r26
    1fa8:	62 17       	cp	r22, r18
    1faa:	73 07       	cpc	r23, r19
    1fac:	84 07       	cpc	r24, r20
    1fae:	38 f0       	brcs	.+14     	; 0x1fbe <__divsf3_pse+0x26>
    1fb0:	9f 5f       	subi	r25, 0xFF	; 255
    1fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	44 1f       	adc	r20, r20
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	a9 f3       	breq	.-22     	; 0x1fa8 <__divsf3_pse+0x10>
    1fbe:	35 d0       	rcall	.+106    	; 0x202a <__divsf3_pse+0x92>
    1fc0:	0e 2e       	mov	r0, r30
    1fc2:	3a f0       	brmi	.+14     	; 0x1fd2 <__divsf3_pse+0x3a>
    1fc4:	e0 e8       	ldi	r30, 0x80	; 128
    1fc6:	32 d0       	rcall	.+100    	; 0x202c <__divsf3_pse+0x94>
    1fc8:	91 50       	subi	r25, 0x01	; 1
    1fca:	50 40       	sbci	r21, 0x00	; 0
    1fcc:	e6 95       	lsr	r30
    1fce:	00 1c       	adc	r0, r0
    1fd0:	ca f7       	brpl	.-14     	; 0x1fc4 <__divsf3_pse+0x2c>
    1fd2:	2b d0       	rcall	.+86     	; 0x202a <__divsf3_pse+0x92>
    1fd4:	fe 2f       	mov	r31, r30
    1fd6:	29 d0       	rcall	.+82     	; 0x202a <__divsf3_pse+0x92>
    1fd8:	66 0f       	add	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	88 1f       	adc	r24, r24
    1fde:	bb 1f       	adc	r27, r27
    1fe0:	26 17       	cp	r18, r22
    1fe2:	37 07       	cpc	r19, r23
    1fe4:	48 07       	cpc	r20, r24
    1fe6:	ab 07       	cpc	r26, r27
    1fe8:	b0 e8       	ldi	r27, 0x80	; 128
    1fea:	09 f0       	breq	.+2      	; 0x1fee <__divsf3_pse+0x56>
    1fec:	bb 0b       	sbc	r27, r27
    1fee:	80 2d       	mov	r24, r0
    1ff0:	bf 01       	movw	r22, r30
    1ff2:	ff 27       	eor	r31, r31
    1ff4:	93 58       	subi	r25, 0x83	; 131
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff8:	3a f0       	brmi	.+14     	; 0x2008 <__divsf3_pse+0x70>
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	78 f0       	brcs	.+30     	; 0x201e <__divsf3_pse+0x86>
    2000:	0c 94 be 10 	jmp	0x217c	; 0x217c <__fp_inf>
    2004:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_szero>
    2008:	5f 3f       	cpi	r21, 0xFF	; 255
    200a:	e4 f3       	brlt	.-8      	; 0x2004 <__divsf3_pse+0x6c>
    200c:	98 3e       	cpi	r25, 0xE8	; 232
    200e:	d4 f3       	brlt	.-12     	; 0x2004 <__divsf3_pse+0x6c>
    2010:	86 95       	lsr	r24
    2012:	77 95       	ror	r23
    2014:	67 95       	ror	r22
    2016:	b7 95       	ror	r27
    2018:	f7 95       	ror	r31
    201a:	9f 5f       	subi	r25, 0xFF	; 255
    201c:	c9 f7       	brne	.-14     	; 0x2010 <__divsf3_pse+0x78>
    201e:	88 0f       	add	r24, r24
    2020:	91 1d       	adc	r25, r1
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	97 f9       	bld	r25, 7
    2028:	08 95       	ret
    202a:	e1 e0       	ldi	r30, 0x01	; 1
    202c:	66 0f       	add	r22, r22
    202e:	77 1f       	adc	r23, r23
    2030:	88 1f       	adc	r24, r24
    2032:	bb 1f       	adc	r27, r27
    2034:	62 17       	cp	r22, r18
    2036:	73 07       	cpc	r23, r19
    2038:	84 07       	cpc	r24, r20
    203a:	ba 07       	cpc	r27, r26
    203c:	20 f0       	brcs	.+8      	; 0x2046 <__divsf3_pse+0xae>
    203e:	62 1b       	sub	r22, r18
    2040:	73 0b       	sbc	r23, r19
    2042:	84 0b       	sbc	r24, r20
    2044:	ba 0b       	sbc	r27, r26
    2046:	ee 1f       	adc	r30, r30
    2048:	88 f7       	brcc	.-30     	; 0x202c <__divsf3_pse+0x94>
    204a:	e0 95       	com	r30
    204c:	08 95       	ret

0000204e <__fixsfsi>:
    204e:	0e 94 2e 10 	call	0x205c	; 0x205c <__fixunssfsi>
    2052:	68 94       	set
    2054:	b1 11       	cpse	r27, r1
    2056:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_szero>
    205a:	08 95       	ret

0000205c <__fixunssfsi>:
    205c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fp_splitA>
    2060:	88 f0       	brcs	.+34     	; 0x2084 <__fixunssfsi+0x28>
    2062:	9f 57       	subi	r25, 0x7F	; 127
    2064:	98 f0       	brcs	.+38     	; 0x208c <__fixunssfsi+0x30>
    2066:	b9 2f       	mov	r27, r25
    2068:	99 27       	eor	r25, r25
    206a:	b7 51       	subi	r27, 0x17	; 23
    206c:	b0 f0       	brcs	.+44     	; 0x209a <__fixunssfsi+0x3e>
    206e:	e1 f0       	breq	.+56     	; 0x20a8 <__fixunssfsi+0x4c>
    2070:	66 0f       	add	r22, r22
    2072:	77 1f       	adc	r23, r23
    2074:	88 1f       	adc	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	1a f0       	brmi	.+6      	; 0x2080 <__fixunssfsi+0x24>
    207a:	ba 95       	dec	r27
    207c:	c9 f7       	brne	.-14     	; 0x2070 <__fixunssfsi+0x14>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <__fixunssfsi+0x4c>
    2080:	b1 30       	cpi	r27, 0x01	; 1
    2082:	91 f0       	breq	.+36     	; 0x20a8 <__fixunssfsi+0x4c>
    2084:	0e 94 08 11 	call	0x2210	; 0x2210 <__fp_zero>
    2088:	b1 e0       	ldi	r27, 0x01	; 1
    208a:	08 95       	ret
    208c:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__fp_zero>
    2090:	67 2f       	mov	r22, r23
    2092:	78 2f       	mov	r23, r24
    2094:	88 27       	eor	r24, r24
    2096:	b8 5f       	subi	r27, 0xF8	; 248
    2098:	39 f0       	breq	.+14     	; 0x20a8 <__fixunssfsi+0x4c>
    209a:	b9 3f       	cpi	r27, 0xF9	; 249
    209c:	cc f3       	brlt	.-14     	; 0x2090 <__fixunssfsi+0x34>
    209e:	86 95       	lsr	r24
    20a0:	77 95       	ror	r23
    20a2:	67 95       	ror	r22
    20a4:	b3 95       	inc	r27
    20a6:	d9 f7       	brne	.-10     	; 0x209e <__fixunssfsi+0x42>
    20a8:	3e f4       	brtc	.+14     	; 0x20b8 <__fixunssfsi+0x5c>
    20aa:	90 95       	com	r25
    20ac:	80 95       	com	r24
    20ae:	70 95       	com	r23
    20b0:	61 95       	neg	r22
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	8f 4f       	sbci	r24, 0xFF	; 255
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	08 95       	ret

000020ba <__floatunsisf>:
    20ba:	e8 94       	clt
    20bc:	09 c0       	rjmp	.+18     	; 0x20d0 <__floatsisf+0x12>

000020be <__floatsisf>:
    20be:	97 fb       	bst	r25, 7
    20c0:	3e f4       	brtc	.+14     	; 0x20d0 <__floatsisf+0x12>
    20c2:	90 95       	com	r25
    20c4:	80 95       	com	r24
    20c6:	70 95       	com	r23
    20c8:	61 95       	neg	r22
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	99 23       	and	r25, r25
    20d2:	a9 f0       	breq	.+42     	; 0x20fe <__floatsisf+0x40>
    20d4:	f9 2f       	mov	r31, r25
    20d6:	96 e9       	ldi	r25, 0x96	; 150
    20d8:	bb 27       	eor	r27, r27
    20da:	93 95       	inc	r25
    20dc:	f6 95       	lsr	r31
    20de:	87 95       	ror	r24
    20e0:	77 95       	ror	r23
    20e2:	67 95       	ror	r22
    20e4:	b7 95       	ror	r27
    20e6:	f1 11       	cpse	r31, r1
    20e8:	f8 cf       	rjmp	.-16     	; 0x20da <__floatsisf+0x1c>
    20ea:	fa f4       	brpl	.+62     	; 0x212a <__floatsisf+0x6c>
    20ec:	bb 0f       	add	r27, r27
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <__floatsisf+0x36>
    20f0:	60 ff       	sbrs	r22, 0
    20f2:	1b c0       	rjmp	.+54     	; 0x212a <__floatsisf+0x6c>
    20f4:	6f 5f       	subi	r22, 0xFF	; 255
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	16 c0       	rjmp	.+44     	; 0x212a <__floatsisf+0x6c>
    20fe:	88 23       	and	r24, r24
    2100:	11 f0       	breq	.+4      	; 0x2106 <__floatsisf+0x48>
    2102:	96 e9       	ldi	r25, 0x96	; 150
    2104:	11 c0       	rjmp	.+34     	; 0x2128 <__floatsisf+0x6a>
    2106:	77 23       	and	r23, r23
    2108:	21 f0       	breq	.+8      	; 0x2112 <__floatsisf+0x54>
    210a:	9e e8       	ldi	r25, 0x8E	; 142
    210c:	87 2f       	mov	r24, r23
    210e:	76 2f       	mov	r23, r22
    2110:	05 c0       	rjmp	.+10     	; 0x211c <__floatsisf+0x5e>
    2112:	66 23       	and	r22, r22
    2114:	71 f0       	breq	.+28     	; 0x2132 <__floatsisf+0x74>
    2116:	96 e8       	ldi	r25, 0x86	; 134
    2118:	86 2f       	mov	r24, r22
    211a:	70 e0       	ldi	r23, 0x00	; 0
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	2a f0       	brmi	.+10     	; 0x212a <__floatsisf+0x6c>
    2120:	9a 95       	dec	r25
    2122:	66 0f       	add	r22, r22
    2124:	77 1f       	adc	r23, r23
    2126:	88 1f       	adc	r24, r24
    2128:	da f7       	brpl	.-10     	; 0x2120 <__floatsisf+0x62>
    212a:	88 0f       	add	r24, r24
    212c:	96 95       	lsr	r25
    212e:	87 95       	ror	r24
    2130:	97 f9       	bld	r25, 7
    2132:	08 95       	ret

00002134 <__fp_cmp>:
    2134:	99 0f       	add	r25, r25
    2136:	00 08       	sbc	r0, r0
    2138:	55 0f       	add	r21, r21
    213a:	aa 0b       	sbc	r26, r26
    213c:	e0 e8       	ldi	r30, 0x80	; 128
    213e:	fe ef       	ldi	r31, 0xFE	; 254
    2140:	16 16       	cp	r1, r22
    2142:	17 06       	cpc	r1, r23
    2144:	e8 07       	cpc	r30, r24
    2146:	f9 07       	cpc	r31, r25
    2148:	c0 f0       	brcs	.+48     	; 0x217a <__fp_cmp+0x46>
    214a:	12 16       	cp	r1, r18
    214c:	13 06       	cpc	r1, r19
    214e:	e4 07       	cpc	r30, r20
    2150:	f5 07       	cpc	r31, r21
    2152:	98 f0       	brcs	.+38     	; 0x217a <__fp_cmp+0x46>
    2154:	62 1b       	sub	r22, r18
    2156:	73 0b       	sbc	r23, r19
    2158:	84 0b       	sbc	r24, r20
    215a:	95 0b       	sbc	r25, r21
    215c:	39 f4       	brne	.+14     	; 0x216c <__fp_cmp+0x38>
    215e:	0a 26       	eor	r0, r26
    2160:	61 f0       	breq	.+24     	; 0x217a <__fp_cmp+0x46>
    2162:	23 2b       	or	r18, r19
    2164:	24 2b       	or	r18, r20
    2166:	25 2b       	or	r18, r21
    2168:	21 f4       	brne	.+8      	; 0x2172 <__fp_cmp+0x3e>
    216a:	08 95       	ret
    216c:	0a 26       	eor	r0, r26
    216e:	09 f4       	brne	.+2      	; 0x2172 <__fp_cmp+0x3e>
    2170:	a1 40       	sbci	r26, 0x01	; 1
    2172:	a6 95       	lsr	r26
    2174:	8f ef       	ldi	r24, 0xFF	; 255
    2176:	81 1d       	adc	r24, r1
    2178:	81 1d       	adc	r24, r1
    217a:	08 95       	ret

0000217c <__fp_inf>:
    217c:	97 f9       	bld	r25, 7
    217e:	9f 67       	ori	r25, 0x7F	; 127
    2180:	80 e8       	ldi	r24, 0x80	; 128
    2182:	70 e0       	ldi	r23, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	08 95       	ret

00002188 <__fp_nan>:
    2188:	9f ef       	ldi	r25, 0xFF	; 255
    218a:	80 ec       	ldi	r24, 0xC0	; 192
    218c:	08 95       	ret

0000218e <__fp_pscA>:
    218e:	00 24       	eor	r0, r0
    2190:	0a 94       	dec	r0
    2192:	16 16       	cp	r1, r22
    2194:	17 06       	cpc	r1, r23
    2196:	18 06       	cpc	r1, r24
    2198:	09 06       	cpc	r0, r25
    219a:	08 95       	ret

0000219c <__fp_pscB>:
    219c:	00 24       	eor	r0, r0
    219e:	0a 94       	dec	r0
    21a0:	12 16       	cp	r1, r18
    21a2:	13 06       	cpc	r1, r19
    21a4:	14 06       	cpc	r1, r20
    21a6:	05 06       	cpc	r0, r21
    21a8:	08 95       	ret

000021aa <__fp_round>:
    21aa:	09 2e       	mov	r0, r25
    21ac:	03 94       	inc	r0
    21ae:	00 0c       	add	r0, r0
    21b0:	11 f4       	brne	.+4      	; 0x21b6 <__fp_round+0xc>
    21b2:	88 23       	and	r24, r24
    21b4:	52 f0       	brmi	.+20     	; 0x21ca <__fp_round+0x20>
    21b6:	bb 0f       	add	r27, r27
    21b8:	40 f4       	brcc	.+16     	; 0x21ca <__fp_round+0x20>
    21ba:	bf 2b       	or	r27, r31
    21bc:	11 f4       	brne	.+4      	; 0x21c2 <__fp_round+0x18>
    21be:	60 ff       	sbrs	r22, 0
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <__fp_round+0x20>
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	8f 4f       	sbci	r24, 0xFF	; 255
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	08 95       	ret

000021cc <__fp_split3>:
    21cc:	57 fd       	sbrc	r21, 7
    21ce:	90 58       	subi	r25, 0x80	; 128
    21d0:	44 0f       	add	r20, r20
    21d2:	55 1f       	adc	r21, r21
    21d4:	59 f0       	breq	.+22     	; 0x21ec <__fp_splitA+0x10>
    21d6:	5f 3f       	cpi	r21, 0xFF	; 255
    21d8:	71 f0       	breq	.+28     	; 0x21f6 <__fp_splitA+0x1a>
    21da:	47 95       	ror	r20

000021dc <__fp_splitA>:
    21dc:	88 0f       	add	r24, r24
    21de:	97 fb       	bst	r25, 7
    21e0:	99 1f       	adc	r25, r25
    21e2:	61 f0       	breq	.+24     	; 0x21fc <__fp_splitA+0x20>
    21e4:	9f 3f       	cpi	r25, 0xFF	; 255
    21e6:	79 f0       	breq	.+30     	; 0x2206 <__fp_splitA+0x2a>
    21e8:	87 95       	ror	r24
    21ea:	08 95       	ret
    21ec:	12 16       	cp	r1, r18
    21ee:	13 06       	cpc	r1, r19
    21f0:	14 06       	cpc	r1, r20
    21f2:	55 1f       	adc	r21, r21
    21f4:	f2 cf       	rjmp	.-28     	; 0x21da <__fp_split3+0xe>
    21f6:	46 95       	lsr	r20
    21f8:	f1 df       	rcall	.-30     	; 0x21dc <__fp_splitA>
    21fa:	08 c0       	rjmp	.+16     	; 0x220c <__fp_splitA+0x30>
    21fc:	16 16       	cp	r1, r22
    21fe:	17 06       	cpc	r1, r23
    2200:	18 06       	cpc	r1, r24
    2202:	99 1f       	adc	r25, r25
    2204:	f1 cf       	rjmp	.-30     	; 0x21e8 <__fp_splitA+0xc>
    2206:	86 95       	lsr	r24
    2208:	71 05       	cpc	r23, r1
    220a:	61 05       	cpc	r22, r1
    220c:	08 94       	sec
    220e:	08 95       	ret

00002210 <__fp_zero>:
    2210:	e8 94       	clt

00002212 <__fp_szero>:
    2212:	bb 27       	eor	r27, r27
    2214:	66 27       	eor	r22, r22
    2216:	77 27       	eor	r23, r23
    2218:	cb 01       	movw	r24, r22
    221a:	97 f9       	bld	r25, 7
    221c:	08 95       	ret

0000221e <__gesf2>:
    221e:	0e 94 9a 10 	call	0x2134	; 0x2134 <__fp_cmp>
    2222:	08 f4       	brcc	.+2      	; 0x2226 <__gesf2+0x8>
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	08 95       	ret

00002228 <__mulsf3>:
    2228:	0e 94 27 11 	call	0x224e	; 0x224e <__mulsf3x>
    222c:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__fp_round>
    2230:	0e 94 c7 10 	call	0x218e	; 0x218e <__fp_pscA>
    2234:	38 f0       	brcs	.+14     	; 0x2244 <__mulsf3+0x1c>
    2236:	0e 94 ce 10 	call	0x219c	; 0x219c <__fp_pscB>
    223a:	20 f0       	brcs	.+8      	; 0x2244 <__mulsf3+0x1c>
    223c:	95 23       	and	r25, r21
    223e:	11 f0       	breq	.+4      	; 0x2244 <__mulsf3+0x1c>
    2240:	0c 94 be 10 	jmp	0x217c	; 0x217c <__fp_inf>
    2244:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__fp_nan>
    2248:	11 24       	eor	r1, r1
    224a:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_szero>

0000224e <__mulsf3x>:
    224e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <__fp_split3>
    2252:	70 f3       	brcs	.-36     	; 0x2230 <__mulsf3+0x8>

00002254 <__mulsf3_pse>:
    2254:	95 9f       	mul	r25, r21
    2256:	c1 f3       	breq	.-16     	; 0x2248 <__mulsf3+0x20>
    2258:	95 0f       	add	r25, r21
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	55 1f       	adc	r21, r21
    225e:	62 9f       	mul	r22, r18
    2260:	f0 01       	movw	r30, r0
    2262:	72 9f       	mul	r23, r18
    2264:	bb 27       	eor	r27, r27
    2266:	f0 0d       	add	r31, r0
    2268:	b1 1d       	adc	r27, r1
    226a:	63 9f       	mul	r22, r19
    226c:	aa 27       	eor	r26, r26
    226e:	f0 0d       	add	r31, r0
    2270:	b1 1d       	adc	r27, r1
    2272:	aa 1f       	adc	r26, r26
    2274:	64 9f       	mul	r22, r20
    2276:	66 27       	eor	r22, r22
    2278:	b0 0d       	add	r27, r0
    227a:	a1 1d       	adc	r26, r1
    227c:	66 1f       	adc	r22, r22
    227e:	82 9f       	mul	r24, r18
    2280:	22 27       	eor	r18, r18
    2282:	b0 0d       	add	r27, r0
    2284:	a1 1d       	adc	r26, r1
    2286:	62 1f       	adc	r22, r18
    2288:	73 9f       	mul	r23, r19
    228a:	b0 0d       	add	r27, r0
    228c:	a1 1d       	adc	r26, r1
    228e:	62 1f       	adc	r22, r18
    2290:	83 9f       	mul	r24, r19
    2292:	a0 0d       	add	r26, r0
    2294:	61 1d       	adc	r22, r1
    2296:	22 1f       	adc	r18, r18
    2298:	74 9f       	mul	r23, r20
    229a:	33 27       	eor	r19, r19
    229c:	a0 0d       	add	r26, r0
    229e:	61 1d       	adc	r22, r1
    22a0:	23 1f       	adc	r18, r19
    22a2:	84 9f       	mul	r24, r20
    22a4:	60 0d       	add	r22, r0
    22a6:	21 1d       	adc	r18, r1
    22a8:	82 2f       	mov	r24, r18
    22aa:	76 2f       	mov	r23, r22
    22ac:	6a 2f       	mov	r22, r26
    22ae:	11 24       	eor	r1, r1
    22b0:	9f 57       	subi	r25, 0x7F	; 127
    22b2:	50 40       	sbci	r21, 0x00	; 0
    22b4:	9a f0       	brmi	.+38     	; 0x22dc <__mulsf3_pse+0x88>
    22b6:	f1 f0       	breq	.+60     	; 0x22f4 <__mulsf3_pse+0xa0>
    22b8:	88 23       	and	r24, r24
    22ba:	4a f0       	brmi	.+18     	; 0x22ce <__mulsf3_pse+0x7a>
    22bc:	ee 0f       	add	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	bb 1f       	adc	r27, r27
    22c2:	66 1f       	adc	r22, r22
    22c4:	77 1f       	adc	r23, r23
    22c6:	88 1f       	adc	r24, r24
    22c8:	91 50       	subi	r25, 0x01	; 1
    22ca:	50 40       	sbci	r21, 0x00	; 0
    22cc:	a9 f7       	brne	.-22     	; 0x22b8 <__mulsf3_pse+0x64>
    22ce:	9e 3f       	cpi	r25, 0xFE	; 254
    22d0:	51 05       	cpc	r21, r1
    22d2:	80 f0       	brcs	.+32     	; 0x22f4 <__mulsf3_pse+0xa0>
    22d4:	0c 94 be 10 	jmp	0x217c	; 0x217c <__fp_inf>
    22d8:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_szero>
    22dc:	5f 3f       	cpi	r21, 0xFF	; 255
    22de:	e4 f3       	brlt	.-8      	; 0x22d8 <__mulsf3_pse+0x84>
    22e0:	98 3e       	cpi	r25, 0xE8	; 232
    22e2:	d4 f3       	brlt	.-12     	; 0x22d8 <__mulsf3_pse+0x84>
    22e4:	86 95       	lsr	r24
    22e6:	77 95       	ror	r23
    22e8:	67 95       	ror	r22
    22ea:	b7 95       	ror	r27
    22ec:	f7 95       	ror	r31
    22ee:	e7 95       	ror	r30
    22f0:	9f 5f       	subi	r25, 0xFF	; 255
    22f2:	c1 f7       	brne	.-16     	; 0x22e4 <__mulsf3_pse+0x90>
    22f4:	fe 2b       	or	r31, r30
    22f6:	88 0f       	add	r24, r24
    22f8:	91 1d       	adc	r25, r1
    22fa:	96 95       	lsr	r25
    22fc:	87 95       	ror	r24
    22fe:	97 f9       	bld	r25, 7
    2300:	08 95       	ret
    2302:	19 f4       	brne	.+6      	; 0x230a <__mulsf3_pse+0xb6>
    2304:	16 f4       	brtc	.+4      	; 0x230a <__mulsf3_pse+0xb6>
    2306:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__fp_nan>
    230a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__fp_mpack>

0000230e <sqrt>:
    230e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__fp_splitA>
    2312:	b8 f3       	brcs	.-18     	; 0x2302 <__mulsf3_pse+0xae>
    2314:	99 23       	and	r25, r25
    2316:	c9 f3       	breq	.-14     	; 0x230a <__mulsf3_pse+0xb6>
    2318:	b6 f3       	brts	.-20     	; 0x2306 <__mulsf3_pse+0xb2>
    231a:	9f 57       	subi	r25, 0x7F	; 127
    231c:	55 0b       	sbc	r21, r21
    231e:	87 ff       	sbrs	r24, 7
    2320:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fp_norm2>
    2324:	00 24       	eor	r0, r0
    2326:	a0 e6       	ldi	r26, 0x60	; 96
    2328:	40 ea       	ldi	r20, 0xA0	; 160
    232a:	90 01       	movw	r18, r0
    232c:	80 58       	subi	r24, 0x80	; 128
    232e:	56 95       	lsr	r21
    2330:	97 95       	ror	r25
    2332:	28 f4       	brcc	.+10     	; 0x233e <sqrt+0x30>
    2334:	80 5c       	subi	r24, 0xC0	; 192
    2336:	66 0f       	add	r22, r22
    2338:	77 1f       	adc	r23, r23
    233a:	88 1f       	adc	r24, r24
    233c:	20 f0       	brcs	.+8      	; 0x2346 <sqrt+0x38>
    233e:	26 17       	cp	r18, r22
    2340:	37 07       	cpc	r19, r23
    2342:	48 07       	cpc	r20, r24
    2344:	30 f4       	brcc	.+12     	; 0x2352 <sqrt+0x44>
    2346:	62 1b       	sub	r22, r18
    2348:	73 0b       	sbc	r23, r19
    234a:	84 0b       	sbc	r24, r20
    234c:	20 29       	or	r18, r0
    234e:	31 29       	or	r19, r1
    2350:	4a 2b       	or	r20, r26
    2352:	a6 95       	lsr	r26
    2354:	17 94       	ror	r1
    2356:	07 94       	ror	r0
    2358:	20 25       	eor	r18, r0
    235a:	31 25       	eor	r19, r1
    235c:	4a 27       	eor	r20, r26
    235e:	58 f7       	brcc	.-42     	; 0x2336 <sqrt+0x28>
    2360:	66 0f       	add	r22, r22
    2362:	77 1f       	adc	r23, r23
    2364:	88 1f       	adc	r24, r24
    2366:	20 f0       	brcs	.+8      	; 0x2370 <sqrt+0x62>
    2368:	26 17       	cp	r18, r22
    236a:	37 07       	cpc	r19, r23
    236c:	48 07       	cpc	r20, r24
    236e:	30 f4       	brcc	.+12     	; 0x237c <sqrt+0x6e>
    2370:	62 0b       	sbc	r22, r18
    2372:	73 0b       	sbc	r23, r19
    2374:	84 0b       	sbc	r24, r20
    2376:	20 0d       	add	r18, r0
    2378:	31 1d       	adc	r19, r1
    237a:	41 1d       	adc	r20, r1
    237c:	a0 95       	com	r26
    237e:	81 f7       	brne	.-32     	; 0x2360 <sqrt+0x52>
    2380:	b9 01       	movw	r22, r18
    2382:	84 2f       	mov	r24, r20
    2384:	91 58       	subi	r25, 0x81	; 129
    2386:	88 0f       	add	r24, r24
    2388:	96 95       	lsr	r25
    238a:	87 95       	ror	r24
    238c:	08 95       	ret

0000238e <__fp_mpack>:
    238e:	9f 3f       	cpi	r25, 0xFF	; 255
    2390:	31 f0       	breq	.+12     	; 0x239e <__fp_mpack_finite+0xc>

00002392 <__fp_mpack_finite>:
    2392:	91 50       	subi	r25, 0x01	; 1
    2394:	20 f4       	brcc	.+8      	; 0x239e <__fp_mpack_finite+0xc>
    2396:	87 95       	ror	r24
    2398:	77 95       	ror	r23
    239a:	67 95       	ror	r22
    239c:	b7 95       	ror	r27
    239e:	88 0f       	add	r24, r24
    23a0:	91 1d       	adc	r25, r1
    23a2:	96 95       	lsr	r25
    23a4:	87 95       	ror	r24
    23a6:	97 f9       	bld	r25, 7
    23a8:	08 95       	ret

000023aa <__fp_norm2>:
    23aa:	91 50       	subi	r25, 0x01	; 1
    23ac:	50 40       	sbci	r21, 0x00	; 0
    23ae:	66 0f       	add	r22, r22
    23b0:	77 1f       	adc	r23, r23
    23b2:	88 1f       	adc	r24, r24
    23b4:	d2 f7       	brpl	.-12     	; 0x23aa <__fp_norm2>
    23b6:	08 95       	ret

000023b8 <__divmodhi4>:
    23b8:	97 fb       	bst	r25, 7
    23ba:	07 2e       	mov	r0, r23
    23bc:	16 f4       	brtc	.+4      	; 0x23c2 <__divmodhi4+0xa>
    23be:	00 94       	com	r0
    23c0:	07 d0       	rcall	.+14     	; 0x23d0 <__divmodhi4_neg1>
    23c2:	77 fd       	sbrc	r23, 7
    23c4:	09 d0       	rcall	.+18     	; 0x23d8 <__divmodhi4_neg2>
    23c6:	0e 94 18 12 	call	0x2430	; 0x2430 <__udivmodhi4>
    23ca:	07 fc       	sbrc	r0, 7
    23cc:	05 d0       	rcall	.+10     	; 0x23d8 <__divmodhi4_neg2>
    23ce:	3e f4       	brtc	.+14     	; 0x23de <__divmodhi4_exit>

000023d0 <__divmodhi4_neg1>:
    23d0:	90 95       	com	r25
    23d2:	81 95       	neg	r24
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	08 95       	ret

000023d8 <__divmodhi4_neg2>:
    23d8:	70 95       	com	r23
    23da:	61 95       	neg	r22
    23dc:	7f 4f       	sbci	r23, 0xFF	; 255

000023de <__divmodhi4_exit>:
    23de:	08 95       	ret

000023e0 <__udivmodsi4>:
    23e0:	a1 e2       	ldi	r26, 0x21	; 33
    23e2:	1a 2e       	mov	r1, r26
    23e4:	aa 1b       	sub	r26, r26
    23e6:	bb 1b       	sub	r27, r27
    23e8:	fd 01       	movw	r30, r26
    23ea:	0d c0       	rjmp	.+26     	; 0x2406 <__udivmodsi4_ep>

000023ec <__udivmodsi4_loop>:
    23ec:	aa 1f       	adc	r26, r26
    23ee:	bb 1f       	adc	r27, r27
    23f0:	ee 1f       	adc	r30, r30
    23f2:	ff 1f       	adc	r31, r31
    23f4:	a2 17       	cp	r26, r18
    23f6:	b3 07       	cpc	r27, r19
    23f8:	e4 07       	cpc	r30, r20
    23fa:	f5 07       	cpc	r31, r21
    23fc:	20 f0       	brcs	.+8      	; 0x2406 <__udivmodsi4_ep>
    23fe:	a2 1b       	sub	r26, r18
    2400:	b3 0b       	sbc	r27, r19
    2402:	e4 0b       	sbc	r30, r20
    2404:	f5 0b       	sbc	r31, r21

00002406 <__udivmodsi4_ep>:
    2406:	66 1f       	adc	r22, r22
    2408:	77 1f       	adc	r23, r23
    240a:	88 1f       	adc	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	1a 94       	dec	r1
    2410:	69 f7       	brne	.-38     	; 0x23ec <__udivmodsi4_loop>
    2412:	60 95       	com	r22
    2414:	70 95       	com	r23
    2416:	80 95       	com	r24
    2418:	90 95       	com	r25
    241a:	9b 01       	movw	r18, r22
    241c:	ac 01       	movw	r20, r24
    241e:	bd 01       	movw	r22, r26
    2420:	cf 01       	movw	r24, r30
    2422:	08 95       	ret

00002424 <__tablejump2__>:
    2424:	ee 0f       	add	r30, r30
    2426:	ff 1f       	adc	r31, r31
    2428:	05 90       	lpm	r0, Z+
    242a:	f4 91       	lpm	r31, Z
    242c:	e0 2d       	mov	r30, r0
    242e:	09 94       	ijmp

00002430 <__udivmodhi4>:
    2430:	aa 1b       	sub	r26, r26
    2432:	bb 1b       	sub	r27, r27
    2434:	51 e1       	ldi	r21, 0x11	; 17
    2436:	07 c0       	rjmp	.+14     	; 0x2446 <__udivmodhi4_ep>

00002438 <__udivmodhi4_loop>:
    2438:	aa 1f       	adc	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	a6 17       	cp	r26, r22
    243e:	b7 07       	cpc	r27, r23
    2440:	10 f0       	brcs	.+4      	; 0x2446 <__udivmodhi4_ep>
    2442:	a6 1b       	sub	r26, r22
    2444:	b7 0b       	sbc	r27, r23

00002446 <__udivmodhi4_ep>:
    2446:	88 1f       	adc	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	5a 95       	dec	r21
    244c:	a9 f7       	brne	.-22     	; 0x2438 <__udivmodhi4_loop>
    244e:	80 95       	com	r24
    2450:	90 95       	com	r25
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	08 95       	ret

00002458 <malloc>:
    2458:	0f 93       	push	r16
    245a:	1f 93       	push	r17
    245c:	cf 93       	push	r28
    245e:	df 93       	push	r29
    2460:	82 30       	cpi	r24, 0x02	; 2
    2462:	91 05       	cpc	r25, r1
    2464:	10 f4       	brcc	.+4      	; 0x246a <malloc+0x12>
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <__flp>
    246e:	f0 91 20 05 	lds	r31, 0x0520	; 0x800520 <__flp+0x1>
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	a0 e0       	ldi	r26, 0x00	; 0
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	30 97       	sbiw	r30, 0x00	; 0
    247c:	19 f1       	breq	.+70     	; 0x24c4 <malloc+0x6c>
    247e:	40 81       	ld	r20, Z
    2480:	51 81       	ldd	r21, Z+1	; 0x01
    2482:	02 81       	ldd	r16, Z+2	; 0x02
    2484:	13 81       	ldd	r17, Z+3	; 0x03
    2486:	48 17       	cp	r20, r24
    2488:	59 07       	cpc	r21, r25
    248a:	c8 f0       	brcs	.+50     	; 0x24be <malloc+0x66>
    248c:	84 17       	cp	r24, r20
    248e:	95 07       	cpc	r25, r21
    2490:	69 f4       	brne	.+26     	; 0x24ac <malloc+0x54>
    2492:	10 97       	sbiw	r26, 0x00	; 0
    2494:	31 f0       	breq	.+12     	; 0x24a2 <malloc+0x4a>
    2496:	12 96       	adiw	r26, 0x02	; 2
    2498:	0c 93       	st	X, r16
    249a:	12 97       	sbiw	r26, 0x02	; 2
    249c:	13 96       	adiw	r26, 0x03	; 3
    249e:	1c 93       	st	X, r17
    24a0:	27 c0       	rjmp	.+78     	; 0x24f0 <malloc+0x98>
    24a2:	00 93 1f 05 	sts	0x051F, r16	; 0x80051f <__flp>
    24a6:	10 93 20 05 	sts	0x0520, r17	; 0x800520 <__flp+0x1>
    24aa:	22 c0       	rjmp	.+68     	; 0x24f0 <malloc+0x98>
    24ac:	21 15       	cp	r18, r1
    24ae:	31 05       	cpc	r19, r1
    24b0:	19 f0       	breq	.+6      	; 0x24b8 <malloc+0x60>
    24b2:	42 17       	cp	r20, r18
    24b4:	53 07       	cpc	r21, r19
    24b6:	18 f4       	brcc	.+6      	; 0x24be <malloc+0x66>
    24b8:	9a 01       	movw	r18, r20
    24ba:	bd 01       	movw	r22, r26
    24bc:	ef 01       	movw	r28, r30
    24be:	df 01       	movw	r26, r30
    24c0:	f8 01       	movw	r30, r16
    24c2:	db cf       	rjmp	.-74     	; 0x247a <malloc+0x22>
    24c4:	21 15       	cp	r18, r1
    24c6:	31 05       	cpc	r19, r1
    24c8:	f9 f0       	breq	.+62     	; 0x2508 <malloc+0xb0>
    24ca:	28 1b       	sub	r18, r24
    24cc:	39 0b       	sbc	r19, r25
    24ce:	24 30       	cpi	r18, 0x04	; 4
    24d0:	31 05       	cpc	r19, r1
    24d2:	80 f4       	brcc	.+32     	; 0x24f4 <malloc+0x9c>
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	61 15       	cp	r22, r1
    24da:	71 05       	cpc	r23, r1
    24dc:	21 f0       	breq	.+8      	; 0x24e6 <malloc+0x8e>
    24de:	fb 01       	movw	r30, r22
    24e0:	93 83       	std	Z+3, r25	; 0x03
    24e2:	82 83       	std	Z+2, r24	; 0x02
    24e4:	04 c0       	rjmp	.+8      	; 0x24ee <malloc+0x96>
    24e6:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <__flp+0x1>
    24ea:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <__flp>
    24ee:	fe 01       	movw	r30, r28
    24f0:	32 96       	adiw	r30, 0x02	; 2
    24f2:	44 c0       	rjmp	.+136    	; 0x257c <malloc+0x124>
    24f4:	fe 01       	movw	r30, r28
    24f6:	e2 0f       	add	r30, r18
    24f8:	f3 1f       	adc	r31, r19
    24fa:	81 93       	st	Z+, r24
    24fc:	91 93       	st	Z+, r25
    24fe:	22 50       	subi	r18, 0x02	; 2
    2500:	31 09       	sbc	r19, r1
    2502:	39 83       	std	Y+1, r19	; 0x01
    2504:	28 83       	st	Y, r18
    2506:	3a c0       	rjmp	.+116    	; 0x257c <malloc+0x124>
    2508:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <__brkval>
    250c:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <__brkval+0x1>
    2510:	23 2b       	or	r18, r19
    2512:	41 f4       	brne	.+16     	; 0x2524 <malloc+0xcc>
    2514:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    2518:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    251c:	30 93 1e 05 	sts	0x051E, r19	; 0x80051e <__brkval+0x1>
    2520:	20 93 1d 05 	sts	0x051D, r18	; 0x80051d <__brkval>
    2524:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2528:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    252c:	21 15       	cp	r18, r1
    252e:	31 05       	cpc	r19, r1
    2530:	41 f4       	brne	.+16     	; 0x2542 <malloc+0xea>
    2532:	2d b7       	in	r18, 0x3d	; 61
    2534:	3e b7       	in	r19, 0x3e	; 62
    2536:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    253a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    253e:	24 1b       	sub	r18, r20
    2540:	35 0b       	sbc	r19, r21
    2542:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <__brkval>
    2546:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <__brkval+0x1>
    254a:	e2 17       	cp	r30, r18
    254c:	f3 07       	cpc	r31, r19
    254e:	a0 f4       	brcc	.+40     	; 0x2578 <malloc+0x120>
    2550:	2e 1b       	sub	r18, r30
    2552:	3f 0b       	sbc	r19, r31
    2554:	28 17       	cp	r18, r24
    2556:	39 07       	cpc	r19, r25
    2558:	78 f0       	brcs	.+30     	; 0x2578 <malloc+0x120>
    255a:	ac 01       	movw	r20, r24
    255c:	4e 5f       	subi	r20, 0xFE	; 254
    255e:	5f 4f       	sbci	r21, 0xFF	; 255
    2560:	24 17       	cp	r18, r20
    2562:	35 07       	cpc	r19, r21
    2564:	48 f0       	brcs	.+18     	; 0x2578 <malloc+0x120>
    2566:	4e 0f       	add	r20, r30
    2568:	5f 1f       	adc	r21, r31
    256a:	50 93 1e 05 	sts	0x051E, r21	; 0x80051e <__brkval+0x1>
    256e:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <__brkval>
    2572:	81 93       	st	Z+, r24
    2574:	91 93       	st	Z+, r25
    2576:	02 c0       	rjmp	.+4      	; 0x257c <malloc+0x124>
    2578:	e0 e0       	ldi	r30, 0x00	; 0
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	cf 01       	movw	r24, r30
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	08 95       	ret

00002588 <free>:
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	09 f4       	brne	.+2      	; 0x2592 <free+0xa>
    2590:	81 c0       	rjmp	.+258    	; 0x2694 <free+0x10c>
    2592:	fc 01       	movw	r30, r24
    2594:	32 97       	sbiw	r30, 0x02	; 2
    2596:	13 82       	std	Z+3, r1	; 0x03
    2598:	12 82       	std	Z+2, r1	; 0x02
    259a:	a0 91 1f 05 	lds	r26, 0x051F	; 0x80051f <__flp>
    259e:	b0 91 20 05 	lds	r27, 0x0520	; 0x800520 <__flp+0x1>
    25a2:	10 97       	sbiw	r26, 0x00	; 0
    25a4:	81 f4       	brne	.+32     	; 0x25c6 <free+0x3e>
    25a6:	20 81       	ld	r18, Z
    25a8:	31 81       	ldd	r19, Z+1	; 0x01
    25aa:	82 0f       	add	r24, r18
    25ac:	93 1f       	adc	r25, r19
    25ae:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <__brkval>
    25b2:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <__brkval+0x1>
    25b6:	28 17       	cp	r18, r24
    25b8:	39 07       	cpc	r19, r25
    25ba:	51 f5       	brne	.+84     	; 0x2610 <free+0x88>
    25bc:	f0 93 1e 05 	sts	0x051E, r31	; 0x80051e <__brkval+0x1>
    25c0:	e0 93 1d 05 	sts	0x051D, r30	; 0x80051d <__brkval>
    25c4:	67 c0       	rjmp	.+206    	; 0x2694 <free+0x10c>
    25c6:	ed 01       	movw	r28, r26
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	ce 17       	cp	r28, r30
    25ce:	df 07       	cpc	r29, r31
    25d0:	40 f4       	brcc	.+16     	; 0x25e2 <free+0x5a>
    25d2:	4a 81       	ldd	r20, Y+2	; 0x02
    25d4:	5b 81       	ldd	r21, Y+3	; 0x03
    25d6:	9e 01       	movw	r18, r28
    25d8:	41 15       	cp	r20, r1
    25da:	51 05       	cpc	r21, r1
    25dc:	f1 f0       	breq	.+60     	; 0x261a <free+0x92>
    25de:	ea 01       	movw	r28, r20
    25e0:	f5 cf       	rjmp	.-22     	; 0x25cc <free+0x44>
    25e2:	d3 83       	std	Z+3, r29	; 0x03
    25e4:	c2 83       	std	Z+2, r28	; 0x02
    25e6:	40 81       	ld	r20, Z
    25e8:	51 81       	ldd	r21, Z+1	; 0x01
    25ea:	84 0f       	add	r24, r20
    25ec:	95 1f       	adc	r25, r21
    25ee:	c8 17       	cp	r28, r24
    25f0:	d9 07       	cpc	r29, r25
    25f2:	59 f4       	brne	.+22     	; 0x260a <free+0x82>
    25f4:	88 81       	ld	r24, Y
    25f6:	99 81       	ldd	r25, Y+1	; 0x01
    25f8:	84 0f       	add	r24, r20
    25fa:	95 1f       	adc	r25, r21
    25fc:	02 96       	adiw	r24, 0x02	; 2
    25fe:	91 83       	std	Z+1, r25	; 0x01
    2600:	80 83       	st	Z, r24
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	93 83       	std	Z+3, r25	; 0x03
    2608:	82 83       	std	Z+2, r24	; 0x02
    260a:	21 15       	cp	r18, r1
    260c:	31 05       	cpc	r19, r1
    260e:	29 f4       	brne	.+10     	; 0x261a <free+0x92>
    2610:	f0 93 20 05 	sts	0x0520, r31	; 0x800520 <__flp+0x1>
    2614:	e0 93 1f 05 	sts	0x051F, r30	; 0x80051f <__flp>
    2618:	3d c0       	rjmp	.+122    	; 0x2694 <free+0x10c>
    261a:	e9 01       	movw	r28, r18
    261c:	fb 83       	std	Y+3, r31	; 0x03
    261e:	ea 83       	std	Y+2, r30	; 0x02
    2620:	49 91       	ld	r20, Y+
    2622:	59 91       	ld	r21, Y+
    2624:	c4 0f       	add	r28, r20
    2626:	d5 1f       	adc	r29, r21
    2628:	ec 17       	cp	r30, r28
    262a:	fd 07       	cpc	r31, r29
    262c:	61 f4       	brne	.+24     	; 0x2646 <free+0xbe>
    262e:	80 81       	ld	r24, Z
    2630:	91 81       	ldd	r25, Z+1	; 0x01
    2632:	84 0f       	add	r24, r20
    2634:	95 1f       	adc	r25, r21
    2636:	02 96       	adiw	r24, 0x02	; 2
    2638:	e9 01       	movw	r28, r18
    263a:	99 83       	std	Y+1, r25	; 0x01
    263c:	88 83       	st	Y, r24
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	e0 e0       	ldi	r30, 0x00	; 0
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	12 96       	adiw	r26, 0x02	; 2
    264c:	8d 91       	ld	r24, X+
    264e:	9c 91       	ld	r25, X
    2650:	13 97       	sbiw	r26, 0x03	; 3
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	19 f0       	breq	.+6      	; 0x265c <free+0xd4>
    2656:	fd 01       	movw	r30, r26
    2658:	dc 01       	movw	r26, r24
    265a:	f7 cf       	rjmp	.-18     	; 0x264a <free+0xc2>
    265c:	8d 91       	ld	r24, X+
    265e:	9c 91       	ld	r25, X
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	9d 01       	movw	r18, r26
    2664:	2e 5f       	subi	r18, 0xFE	; 254
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	82 0f       	add	r24, r18
    266a:	93 1f       	adc	r25, r19
    266c:	20 91 1d 05 	lds	r18, 0x051D	; 0x80051d <__brkval>
    2670:	30 91 1e 05 	lds	r19, 0x051E	; 0x80051e <__brkval+0x1>
    2674:	28 17       	cp	r18, r24
    2676:	39 07       	cpc	r19, r25
    2678:	69 f4       	brne	.+26     	; 0x2694 <free+0x10c>
    267a:	30 97       	sbiw	r30, 0x00	; 0
    267c:	29 f4       	brne	.+10     	; 0x2688 <free+0x100>
    267e:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <__flp+0x1>
    2682:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <__flp>
    2686:	02 c0       	rjmp	.+4      	; 0x268c <free+0x104>
    2688:	13 82       	std	Z+3, r1	; 0x03
    268a:	12 82       	std	Z+2, r1	; 0x02
    268c:	b0 93 1e 05 	sts	0x051E, r27	; 0x80051e <__brkval+0x1>
    2690:	a0 93 1d 05 	sts	0x051D, r26	; 0x80051d <__brkval>
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <strcat>:
    269a:	fb 01       	movw	r30, r22
    269c:	dc 01       	movw	r26, r24
    269e:	0d 90       	ld	r0, X+
    26a0:	00 20       	and	r0, r0
    26a2:	e9 f7       	brne	.-6      	; 0x269e <strcat+0x4>
    26a4:	11 97       	sbiw	r26, 0x01	; 1
    26a6:	01 90       	ld	r0, Z+
    26a8:	0d 92       	st	X+, r0
    26aa:	00 20       	and	r0, r0
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <strcat+0xc>
    26ae:	08 95       	ret

000026b0 <strcpy>:
    26b0:	fb 01       	movw	r30, r22
    26b2:	dc 01       	movw	r26, r24
    26b4:	01 90       	ld	r0, Z+
    26b6:	0d 92       	st	X+, r0
    26b8:	00 20       	and	r0, r0
    26ba:	e1 f7       	brne	.-8      	; 0x26b4 <strcpy+0x4>
    26bc:	08 95       	ret

000026be <__itoa_ncheck>:
    26be:	bb 27       	eor	r27, r27
    26c0:	4a 30       	cpi	r20, 0x0A	; 10
    26c2:	31 f4       	brne	.+12     	; 0x26d0 <__itoa_ncheck+0x12>
    26c4:	99 23       	and	r25, r25
    26c6:	22 f4       	brpl	.+8      	; 0x26d0 <__itoa_ncheck+0x12>
    26c8:	bd e2       	ldi	r27, 0x2D	; 45
    26ca:	90 95       	com	r25
    26cc:	81 95       	neg	r24
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__utoa_common>

000026d4 <__utoa_ncheck>:
    26d4:	bb 27       	eor	r27, r27

000026d6 <__utoa_common>:
    26d6:	fb 01       	movw	r30, r22
    26d8:	55 27       	eor	r21, r21
    26da:	aa 27       	eor	r26, r26
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	aa 1f       	adc	r26, r26
    26e2:	a4 17       	cp	r26, r20
    26e4:	10 f0       	brcs	.+4      	; 0x26ea <__utoa_common+0x14>
    26e6:	a4 1b       	sub	r26, r20
    26e8:	83 95       	inc	r24
    26ea:	50 51       	subi	r21, 0x10	; 16
    26ec:	b9 f7       	brne	.-18     	; 0x26dc <__utoa_common+0x6>
    26ee:	a0 5d       	subi	r26, 0xD0	; 208
    26f0:	aa 33       	cpi	r26, 0x3A	; 58
    26f2:	08 f0       	brcs	.+2      	; 0x26f6 <__utoa_common+0x20>
    26f4:	a9 5d       	subi	r26, 0xD9	; 217
    26f6:	a1 93       	st	Z+, r26
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	79 f7       	brne	.-34     	; 0x26da <__utoa_common+0x4>
    26fc:	b1 11       	cpse	r27, r1
    26fe:	b1 93       	st	Z+, r27
    2700:	11 92       	st	Z+, r1
    2702:	cb 01       	movw	r24, r22
    2704:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <strrev>

00002708 <sprintf>:
    2708:	ae e0       	ldi	r26, 0x0E	; 14
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ea e8       	ldi	r30, 0x8A	; 138
    270e:	f3 e1       	ldi	r31, 0x13	; 19
    2710:	0c 94 55 16 	jmp	0x2caa	; 0x2caa <__prologue_saves__+0x1c>
    2714:	0d 89       	ldd	r16, Y+21	; 0x15
    2716:	1e 89       	ldd	r17, Y+22	; 0x16
    2718:	86 e0       	ldi	r24, 0x06	; 6
    271a:	8c 83       	std	Y+4, r24	; 0x04
    271c:	1a 83       	std	Y+2, r17	; 0x02
    271e:	09 83       	std	Y+1, r16	; 0x01
    2720:	8f ef       	ldi	r24, 0xFF	; 255
    2722:	9f e7       	ldi	r25, 0x7F	; 127
    2724:	9e 83       	std	Y+6, r25	; 0x06
    2726:	8d 83       	std	Y+5, r24	; 0x05
    2728:	ae 01       	movw	r20, r28
    272a:	47 5e       	subi	r20, 0xE7	; 231
    272c:	5f 4f       	sbci	r21, 0xFF	; 255
    272e:	6f 89       	ldd	r22, Y+23	; 0x17
    2730:	78 8d       	ldd	r23, Y+24	; 0x18
    2732:	ce 01       	movw	r24, r28
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	0e 94 a6 13 	call	0x274c	; 0x274c <vfprintf>
    273a:	ef 81       	ldd	r30, Y+7	; 0x07
    273c:	f8 85       	ldd	r31, Y+8	; 0x08
    273e:	e0 0f       	add	r30, r16
    2740:	f1 1f       	adc	r31, r17
    2742:	10 82       	st	Z, r1
    2744:	2e 96       	adiw	r28, 0x0e	; 14
    2746:	e4 e0       	ldi	r30, 0x04	; 4
    2748:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <__epilogue_restores__+0x1c>

0000274c <vfprintf>:
    274c:	ab e0       	ldi	r26, 0x0B	; 11
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	ec ea       	ldi	r30, 0xAC	; 172
    2752:	f3 e1       	ldi	r31, 0x13	; 19
    2754:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__prologue_saves__>
    2758:	6c 01       	movw	r12, r24
    275a:	7b 01       	movw	r14, r22
    275c:	8a 01       	movw	r16, r20
    275e:	fc 01       	movw	r30, r24
    2760:	17 82       	std	Z+7, r1	; 0x07
    2762:	16 82       	std	Z+6, r1	; 0x06
    2764:	83 81       	ldd	r24, Z+3	; 0x03
    2766:	81 ff       	sbrs	r24, 1
    2768:	cc c1       	rjmp	.+920    	; 0x2b02 <vfprintf+0x3b6>
    276a:	ce 01       	movw	r24, r28
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	3c 01       	movw	r6, r24
    2770:	f6 01       	movw	r30, r12
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	f7 01       	movw	r30, r14
    2776:	93 fd       	sbrc	r25, 3
    2778:	85 91       	lpm	r24, Z+
    277a:	93 ff       	sbrs	r25, 3
    277c:	81 91       	ld	r24, Z+
    277e:	7f 01       	movw	r14, r30
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <vfprintf+0x3a>
    2784:	ba c1       	rjmp	.+884    	; 0x2afa <vfprintf+0x3ae>
    2786:	85 32       	cpi	r24, 0x25	; 37
    2788:	39 f4       	brne	.+14     	; 0x2798 <vfprintf+0x4c>
    278a:	93 fd       	sbrc	r25, 3
    278c:	85 91       	lpm	r24, Z+
    278e:	93 ff       	sbrs	r25, 3
    2790:	81 91       	ld	r24, Z+
    2792:	7f 01       	movw	r14, r30
    2794:	85 32       	cpi	r24, 0x25	; 37
    2796:	29 f4       	brne	.+10     	; 0x27a2 <vfprintf+0x56>
    2798:	b6 01       	movw	r22, r12
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    27a0:	e7 cf       	rjmp	.-50     	; 0x2770 <vfprintf+0x24>
    27a2:	91 2c       	mov	r9, r1
    27a4:	21 2c       	mov	r2, r1
    27a6:	31 2c       	mov	r3, r1
    27a8:	ff e1       	ldi	r31, 0x1F	; 31
    27aa:	f3 15       	cp	r31, r3
    27ac:	d8 f0       	brcs	.+54     	; 0x27e4 <vfprintf+0x98>
    27ae:	8b 32       	cpi	r24, 0x2B	; 43
    27b0:	79 f0       	breq	.+30     	; 0x27d0 <vfprintf+0x84>
    27b2:	38 f4       	brcc	.+14     	; 0x27c2 <vfprintf+0x76>
    27b4:	80 32       	cpi	r24, 0x20	; 32
    27b6:	79 f0       	breq	.+30     	; 0x27d6 <vfprintf+0x8a>
    27b8:	83 32       	cpi	r24, 0x23	; 35
    27ba:	a1 f4       	brne	.+40     	; 0x27e4 <vfprintf+0x98>
    27bc:	23 2d       	mov	r18, r3
    27be:	20 61       	ori	r18, 0x10	; 16
    27c0:	1d c0       	rjmp	.+58     	; 0x27fc <vfprintf+0xb0>
    27c2:	8d 32       	cpi	r24, 0x2D	; 45
    27c4:	61 f0       	breq	.+24     	; 0x27de <vfprintf+0x92>
    27c6:	80 33       	cpi	r24, 0x30	; 48
    27c8:	69 f4       	brne	.+26     	; 0x27e4 <vfprintf+0x98>
    27ca:	23 2d       	mov	r18, r3
    27cc:	21 60       	ori	r18, 0x01	; 1
    27ce:	16 c0       	rjmp	.+44     	; 0x27fc <vfprintf+0xb0>
    27d0:	83 2d       	mov	r24, r3
    27d2:	82 60       	ori	r24, 0x02	; 2
    27d4:	38 2e       	mov	r3, r24
    27d6:	e3 2d       	mov	r30, r3
    27d8:	e4 60       	ori	r30, 0x04	; 4
    27da:	3e 2e       	mov	r3, r30
    27dc:	2a c0       	rjmp	.+84     	; 0x2832 <vfprintf+0xe6>
    27de:	f3 2d       	mov	r31, r3
    27e0:	f8 60       	ori	r31, 0x08	; 8
    27e2:	1d c0       	rjmp	.+58     	; 0x281e <vfprintf+0xd2>
    27e4:	37 fc       	sbrc	r3, 7
    27e6:	2d c0       	rjmp	.+90     	; 0x2842 <vfprintf+0xf6>
    27e8:	20 ed       	ldi	r18, 0xD0	; 208
    27ea:	28 0f       	add	r18, r24
    27ec:	2a 30       	cpi	r18, 0x0A	; 10
    27ee:	40 f0       	brcs	.+16     	; 0x2800 <vfprintf+0xb4>
    27f0:	8e 32       	cpi	r24, 0x2E	; 46
    27f2:	b9 f4       	brne	.+46     	; 0x2822 <vfprintf+0xd6>
    27f4:	36 fc       	sbrc	r3, 6
    27f6:	81 c1       	rjmp	.+770    	; 0x2afa <vfprintf+0x3ae>
    27f8:	23 2d       	mov	r18, r3
    27fa:	20 64       	ori	r18, 0x40	; 64
    27fc:	32 2e       	mov	r3, r18
    27fe:	19 c0       	rjmp	.+50     	; 0x2832 <vfprintf+0xe6>
    2800:	36 fe       	sbrs	r3, 6
    2802:	06 c0       	rjmp	.+12     	; 0x2810 <vfprintf+0xc4>
    2804:	8a e0       	ldi	r24, 0x0A	; 10
    2806:	98 9e       	mul	r9, r24
    2808:	20 0d       	add	r18, r0
    280a:	11 24       	eor	r1, r1
    280c:	92 2e       	mov	r9, r18
    280e:	11 c0       	rjmp	.+34     	; 0x2832 <vfprintf+0xe6>
    2810:	ea e0       	ldi	r30, 0x0A	; 10
    2812:	2e 9e       	mul	r2, r30
    2814:	20 0d       	add	r18, r0
    2816:	11 24       	eor	r1, r1
    2818:	22 2e       	mov	r2, r18
    281a:	f3 2d       	mov	r31, r3
    281c:	f0 62       	ori	r31, 0x20	; 32
    281e:	3f 2e       	mov	r3, r31
    2820:	08 c0       	rjmp	.+16     	; 0x2832 <vfprintf+0xe6>
    2822:	8c 36       	cpi	r24, 0x6C	; 108
    2824:	21 f4       	brne	.+8      	; 0x282e <vfprintf+0xe2>
    2826:	83 2d       	mov	r24, r3
    2828:	80 68       	ori	r24, 0x80	; 128
    282a:	38 2e       	mov	r3, r24
    282c:	02 c0       	rjmp	.+4      	; 0x2832 <vfprintf+0xe6>
    282e:	88 36       	cpi	r24, 0x68	; 104
    2830:	41 f4       	brne	.+16     	; 0x2842 <vfprintf+0xf6>
    2832:	f7 01       	movw	r30, r14
    2834:	93 fd       	sbrc	r25, 3
    2836:	85 91       	lpm	r24, Z+
    2838:	93 ff       	sbrs	r25, 3
    283a:	81 91       	ld	r24, Z+
    283c:	7f 01       	movw	r14, r30
    283e:	81 11       	cpse	r24, r1
    2840:	b3 cf       	rjmp	.-154    	; 0x27a8 <vfprintf+0x5c>
    2842:	98 2f       	mov	r25, r24
    2844:	9f 7d       	andi	r25, 0xDF	; 223
    2846:	95 54       	subi	r25, 0x45	; 69
    2848:	93 30       	cpi	r25, 0x03	; 3
    284a:	28 f4       	brcc	.+10     	; 0x2856 <vfprintf+0x10a>
    284c:	0c 5f       	subi	r16, 0xFC	; 252
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	9f e3       	ldi	r25, 0x3F	; 63
    2852:	99 83       	std	Y+1, r25	; 0x01
    2854:	0d c0       	rjmp	.+26     	; 0x2870 <vfprintf+0x124>
    2856:	83 36       	cpi	r24, 0x63	; 99
    2858:	31 f0       	breq	.+12     	; 0x2866 <vfprintf+0x11a>
    285a:	83 37       	cpi	r24, 0x73	; 115
    285c:	71 f0       	breq	.+28     	; 0x287a <vfprintf+0x12e>
    285e:	83 35       	cpi	r24, 0x53	; 83
    2860:	09 f0       	breq	.+2      	; 0x2864 <vfprintf+0x118>
    2862:	59 c0       	rjmp	.+178    	; 0x2916 <vfprintf+0x1ca>
    2864:	21 c0       	rjmp	.+66     	; 0x28a8 <vfprintf+0x15c>
    2866:	f8 01       	movw	r30, r16
    2868:	80 81       	ld	r24, Z
    286a:	89 83       	std	Y+1, r24	; 0x01
    286c:	0e 5f       	subi	r16, 0xFE	; 254
    286e:	1f 4f       	sbci	r17, 0xFF	; 255
    2870:	88 24       	eor	r8, r8
    2872:	83 94       	inc	r8
    2874:	91 2c       	mov	r9, r1
    2876:	53 01       	movw	r10, r6
    2878:	13 c0       	rjmp	.+38     	; 0x28a0 <vfprintf+0x154>
    287a:	28 01       	movw	r4, r16
    287c:	f2 e0       	ldi	r31, 0x02	; 2
    287e:	4f 0e       	add	r4, r31
    2880:	51 1c       	adc	r5, r1
    2882:	f8 01       	movw	r30, r16
    2884:	a0 80       	ld	r10, Z
    2886:	b1 80       	ldd	r11, Z+1	; 0x01
    2888:	36 fe       	sbrs	r3, 6
    288a:	03 c0       	rjmp	.+6      	; 0x2892 <vfprintf+0x146>
    288c:	69 2d       	mov	r22, r9
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <vfprintf+0x14a>
    2892:	6f ef       	ldi	r22, 0xFF	; 255
    2894:	7f ef       	ldi	r23, 0xFF	; 255
    2896:	c5 01       	movw	r24, r10
    2898:	0e 94 92 15 	call	0x2b24	; 0x2b24 <strnlen>
    289c:	4c 01       	movw	r8, r24
    289e:	82 01       	movw	r16, r4
    28a0:	f3 2d       	mov	r31, r3
    28a2:	ff 77       	andi	r31, 0x7F	; 127
    28a4:	3f 2e       	mov	r3, r31
    28a6:	16 c0       	rjmp	.+44     	; 0x28d4 <vfprintf+0x188>
    28a8:	28 01       	movw	r4, r16
    28aa:	22 e0       	ldi	r18, 0x02	; 2
    28ac:	42 0e       	add	r4, r18
    28ae:	51 1c       	adc	r5, r1
    28b0:	f8 01       	movw	r30, r16
    28b2:	a0 80       	ld	r10, Z
    28b4:	b1 80       	ldd	r11, Z+1	; 0x01
    28b6:	36 fe       	sbrs	r3, 6
    28b8:	03 c0       	rjmp	.+6      	; 0x28c0 <vfprintf+0x174>
    28ba:	69 2d       	mov	r22, r9
    28bc:	70 e0       	ldi	r23, 0x00	; 0
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <vfprintf+0x178>
    28c0:	6f ef       	ldi	r22, 0xFF	; 255
    28c2:	7f ef       	ldi	r23, 0xFF	; 255
    28c4:	c5 01       	movw	r24, r10
    28c6:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <strnlen_P>
    28ca:	4c 01       	movw	r8, r24
    28cc:	f3 2d       	mov	r31, r3
    28ce:	f0 68       	ori	r31, 0x80	; 128
    28d0:	3f 2e       	mov	r3, r31
    28d2:	82 01       	movw	r16, r4
    28d4:	33 fc       	sbrc	r3, 3
    28d6:	1b c0       	rjmp	.+54     	; 0x290e <vfprintf+0x1c2>
    28d8:	82 2d       	mov	r24, r2
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	88 16       	cp	r8, r24
    28de:	99 06       	cpc	r9, r25
    28e0:	b0 f4       	brcc	.+44     	; 0x290e <vfprintf+0x1c2>
    28e2:	b6 01       	movw	r22, r12
    28e4:	80 e2       	ldi	r24, 0x20	; 32
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    28ec:	2a 94       	dec	r2
    28ee:	f4 cf       	rjmp	.-24     	; 0x28d8 <vfprintf+0x18c>
    28f0:	f5 01       	movw	r30, r10
    28f2:	37 fc       	sbrc	r3, 7
    28f4:	85 91       	lpm	r24, Z+
    28f6:	37 fe       	sbrs	r3, 7
    28f8:	81 91       	ld	r24, Z+
    28fa:	5f 01       	movw	r10, r30
    28fc:	b6 01       	movw	r22, r12
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2904:	21 10       	cpse	r2, r1
    2906:	2a 94       	dec	r2
    2908:	21 e0       	ldi	r18, 0x01	; 1
    290a:	82 1a       	sub	r8, r18
    290c:	91 08       	sbc	r9, r1
    290e:	81 14       	cp	r8, r1
    2910:	91 04       	cpc	r9, r1
    2912:	71 f7       	brne	.-36     	; 0x28f0 <vfprintf+0x1a4>
    2914:	e8 c0       	rjmp	.+464    	; 0x2ae6 <vfprintf+0x39a>
    2916:	84 36       	cpi	r24, 0x64	; 100
    2918:	11 f0       	breq	.+4      	; 0x291e <vfprintf+0x1d2>
    291a:	89 36       	cpi	r24, 0x69	; 105
    291c:	41 f5       	brne	.+80     	; 0x296e <vfprintf+0x222>
    291e:	f8 01       	movw	r30, r16
    2920:	37 fe       	sbrs	r3, 7
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <vfprintf+0x1e6>
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	0c 5f       	subi	r16, 0xFC	; 252
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	08 c0       	rjmp	.+16     	; 0x2942 <vfprintf+0x1f6>
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	07 2e       	mov	r0, r23
    2938:	00 0c       	add	r0, r0
    293a:	88 0b       	sbc	r24, r24
    293c:	99 0b       	sbc	r25, r25
    293e:	0e 5f       	subi	r16, 0xFE	; 254
    2940:	1f 4f       	sbci	r17, 0xFF	; 255
    2942:	f3 2d       	mov	r31, r3
    2944:	ff 76       	andi	r31, 0x6F	; 111
    2946:	3f 2e       	mov	r3, r31
    2948:	97 ff       	sbrs	r25, 7
    294a:	09 c0       	rjmp	.+18     	; 0x295e <vfprintf+0x212>
    294c:	90 95       	com	r25
    294e:	80 95       	com	r24
    2950:	70 95       	com	r23
    2952:	61 95       	neg	r22
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	8f 4f       	sbci	r24, 0xFF	; 255
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	f0 68       	ori	r31, 0x80	; 128
    295c:	3f 2e       	mov	r3, r31
    295e:	2a e0       	ldi	r18, 0x0A	; 10
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	a3 01       	movw	r20, r6
    2964:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <__ultoa_invert>
    2968:	88 2e       	mov	r8, r24
    296a:	86 18       	sub	r8, r6
    296c:	45 c0       	rjmp	.+138    	; 0x29f8 <vfprintf+0x2ac>
    296e:	85 37       	cpi	r24, 0x75	; 117
    2970:	31 f4       	brne	.+12     	; 0x297e <vfprintf+0x232>
    2972:	23 2d       	mov	r18, r3
    2974:	2f 7e       	andi	r18, 0xEF	; 239
    2976:	b2 2e       	mov	r11, r18
    2978:	2a e0       	ldi	r18, 0x0A	; 10
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	25 c0       	rjmp	.+74     	; 0x29c8 <vfprintf+0x27c>
    297e:	93 2d       	mov	r25, r3
    2980:	99 7f       	andi	r25, 0xF9	; 249
    2982:	b9 2e       	mov	r11, r25
    2984:	8f 36       	cpi	r24, 0x6F	; 111
    2986:	c1 f0       	breq	.+48     	; 0x29b8 <vfprintf+0x26c>
    2988:	18 f4       	brcc	.+6      	; 0x2990 <vfprintf+0x244>
    298a:	88 35       	cpi	r24, 0x58	; 88
    298c:	79 f0       	breq	.+30     	; 0x29ac <vfprintf+0x260>
    298e:	b5 c0       	rjmp	.+362    	; 0x2afa <vfprintf+0x3ae>
    2990:	80 37       	cpi	r24, 0x70	; 112
    2992:	19 f0       	breq	.+6      	; 0x299a <vfprintf+0x24e>
    2994:	88 37       	cpi	r24, 0x78	; 120
    2996:	21 f0       	breq	.+8      	; 0x29a0 <vfprintf+0x254>
    2998:	b0 c0       	rjmp	.+352    	; 0x2afa <vfprintf+0x3ae>
    299a:	e9 2f       	mov	r30, r25
    299c:	e0 61       	ori	r30, 0x10	; 16
    299e:	be 2e       	mov	r11, r30
    29a0:	b4 fe       	sbrs	r11, 4
    29a2:	0d c0       	rjmp	.+26     	; 0x29be <vfprintf+0x272>
    29a4:	fb 2d       	mov	r31, r11
    29a6:	f4 60       	ori	r31, 0x04	; 4
    29a8:	bf 2e       	mov	r11, r31
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <vfprintf+0x272>
    29ac:	34 fe       	sbrs	r3, 4
    29ae:	0a c0       	rjmp	.+20     	; 0x29c4 <vfprintf+0x278>
    29b0:	29 2f       	mov	r18, r25
    29b2:	26 60       	ori	r18, 0x06	; 6
    29b4:	b2 2e       	mov	r11, r18
    29b6:	06 c0       	rjmp	.+12     	; 0x29c4 <vfprintf+0x278>
    29b8:	28 e0       	ldi	r18, 0x08	; 8
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	05 c0       	rjmp	.+10     	; 0x29c8 <vfprintf+0x27c>
    29be:	20 e1       	ldi	r18, 0x10	; 16
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <vfprintf+0x27c>
    29c4:	20 e1       	ldi	r18, 0x10	; 16
    29c6:	32 e0       	ldi	r19, 0x02	; 2
    29c8:	f8 01       	movw	r30, r16
    29ca:	b7 fe       	sbrs	r11, 7
    29cc:	07 c0       	rjmp	.+14     	; 0x29dc <vfprintf+0x290>
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	0c 5f       	subi	r16, 0xFC	; 252
    29d8:	1f 4f       	sbci	r17, 0xFF	; 255
    29da:	06 c0       	rjmp	.+12     	; 0x29e8 <vfprintf+0x29c>
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	80 e0       	ldi	r24, 0x00	; 0
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 5f       	subi	r16, 0xFE	; 254
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	a3 01       	movw	r20, r6
    29ea:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <__ultoa_invert>
    29ee:	88 2e       	mov	r8, r24
    29f0:	86 18       	sub	r8, r6
    29f2:	fb 2d       	mov	r31, r11
    29f4:	ff 77       	andi	r31, 0x7F	; 127
    29f6:	3f 2e       	mov	r3, r31
    29f8:	36 fe       	sbrs	r3, 6
    29fa:	0d c0       	rjmp	.+26     	; 0x2a16 <vfprintf+0x2ca>
    29fc:	23 2d       	mov	r18, r3
    29fe:	2e 7f       	andi	r18, 0xFE	; 254
    2a00:	a2 2e       	mov	r10, r18
    2a02:	89 14       	cp	r8, r9
    2a04:	58 f4       	brcc	.+22     	; 0x2a1c <vfprintf+0x2d0>
    2a06:	34 fe       	sbrs	r3, 4
    2a08:	0b c0       	rjmp	.+22     	; 0x2a20 <vfprintf+0x2d4>
    2a0a:	32 fc       	sbrc	r3, 2
    2a0c:	09 c0       	rjmp	.+18     	; 0x2a20 <vfprintf+0x2d4>
    2a0e:	83 2d       	mov	r24, r3
    2a10:	8e 7e       	andi	r24, 0xEE	; 238
    2a12:	a8 2e       	mov	r10, r24
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <vfprintf+0x2d4>
    2a16:	b8 2c       	mov	r11, r8
    2a18:	a3 2c       	mov	r10, r3
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <vfprintf+0x2d6>
    2a1c:	b8 2c       	mov	r11, r8
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <vfprintf+0x2d6>
    2a20:	b9 2c       	mov	r11, r9
    2a22:	a4 fe       	sbrs	r10, 4
    2a24:	0f c0       	rjmp	.+30     	; 0x2a44 <vfprintf+0x2f8>
    2a26:	fe 01       	movw	r30, r28
    2a28:	e8 0d       	add	r30, r8
    2a2a:	f1 1d       	adc	r31, r1
    2a2c:	80 81       	ld	r24, Z
    2a2e:	80 33       	cpi	r24, 0x30	; 48
    2a30:	21 f4       	brne	.+8      	; 0x2a3a <vfprintf+0x2ee>
    2a32:	9a 2d       	mov	r25, r10
    2a34:	99 7e       	andi	r25, 0xE9	; 233
    2a36:	a9 2e       	mov	r10, r25
    2a38:	09 c0       	rjmp	.+18     	; 0x2a4c <vfprintf+0x300>
    2a3a:	a2 fe       	sbrs	r10, 2
    2a3c:	06 c0       	rjmp	.+12     	; 0x2a4a <vfprintf+0x2fe>
    2a3e:	b3 94       	inc	r11
    2a40:	b3 94       	inc	r11
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <vfprintf+0x300>
    2a44:	8a 2d       	mov	r24, r10
    2a46:	86 78       	andi	r24, 0x86	; 134
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <vfprintf+0x300>
    2a4a:	b3 94       	inc	r11
    2a4c:	a3 fc       	sbrc	r10, 3
    2a4e:	11 c0       	rjmp	.+34     	; 0x2a72 <vfprintf+0x326>
    2a50:	a0 fe       	sbrs	r10, 0
    2a52:	06 c0       	rjmp	.+12     	; 0x2a60 <vfprintf+0x314>
    2a54:	b2 14       	cp	r11, r2
    2a56:	88 f4       	brcc	.+34     	; 0x2a7a <vfprintf+0x32e>
    2a58:	28 0c       	add	r2, r8
    2a5a:	92 2c       	mov	r9, r2
    2a5c:	9b 18       	sub	r9, r11
    2a5e:	0e c0       	rjmp	.+28     	; 0x2a7c <vfprintf+0x330>
    2a60:	b2 14       	cp	r11, r2
    2a62:	60 f4       	brcc	.+24     	; 0x2a7c <vfprintf+0x330>
    2a64:	b6 01       	movw	r22, r12
    2a66:	80 e2       	ldi	r24, 0x20	; 32
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2a6e:	b3 94       	inc	r11
    2a70:	f7 cf       	rjmp	.-18     	; 0x2a60 <vfprintf+0x314>
    2a72:	b2 14       	cp	r11, r2
    2a74:	18 f4       	brcc	.+6      	; 0x2a7c <vfprintf+0x330>
    2a76:	2b 18       	sub	r2, r11
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <vfprintf+0x332>
    2a7a:	98 2c       	mov	r9, r8
    2a7c:	21 2c       	mov	r2, r1
    2a7e:	a4 fe       	sbrs	r10, 4
    2a80:	10 c0       	rjmp	.+32     	; 0x2aa2 <vfprintf+0x356>
    2a82:	b6 01       	movw	r22, r12
    2a84:	80 e3       	ldi	r24, 0x30	; 48
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2a8c:	a2 fe       	sbrs	r10, 2
    2a8e:	17 c0       	rjmp	.+46     	; 0x2abe <vfprintf+0x372>
    2a90:	a1 fc       	sbrc	r10, 1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <vfprintf+0x34e>
    2a94:	88 e7       	ldi	r24, 0x78	; 120
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <vfprintf+0x352>
    2a9a:	88 e5       	ldi	r24, 0x58	; 88
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	b6 01       	movw	r22, r12
    2aa0:	0c c0       	rjmp	.+24     	; 0x2aba <vfprintf+0x36e>
    2aa2:	8a 2d       	mov	r24, r10
    2aa4:	86 78       	andi	r24, 0x86	; 134
    2aa6:	59 f0       	breq	.+22     	; 0x2abe <vfprintf+0x372>
    2aa8:	a1 fe       	sbrs	r10, 1
    2aaa:	02 c0       	rjmp	.+4      	; 0x2ab0 <vfprintf+0x364>
    2aac:	8b e2       	ldi	r24, 0x2B	; 43
    2aae:	01 c0       	rjmp	.+2      	; 0x2ab2 <vfprintf+0x366>
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	a7 fc       	sbrc	r10, 7
    2ab4:	8d e2       	ldi	r24, 0x2D	; 45
    2ab6:	b6 01       	movw	r22, r12
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2abe:	89 14       	cp	r8, r9
    2ac0:	38 f4       	brcc	.+14     	; 0x2ad0 <vfprintf+0x384>
    2ac2:	b6 01       	movw	r22, r12
    2ac4:	80 e3       	ldi	r24, 0x30	; 48
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2acc:	9a 94       	dec	r9
    2ace:	f7 cf       	rjmp	.-18     	; 0x2abe <vfprintf+0x372>
    2ad0:	8a 94       	dec	r8
    2ad2:	f3 01       	movw	r30, r6
    2ad4:	e8 0d       	add	r30, r8
    2ad6:	f1 1d       	adc	r31, r1
    2ad8:	80 81       	ld	r24, Z
    2ada:	b6 01       	movw	r22, r12
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2ae2:	81 10       	cpse	r8, r1
    2ae4:	f5 cf       	rjmp	.-22     	; 0x2ad0 <vfprintf+0x384>
    2ae6:	22 20       	and	r2, r2
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <vfprintf+0x3a0>
    2aea:	42 ce       	rjmp	.-892    	; 0x2770 <vfprintf+0x24>
    2aec:	b6 01       	movw	r22, r12
    2aee:	80 e2       	ldi	r24, 0x20	; 32
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <fputc>
    2af6:	2a 94       	dec	r2
    2af8:	f6 cf       	rjmp	.-20     	; 0x2ae6 <vfprintf+0x39a>
    2afa:	f6 01       	movw	r30, r12
    2afc:	86 81       	ldd	r24, Z+6	; 0x06
    2afe:	97 81       	ldd	r25, Z+7	; 0x07
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <vfprintf+0x3ba>
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	9f ef       	ldi	r25, 0xFF	; 255
    2b06:	2b 96       	adiw	r28, 0x0b	; 11
    2b08:	e2 e1       	ldi	r30, 0x12	; 18
    2b0a:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__epilogue_restores__>

00002b0e <strnlen_P>:
    2b0e:	fc 01       	movw	r30, r24
    2b10:	05 90       	lpm	r0, Z+
    2b12:	61 50       	subi	r22, 0x01	; 1
    2b14:	70 40       	sbci	r23, 0x00	; 0
    2b16:	01 10       	cpse	r0, r1
    2b18:	d8 f7       	brcc	.-10     	; 0x2b10 <strnlen_P+0x2>
    2b1a:	80 95       	com	r24
    2b1c:	90 95       	com	r25
    2b1e:	8e 0f       	add	r24, r30
    2b20:	9f 1f       	adc	r25, r31
    2b22:	08 95       	ret

00002b24 <strnlen>:
    2b24:	fc 01       	movw	r30, r24
    2b26:	61 50       	subi	r22, 0x01	; 1
    2b28:	70 40       	sbci	r23, 0x00	; 0
    2b2a:	01 90       	ld	r0, Z+
    2b2c:	01 10       	cpse	r0, r1
    2b2e:	d8 f7       	brcc	.-10     	; 0x2b26 <strnlen+0x2>
    2b30:	80 95       	com	r24
    2b32:	90 95       	com	r25
    2b34:	8e 0f       	add	r24, r30
    2b36:	9f 1f       	adc	r25, r31
    2b38:	08 95       	ret

00002b3a <strrev>:
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	67 2f       	mov	r22, r23
    2b40:	71 91       	ld	r23, Z+
    2b42:	77 23       	and	r23, r23
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <strrev+0x4>
    2b46:	32 97       	sbiw	r30, 0x02	; 2
    2b48:	04 c0       	rjmp	.+8      	; 0x2b52 <strrev+0x18>
    2b4a:	7c 91       	ld	r23, X
    2b4c:	6d 93       	st	X+, r22
    2b4e:	70 83       	st	Z, r23
    2b50:	62 91       	ld	r22, -Z
    2b52:	ae 17       	cp	r26, r30
    2b54:	bf 07       	cpc	r27, r31
    2b56:	c8 f3       	brcs	.-14     	; 0x2b4a <strrev+0x10>
    2b58:	08 95       	ret

00002b5a <fputc>:
    2b5a:	0f 93       	push	r16
    2b5c:	1f 93       	push	r17
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	fb 01       	movw	r30, r22
    2b64:	23 81       	ldd	r18, Z+3	; 0x03
    2b66:	21 fd       	sbrc	r18, 1
    2b68:	03 c0       	rjmp	.+6      	; 0x2b70 <fputc+0x16>
    2b6a:	8f ef       	ldi	r24, 0xFF	; 255
    2b6c:	9f ef       	ldi	r25, 0xFF	; 255
    2b6e:	2c c0       	rjmp	.+88     	; 0x2bc8 <fputc+0x6e>
    2b70:	22 ff       	sbrs	r18, 2
    2b72:	16 c0       	rjmp	.+44     	; 0x2ba0 <fputc+0x46>
    2b74:	46 81       	ldd	r20, Z+6	; 0x06
    2b76:	57 81       	ldd	r21, Z+7	; 0x07
    2b78:	24 81       	ldd	r18, Z+4	; 0x04
    2b7a:	35 81       	ldd	r19, Z+5	; 0x05
    2b7c:	42 17       	cp	r20, r18
    2b7e:	53 07       	cpc	r21, r19
    2b80:	44 f4       	brge	.+16     	; 0x2b92 <fputc+0x38>
    2b82:	a0 81       	ld	r26, Z
    2b84:	b1 81       	ldd	r27, Z+1	; 0x01
    2b86:	9d 01       	movw	r18, r26
    2b88:	2f 5f       	subi	r18, 0xFF	; 255
    2b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8c:	31 83       	std	Z+1, r19	; 0x01
    2b8e:	20 83       	st	Z, r18
    2b90:	8c 93       	st	X, r24
    2b92:	26 81       	ldd	r18, Z+6	; 0x06
    2b94:	37 81       	ldd	r19, Z+7	; 0x07
    2b96:	2f 5f       	subi	r18, 0xFF	; 255
    2b98:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9a:	37 83       	std	Z+7, r19	; 0x07
    2b9c:	26 83       	std	Z+6, r18	; 0x06
    2b9e:	14 c0       	rjmp	.+40     	; 0x2bc8 <fputc+0x6e>
    2ba0:	8b 01       	movw	r16, r22
    2ba2:	ec 01       	movw	r28, r24
    2ba4:	fb 01       	movw	r30, r22
    2ba6:	00 84       	ldd	r0, Z+8	; 0x08
    2ba8:	f1 85       	ldd	r31, Z+9	; 0x09
    2baa:	e0 2d       	mov	r30, r0
    2bac:	09 95       	icall
    2bae:	89 2b       	or	r24, r25
    2bb0:	e1 f6       	brne	.-72     	; 0x2b6a <fputc+0x10>
    2bb2:	d8 01       	movw	r26, r16
    2bb4:	16 96       	adiw	r26, 0x06	; 6
    2bb6:	8d 91       	ld	r24, X+
    2bb8:	9c 91       	ld	r25, X
    2bba:	17 97       	sbiw	r26, 0x07	; 7
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	17 96       	adiw	r26, 0x07	; 7
    2bc0:	9c 93       	st	X, r25
    2bc2:	8e 93       	st	-X, r24
    2bc4:	16 97       	sbiw	r26, 0x06	; 6
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	08 95       	ret

00002bd2 <__ultoa_invert>:
    2bd2:	fa 01       	movw	r30, r20
    2bd4:	aa 27       	eor	r26, r26
    2bd6:	28 30       	cpi	r18, 0x08	; 8
    2bd8:	51 f1       	breq	.+84     	; 0x2c2e <__ultoa_invert+0x5c>
    2bda:	20 31       	cpi	r18, 0x10	; 16
    2bdc:	81 f1       	breq	.+96     	; 0x2c3e <__ultoa_invert+0x6c>
    2bde:	e8 94       	clt
    2be0:	6f 93       	push	r22
    2be2:	6e 7f       	andi	r22, 0xFE	; 254
    2be4:	6e 5f       	subi	r22, 0xFE	; 254
    2be6:	7f 4f       	sbci	r23, 0xFF	; 255
    2be8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	af 4f       	sbci	r26, 0xFF	; 255
    2bee:	b1 e0       	ldi	r27, 0x01	; 1
    2bf0:	3e d0       	rcall	.+124    	; 0x2c6e <__ultoa_invert+0x9c>
    2bf2:	b4 e0       	ldi	r27, 0x04	; 4
    2bf4:	3c d0       	rcall	.+120    	; 0x2c6e <__ultoa_invert+0x9c>
    2bf6:	67 0f       	add	r22, r23
    2bf8:	78 1f       	adc	r23, r24
    2bfa:	89 1f       	adc	r24, r25
    2bfc:	9a 1f       	adc	r25, r26
    2bfe:	a1 1d       	adc	r26, r1
    2c00:	68 0f       	add	r22, r24
    2c02:	79 1f       	adc	r23, r25
    2c04:	8a 1f       	adc	r24, r26
    2c06:	91 1d       	adc	r25, r1
    2c08:	a1 1d       	adc	r26, r1
    2c0a:	6a 0f       	add	r22, r26
    2c0c:	71 1d       	adc	r23, r1
    2c0e:	81 1d       	adc	r24, r1
    2c10:	91 1d       	adc	r25, r1
    2c12:	a1 1d       	adc	r26, r1
    2c14:	20 d0       	rcall	.+64     	; 0x2c56 <__ultoa_invert+0x84>
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <__ultoa_invert+0x48>
    2c18:	68 94       	set
    2c1a:	3f 91       	pop	r19
    2c1c:	2a e0       	ldi	r18, 0x0A	; 10
    2c1e:	26 9f       	mul	r18, r22
    2c20:	11 24       	eor	r1, r1
    2c22:	30 19       	sub	r19, r0
    2c24:	30 5d       	subi	r19, 0xD0	; 208
    2c26:	31 93       	st	Z+, r19
    2c28:	de f6       	brtc	.-74     	; 0x2be0 <__ultoa_invert+0xe>
    2c2a:	cf 01       	movw	r24, r30
    2c2c:	08 95       	ret
    2c2e:	46 2f       	mov	r20, r22
    2c30:	47 70       	andi	r20, 0x07	; 7
    2c32:	40 5d       	subi	r20, 0xD0	; 208
    2c34:	41 93       	st	Z+, r20
    2c36:	b3 e0       	ldi	r27, 0x03	; 3
    2c38:	0f d0       	rcall	.+30     	; 0x2c58 <__ultoa_invert+0x86>
    2c3a:	c9 f7       	brne	.-14     	; 0x2c2e <__ultoa_invert+0x5c>
    2c3c:	f6 cf       	rjmp	.-20     	; 0x2c2a <__ultoa_invert+0x58>
    2c3e:	46 2f       	mov	r20, r22
    2c40:	4f 70       	andi	r20, 0x0F	; 15
    2c42:	40 5d       	subi	r20, 0xD0	; 208
    2c44:	4a 33       	cpi	r20, 0x3A	; 58
    2c46:	18 f0       	brcs	.+6      	; 0x2c4e <__ultoa_invert+0x7c>
    2c48:	49 5d       	subi	r20, 0xD9	; 217
    2c4a:	31 fd       	sbrc	r19, 1
    2c4c:	40 52       	subi	r20, 0x20	; 32
    2c4e:	41 93       	st	Z+, r20
    2c50:	02 d0       	rcall	.+4      	; 0x2c56 <__ultoa_invert+0x84>
    2c52:	a9 f7       	brne	.-22     	; 0x2c3e <__ultoa_invert+0x6c>
    2c54:	ea cf       	rjmp	.-44     	; 0x2c2a <__ultoa_invert+0x58>
    2c56:	b4 e0       	ldi	r27, 0x04	; 4
    2c58:	a6 95       	lsr	r26
    2c5a:	97 95       	ror	r25
    2c5c:	87 95       	ror	r24
    2c5e:	77 95       	ror	r23
    2c60:	67 95       	ror	r22
    2c62:	ba 95       	dec	r27
    2c64:	c9 f7       	brne	.-14     	; 0x2c58 <__ultoa_invert+0x86>
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	61 05       	cpc	r22, r1
    2c6a:	71 05       	cpc	r23, r1
    2c6c:	08 95       	ret
    2c6e:	9b 01       	movw	r18, r22
    2c70:	ac 01       	movw	r20, r24
    2c72:	0a 2e       	mov	r0, r26
    2c74:	06 94       	lsr	r0
    2c76:	57 95       	ror	r21
    2c78:	47 95       	ror	r20
    2c7a:	37 95       	ror	r19
    2c7c:	27 95       	ror	r18
    2c7e:	ba 95       	dec	r27
    2c80:	c9 f7       	brne	.-14     	; 0x2c74 <__ultoa_invert+0xa2>
    2c82:	62 0f       	add	r22, r18
    2c84:	73 1f       	adc	r23, r19
    2c86:	84 1f       	adc	r24, r20
    2c88:	95 1f       	adc	r25, r21
    2c8a:	a0 1d       	adc	r26, r0
    2c8c:	08 95       	ret

00002c8e <__prologue_saves__>:
    2c8e:	2f 92       	push	r2
    2c90:	3f 92       	push	r3
    2c92:	4f 92       	push	r4
    2c94:	5f 92       	push	r5
    2c96:	6f 92       	push	r6
    2c98:	7f 92       	push	r7
    2c9a:	8f 92       	push	r8
    2c9c:	9f 92       	push	r9
    2c9e:	af 92       	push	r10
    2ca0:	bf 92       	push	r11
    2ca2:	cf 92       	push	r12
    2ca4:	df 92       	push	r13
    2ca6:	ef 92       	push	r14
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	ca 1b       	sub	r28, r26
    2cb8:	db 0b       	sbc	r29, r27
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	09 94       	ijmp

00002cc6 <__epilogue_restores__>:
    2cc6:	2a 88       	ldd	r2, Y+18	; 0x12
    2cc8:	39 88       	ldd	r3, Y+17	; 0x11
    2cca:	48 88       	ldd	r4, Y+16	; 0x10
    2ccc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cce:	6e 84       	ldd	r6, Y+14	; 0x0e
    2cd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2cd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2cd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2cd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2cd8:	b9 84       	ldd	r11, Y+9	; 0x09
    2cda:	c8 84       	ldd	r12, Y+8	; 0x08
    2cdc:	df 80       	ldd	r13, Y+7	; 0x07
    2cde:	ee 80       	ldd	r14, Y+6	; 0x06
    2ce0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ce2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ce4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ce6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ce8:	b9 81       	ldd	r27, Y+1	; 0x01
    2cea:	ce 0f       	add	r28, r30
    2cec:	d1 1d       	adc	r29, r1
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	ed 01       	movw	r28, r26
    2cfa:	08 95       	ret

00002cfc <_exit>:
    2cfc:	f8 94       	cli

00002cfe <__stop_program>:
    2cfe:	ff cf       	rjmp	.-2      	; 0x2cfe <__stop_program>
