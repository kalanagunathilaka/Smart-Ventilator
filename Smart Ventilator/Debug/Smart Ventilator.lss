
Smart Ventilator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013a  00800060  00002db2  00002e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  0080019a  0080019a  00002f80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b25  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d60  00000000  00000000  00005d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e3  00000000  00000000  00006acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  000082b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000942  00000000  00000000  000088f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aa7  00000000  00000000  00009236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000acdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
       4:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_1>
       8:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_2>
       c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      1c:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <__vector_7>
      20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      34:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_13>
      38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
      54:	35 05       	cpc	r19, r5
      56:	6a 05       	cpc	r22, r10
      58:	9f 05       	cpc	r25, r15
      5a:	d4 05       	cpc	r29, r4
      5c:	09 06       	cpc	r0, r25
      5e:	3e 06       	cpc	r3, r30
      60:	73 06       	cpc	r7, r19
      62:	a8 06       	cpc	r10, r24
      64:	dd 06       	cpc	r13, r29
      66:	12 07       	cpc	r17, r18
      68:	47 07       	cpc	r20, r23
      6a:	7c 07       	cpc	r23, r28
      6c:	b1 07       	cpc	r27, r17
      6e:	ef 08       	sbc	r14, r15
      70:	e6 07       	cpc	r30, r22
      72:	1b 08       	sbc	r1, r11
      74:	50 08       	sbc	r5, r0
      76:	85 08       	sbc	r8, r5
      78:	ba 08       	sbc	r11, r10

0000007a <__ctors_end>:
      7a:	11 24       	eor	r1, r1
      7c:	1f be       	out	0x3f, r1	; 63
      7e:	cf e5       	ldi	r28, 0x5F	; 95
      80:	d8 e0       	ldi	r29, 0x08	; 8
      82:	de bf       	out	0x3e, r29	; 62
      84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
      86:	11 e0       	ldi	r17, 0x01	; 1
      88:	a0 e6       	ldi	r26, 0x60	; 96
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	e2 eb       	ldi	r30, 0xB2	; 178
      8e:	fd e2       	ldi	r31, 0x2D	; 45
      90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
      92:	05 90       	lpm	r0, Z+
      94:	0d 92       	st	X+, r0
      96:	aa 39       	cpi	r26, 0x9A	; 154
      98:	b1 07       	cpc	r27, r17
      9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
      9c:	22 e0       	ldi	r18, 0x02	; 2
      9e:	aa e9       	ldi	r26, 0x9A	; 154
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
      a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
      a6:	aa 3e       	cpi	r26, 0xEA	; 234
      a8:	b2 07       	cpc	r27, r18
      aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
      ac:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <main>
      b0:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <_exit>

000000b4 <__bad_interrupt>:
      b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <Keypad>:


char Keypad()
{
	
	PORTB=0b1111110;         // make first row 0
      b8:	8e e7       	ldi	r24, 0x7E	; 126
      ba:	88 bb       	out	0x18, r24	; 24
	if((PINB &(1<<PINB4))==0)
      bc:	b4 99       	sbic	0x16, 4	; 22
      be:	0c c0       	rjmp	.+24     	; 0xd8 <Keypad+0x20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	2f ef       	ldi	r18, 0xFF	; 255
      c2:	89 ef       	ldi	r24, 0xF9	; 249
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	21 50       	subi	r18, 0x01	; 1
      c8:	80 40       	sbci	r24, 0x00	; 0
      ca:	90 40       	sbci	r25, 0x00	; 0
      cc:	e1 f7       	brne	.-8      	; 0xc6 <Keypad+0xe>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <Keypad+0x18>
      d0:	00 00       	nop
	{
		_delay_ms(20);
		return"1";
      d2:	8e e6       	ldi	r24, 0x6E	; 110
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	08 95       	ret
	}

	else if((PINB&(1<<PINB5))==0)
      d8:	b5 99       	sbic	0x16, 5	; 22
      da:	0c c0       	rjmp	.+24     	; 0xf4 <Keypad+0x3c>
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	89 ef       	ldi	r24, 0xF9	; 249
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	21 50       	subi	r18, 0x01	; 1
      e4:	80 40       	sbci	r24, 0x00	; 0
      e6:	90 40       	sbci	r25, 0x00	; 0
      e8:	e1 f7       	brne	.-8      	; 0xe2 <Keypad+0x2a>
      ea:	00 c0       	rjmp	.+0      	; 0xec <Keypad+0x34>
      ec:	00 00       	nop
	{
		_delay_ms(20);
		return"2";
      ee:	80 e7       	ldi	r24, 0x70	; 112
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	08 95       	ret
	}
	else if((PINB&(1<<PINB6))==0)
      f4:	b6 99       	sbic	0x16, 6	; 22
      f6:	0c c0       	rjmp	.+24     	; 0x110 <Keypad+0x58>
      f8:	2f ef       	ldi	r18, 0xFF	; 255
      fa:	89 ef       	ldi	r24, 0xF9	; 249
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	21 50       	subi	r18, 0x01	; 1
     100:	80 40       	sbci	r24, 0x00	; 0
     102:	90 40       	sbci	r25, 0x00	; 0
     104:	e1 f7       	brne	.-8      	; 0xfe <Keypad+0x46>
     106:	00 c0       	rjmp	.+0      	; 0x108 <Keypad+0x50>
     108:	00 00       	nop
	{
		_delay_ms(20);
		return"3";
     10a:	82 e7       	ldi	r24, 0x72	; 114
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	08 95       	ret
	}
	

	PORTB=0b1111101;   // make second row 0
     110:	8d e7       	ldi	r24, 0x7D	; 125
     112:	88 bb       	out	0x18, r24	; 24
	if((PINB &(1<<PINB4))==0)
     114:	b4 99       	sbic	0x16, 4	; 22
     116:	0c c0       	rjmp	.+24     	; 0x130 <Keypad+0x78>
     118:	2f ef       	ldi	r18, 0xFF	; 255
     11a:	89 ef       	ldi	r24, 0xF9	; 249
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	21 50       	subi	r18, 0x01	; 1
     120:	80 40       	sbci	r24, 0x00	; 0
     122:	90 40       	sbci	r25, 0x00	; 0
     124:	e1 f7       	brne	.-8      	; 0x11e <Keypad+0x66>
     126:	00 c0       	rjmp	.+0      	; 0x128 <Keypad+0x70>
     128:	00 00       	nop
	{
		_delay_ms(20);
		return"4";
     12a:	84 e7       	ldi	r24, 0x74	; 116
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	08 95       	ret
	}
	else if((PINB&(1<<PINB5))==0)
     130:	b5 99       	sbic	0x16, 5	; 22
     132:	0c c0       	rjmp	.+24     	; 0x14c <Keypad+0x94>
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	89 ef       	ldi	r24, 0xF9	; 249
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <Keypad+0x82>
     142:	00 c0       	rjmp	.+0      	; 0x144 <Keypad+0x8c>
     144:	00 00       	nop
	{
		_delay_ms(20);
		return"5";
     146:	86 e7       	ldi	r24, 0x76	; 118
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	08 95       	ret
	}
	else if((PINB&(1<<PINB6))==0)
     14c:	b6 99       	sbic	0x16, 6	; 22
     14e:	0c c0       	rjmp	.+24     	; 0x168 <Keypad+0xb0>
     150:	2f ef       	ldi	r18, 0xFF	; 255
     152:	89 ef       	ldi	r24, 0xF9	; 249
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	21 50       	subi	r18, 0x01	; 1
     158:	80 40       	sbci	r24, 0x00	; 0
     15a:	90 40       	sbci	r25, 0x00	; 0
     15c:	e1 f7       	brne	.-8      	; 0x156 <Keypad+0x9e>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <Keypad+0xa8>
     160:	00 00       	nop
	{
		_delay_ms(20);
		return"6";
     162:	88 e7       	ldi	r24, 0x78	; 120
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	08 95       	ret
	}
	

	PORTB=0b1111011;   // make third row 0
     168:	8b e7       	ldi	r24, 0x7B	; 123
     16a:	88 bb       	out	0x18, r24	; 24
	if((PINB &(1<<PINB4))==0)
     16c:	b4 99       	sbic	0x16, 4	; 22
     16e:	0c c0       	rjmp	.+24     	; 0x188 <Keypad+0xd0>
     170:	2f ef       	ldi	r18, 0xFF	; 255
     172:	89 ef       	ldi	r24, 0xF9	; 249
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	21 50       	subi	r18, 0x01	; 1
     178:	80 40       	sbci	r24, 0x00	; 0
     17a:	90 40       	sbci	r25, 0x00	; 0
     17c:	e1 f7       	brne	.-8      	; 0x176 <Keypad+0xbe>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <Keypad+0xc8>
     180:	00 00       	nop
	{
		_delay_ms(20);
		return"7";
     182:	8a e7       	ldi	r24, 0x7A	; 122
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret
	}
	else if((PINB&(1<<PINB5))==0)
     188:	b5 99       	sbic	0x16, 5	; 22
     18a:	0c c0       	rjmp	.+24     	; 0x1a4 <Keypad+0xec>
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	89 ef       	ldi	r24, 0xF9	; 249
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	21 50       	subi	r18, 0x01	; 1
     194:	80 40       	sbci	r24, 0x00	; 0
     196:	90 40       	sbci	r25, 0x00	; 0
     198:	e1 f7       	brne	.-8      	; 0x192 <Keypad+0xda>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <Keypad+0xe4>
     19c:	00 00       	nop
	{
		_delay_ms(20);
		return"8";
     19e:	8c e7       	ldi	r24, 0x7C	; 124
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret
	}
	else if((PINB&(1<<PINB6))==0)
     1a4:	b6 99       	sbic	0x16, 6	; 22
     1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <Keypad+0x108>
     1a8:	2f ef       	ldi	r18, 0xFF	; 255
     1aa:	89 ef       	ldi	r24, 0xF9	; 249
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	21 50       	subi	r18, 0x01	; 1
     1b0:	80 40       	sbci	r24, 0x00	; 0
     1b2:	90 40       	sbci	r25, 0x00	; 0
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <Keypad+0xf6>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Keypad+0x100>
     1b8:	00 00       	nop
	{
		_delay_ms(20);
		return"9";
     1ba:	8e e7       	ldi	r24, 0x7E	; 126
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	08 95       	ret
	}
	

	PORTB=0b1110111;   // make fourth row 0
     1c0:	87 e7       	ldi	r24, 0x77	; 119
     1c2:	88 bb       	out	0x18, r24	; 24
	{
		_delay_ms(20);
		return"del";
		
	}*/
	 if((PINB&(1<<PINB5))==0)
     1c4:	b5 99       	sbic	0x16, 5	; 22
     1c6:	0c c0       	rjmp	.+24     	; 0x1e0 <Keypad+0x128>
     1c8:	2f ef       	ldi	r18, 0xFF	; 255
     1ca:	89 ef       	ldi	r24, 0xF9	; 249
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	21 50       	subi	r18, 0x01	; 1
     1d0:	80 40       	sbci	r24, 0x00	; 0
     1d2:	90 40       	sbci	r25, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <Keypad+0x116>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Keypad+0x120>
     1d8:	00 00       	nop
	{
		_delay_ms(20);
		return"0";
     1da:	80 e8       	ldi	r24, 0x80	; 128
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	08 95       	ret
		_delay_ms(20);
		return"ok";
	}*/
	

}
     1e0:	08 95       	ret

000001e2 <delay>:
}

void delay(int ms)
{
	int i,j;
	for(i=0;i<=ms;i++)
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	0a c0       	rjmp	.+20     	; 0x1fc <delay+0x1a>
	for(j=0;j<=120;j++);
     1e8:	2f 5f       	subi	r18, 0xFF	; 255
     1ea:	3f 4f       	sbci	r19, 0xFF	; 255
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <delay+0x10>
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	29 37       	cpi	r18, 0x79	; 121
     1f4:	31 05       	cpc	r19, r1
     1f6:	c4 f3       	brlt	.-16     	; 0x1e8 <delay+0x6>
}

void delay(int ms)
{
	int i,j;
	for(i=0;i<=ms;i++)
     1f8:	4f 5f       	subi	r20, 0xFF	; 255
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	84 17       	cp	r24, r20
     1fe:	95 07       	cpc	r25, r21
     200:	b4 f7       	brge	.-20     	; 0x1ee <delay+0xc>
	for(j=0;j<=120;j++);
}
     202:	08 95       	ret

00000204 <toggle>:

#include "lcd.h"

void toggle()
{
	TWDR |= 0x02;					//---PIN En de la LCD en = 1;  -----Latching data in to LCD data register using High to Low signal
     204:	83 b1       	in	r24, 0x03	; 3
     206:	82 60       	ori	r24, 0x02	; 2
     208:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//---Enable I2C and clear interrupt- Esta linea y la siguiente simepre van despues de querer mandar un coamndo por TDWR
     20a:	84 e8       	ldi	r24, 0x84	; 132
     20c:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));	//---Simepre poner despues de la linea anterior al mandar datos por TWDR
     20e:	06 b6       	in	r0, 0x36	; 54
     210:	07 fe       	sbrs	r0, 7
     212:	fd cf       	rjmp	.-6      	; 0x20e <toggle+0xa>
	delay(1);
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <delay>
	TWDR &= ~0x02;					//---PIN del Enable de la LCD en = 0;
     21c:	83 b1       	in	r24, 0x03	; 3
     21e:	8d 7f       	andi	r24, 0xFD	; 253
     220:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//---Enable I2C and clear interrupt
     222:	84 e8       	ldi	r24, 0x84	; 132
     224:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     226:	06 b6       	in	r0, 0x36	; 54
     228:	07 fe       	sbrs	r0, 7
     22a:	fd cf       	rjmp	.-6      	; 0x226 <toggle+0x22>
}
     22c:	08 95       	ret

0000022e <lcd_cmd_hf>:

void lcd_cmd_hf(char v1)
{
	TWDR &=~0x01;					//PIN RS de la LCD rs = 0; ----Selecting register as Command register
     22e:	93 b1       	in	r25, 0x03	; 3
     230:	9e 7f       	andi	r25, 0xFE	; 254
     232:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     234:	94 e8       	ldi	r25, 0x84	; 132
     236:	96 bf       	out	0x36, r25	; 54
	while  (!(TWCR &(1<<TWINT)));
     238:	06 b6       	in	r0, 0x36	; 54
     23a:	07 fe       	sbrs	r0, 7
     23c:	fd cf       	rjmp	.-6      	; 0x238 <lcd_cmd_hf+0xa>
	TWDR &= 0x0F;					//----clearing the Higher 4 bits
     23e:	93 b1       	in	r25, 0x03	; 3
     240:	9f 70       	andi	r25, 0x0F	; 15
     242:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     244:	94 e8       	ldi	r25, 0x84	; 132
     246:	96 bf       	out	0x36, r25	; 54
	while  (!(TWCR &(1<<TWINT)));
     248:	06 b6       	in	r0, 0x36	; 54
     24a:	07 fe       	sbrs	r0, 7
     24c:	fd cf       	rjmp	.-6      	; 0x248 <lcd_cmd_hf+0x1a>
	TWDR |= (v1 & 0xF0);			//----Masking higher 4 bits and sending to LCD
     24e:	93 b1       	in	r25, 0x03	; 3
     250:	80 7f       	andi	r24, 0xF0	; 240
     252:	89 2b       	or	r24, r25
     254:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     256:	84 e8       	ldi	r24, 0x84	; 132
     258:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     25a:	06 b6       	in	r0, 0x36	; 54
     25c:	07 fe       	sbrs	r0, 7
     25e:	fd cf       	rjmp	.-6      	; 0x25a <lcd_cmd_hf+0x2c>
	toggle();
     260:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
     264:	08 95       	ret

00000266 <lcd_cmd>:
}

void lcd_cmd(char v2)
{
     266:	cf 93       	push	r28
     268:	c8 2f       	mov	r28, r24
	TWDR&=~0x01;					//rs = 0; ----Selecting register as command register
     26a:	83 b1       	in	r24, 0x03	; 3
     26c:	8e 7f       	andi	r24, 0xFE	; 254
     26e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     270:	84 e8       	ldi	r24, 0x84	; 132
     272:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     274:	06 b6       	in	r0, 0x36	; 54
     276:	07 fe       	sbrs	r0, 7
     278:	fd cf       	rjmp	.-6      	; 0x274 <lcd_cmd+0xe>
	TWDR &= 0x0F;                   //----clearing the Higher 4 bits
     27a:	83 b1       	in	r24, 0x03	; 3
     27c:	8f 70       	andi	r24, 0x0F	; 15
     27e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     280:	84 e8       	ldi	r24, 0x84	; 132
     282:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     284:	06 b6       	in	r0, 0x36	; 54
     286:	07 fe       	sbrs	r0, 7
     288:	fd cf       	rjmp	.-6      	; 0x284 <lcd_cmd+0x1e>
	TWDR |= (v2 & 0xF0);			//----Masking higher 4 bits and sending to LCD
     28a:	83 b1       	in	r24, 0x03	; 3
     28c:	9c 2f       	mov	r25, r28
     28e:	90 7f       	andi	r25, 0xF0	; 240
     290:	89 2b       	or	r24, r25
     292:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     294:	84 e8       	ldi	r24, 0x84	; 132
     296:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     298:	06 b6       	in	r0, 0x36	; 54
     29a:	07 fe       	sbrs	r0, 7
     29c:	fd cf       	rjmp	.-6      	; 0x298 <lcd_cmd+0x32>
	toggle();
     29e:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
	
	TWDR &= 0x0F;                    //----clearing the Higher 4 bits
     2a2:	83 b1       	in	r24, 0x03	; 3
     2a4:	8f 70       	andi	r24, 0x0F	; 15
     2a6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     2a8:	84 e8       	ldi	r24, 0x84	; 132
     2aa:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     2ac:	06 b6       	in	r0, 0x36	; 54
     2ae:	07 fe       	sbrs	r0, 7
     2b0:	fd cf       	rjmp	.-6      	; 0x2ac <lcd_cmd+0x46>
	TWDR |= ((v2 & 0x0F)<<4);		//----Masking lower 4 bits and sending to LCD
     2b2:	23 b1       	in	r18, 0x03	; 3
     2b4:	30 e1       	ldi	r19, 0x10	; 16
     2b6:	c3 9f       	mul	r28, r19
     2b8:	c0 01       	movw	r24, r0
     2ba:	11 24       	eor	r1, r1
     2bc:	82 2b       	or	r24, r18
     2be:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     2c0:	84 e8       	ldi	r24, 0x84	; 132
     2c2:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     2c4:	06 b6       	in	r0, 0x36	; 54
     2c6:	07 fe       	sbrs	r0, 7
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <lcd_cmd+0x5e>
	toggle();
     2ca:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
}
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_init>:
	toggle();
}

void lcd_init()
{
	lcd_cmd_hf(0x30);       //-----Sequence for initializing LCD
     2d2:	80 e3       	ldi	r24, 0x30	; 48
     2d4:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_cmd_hf>
	lcd_cmd_hf(0x30);       //-----     "            "              "               "
     2d8:	80 e3       	ldi	r24, 0x30	; 48
     2da:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_cmd_hf>
	lcd_cmd_hf(0x20);       //-----     "            "              "               "
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_cmd_hf>
	lcd_cmd(0x28);          //-----Selecting 16 x 2 LCD in 4Bit mode
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x0C);          //-----Display ON Cursor OFF
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x01);          //-----Clear display
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x06);          //-----Cursor Auto Increment
     2f6:	86 e0       	ldi	r24, 0x06	; 6
     2f8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x80);          //-----1st line 1st location of LCD
     2fc:	80 e8       	ldi	r24, 0x80	; 128
     2fe:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
     302:	08 95       	ret

00000304 <lcd_dwr>:
	while  (!(TWCR &(1<<TWINT)));
	toggle();
}

void lcd_dwr(char v3)
{
     304:	cf 93       	push	r28
     306:	c8 2f       	mov	r28, r24
	TWDR|=0x01;						//rs = 1; ----Selecting register as command register
     308:	83 b1       	in	r24, 0x03	; 3
     30a:	81 60       	ori	r24, 0x01	; 1
     30c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     30e:	84 e8       	ldi	r24, 0x84	; 132
     310:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     312:	06 b6       	in	r0, 0x36	; 54
     314:	07 fe       	sbrs	r0, 7
     316:	fd cf       	rjmp	.-6      	; 0x312 <lcd_dwr+0xe>
	TWDR &= 0x0F;				    //----clearing the Higher 4 bits
     318:	83 b1       	in	r24, 0x03	; 3
     31a:	8f 70       	andi	r24, 0x0F	; 15
     31c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     31e:	84 e8       	ldi	r24, 0x84	; 132
     320:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     322:	06 b6       	in	r0, 0x36	; 54
     324:	07 fe       	sbrs	r0, 7
     326:	fd cf       	rjmp	.-6      	; 0x322 <lcd_dwr+0x1e>
	TWDR |= (v3 & 0xF0);			//----Masking higher 4 bits and sending to LCD
     328:	83 b1       	in	r24, 0x03	; 3
     32a:	9c 2f       	mov	r25, r28
     32c:	90 7f       	andi	r25, 0xF0	; 240
     32e:	89 2b       	or	r24, r25
     330:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     332:	84 e8       	ldi	r24, 0x84	; 132
     334:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     336:	06 b6       	in	r0, 0x36	; 54
     338:	07 fe       	sbrs	r0, 7
     33a:	fd cf       	rjmp	.-6      	; 0x336 <lcd_dwr+0x32>
	toggle();
     33c:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
	
	TWDR &= 0x0F;					//----clearing the Higher 4 bits
     340:	83 b1       	in	r24, 0x03	; 3
     342:	8f 70       	andi	r24, 0x0F	; 15
     344:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     346:	84 e8       	ldi	r24, 0x84	; 132
     348:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     34a:	06 b6       	in	r0, 0x36	; 54
     34c:	07 fe       	sbrs	r0, 7
     34e:	fd cf       	rjmp	.-6      	; 0x34a <lcd_dwr+0x46>
	TWDR |= ((v3 & 0x0F)<<4);		//----Masking lower 4 bits and sending to LCD
     350:	23 b1       	in	r18, 0x03	; 3
     352:	30 e1       	ldi	r19, 0x10	; 16
     354:	c3 9f       	mul	r28, r19
     356:	c0 01       	movw	r24, r0
     358:	11 24       	eor	r1, r1
     35a:	82 2b       	or	r24, r18
     35c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);	//Enable I2C and clear interrupt
     35e:	84 e8       	ldi	r24, 0x84	; 132
     360:	86 bf       	out	0x36, r24	; 54
	while  (!(TWCR &(1<<TWINT)));
     362:	06 b6       	in	r0, 0x36	; 54
     364:	07 fe       	sbrs	r0, 7
     366:	fd cf       	rjmp	.-6      	; 0x362 <lcd_dwr+0x5e>
	toggle();
     368:	0e 94 02 01 	call	0x204	; 0x204 <toggle>
}
     36c:	cf 91       	pop	r28
     36e:	08 95       	ret

00000370 <lcd_msg>:
	for(i=0;i<=ms;i++)
	for(j=0;j<=120;j++);
}

void lcd_msg(char *c)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
	while(*c != 0)      //----Wait till all String are passed to LCD
     376:	03 c0       	rjmp	.+6      	; 0x37e <lcd_msg+0xe>
	lcd_dwr(*c++);		//----Send the String to LCD
     378:	21 96       	adiw	r28, 0x01	; 1
     37a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_dwr>
	for(j=0;j<=120;j++);
}

void lcd_msg(char *c)
{
	while(*c != 0)      //----Wait till all String are passed to LCD
     37e:	88 81       	ld	r24, Y
     380:	81 11       	cpse	r24, r1
     382:	fa cf       	rjmp	.-12     	; 0x378 <lcd_msg+0x8>
	lcd_dwr(*c++);		//----Send the String to LCD
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <i2c_init>:

char i2c_read(){
	TWCR  = (1<<TWEN) | (1<<TWINT);	//Enable I2C and clear interrupt
	while (!(TWCR & (1<<TWINT)));	//Read successful with all data received in TWDR
	return TWDR;
     38a:	82 e6       	ldi	r24, 0x62	; 98
     38c:	80 b9       	out	0x00, r24	; 0
     38e:	84 e0       	ldi	r24, 0x04	; 4
     390:	86 bf       	out	0x36, r24	; 54
     392:	11 b8       	out	0x01, r1	; 1
     394:	08 95       	ret

00000396 <i2c_start>:
     396:	84 ea       	ldi	r24, 0xA4	; 164
     398:	86 bf       	out	0x36, r24	; 54
     39a:	06 b6       	in	r0, 0x36	; 54
     39c:	07 fe       	sbrs	r0, 7
     39e:	fd cf       	rjmp	.-6      	; 0x39a <i2c_start+0x4>
     3a0:	08 95       	ret

000003a2 <i2c_write>:
     3a2:	83 b9       	out	0x03, r24	; 3
     3a4:	84 e8       	ldi	r24, 0x84	; 132
     3a6:	86 bf       	out	0x36, r24	; 54
     3a8:	06 b6       	in	r0, 0x36	; 54
     3aa:	07 fe       	sbrs	r0, 7
     3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <i2c_write+0x6>
     3ae:	08 95       	ret

000003b0 <sendSMS>:
char data_buffer[100];
char buff[160];								// buffer to store responses and messages 
char status_flag = 0;	
volatile int buffer_pointer;

void sendSMS(char no[11], const char *string) {
     3b0:	ef 92       	push	r14
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	18 2f       	mov	r17, r24
     3be:	09 2f       	mov	r16, r25
     3c0:	7b 01       	movw	r14, r22
	
	USART_SendString("AT+CMGF=1\r"); // Set SMS system into text mode
     3c2:	82 e8       	ldi	r24, 0x82	; 130
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 65 0f 	call	0x1eca	; 0x1eca <USART_SendString>
     3ca:	8f e1       	ldi	r24, 0x1F	; 31
     3cc:	9e e4       	ldi	r25, 0x4E	; 78
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <sendSMS+0x1e>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <sendSMS+0x24>
     3d4:	00 00       	nop
	_delay_ms(10);
	
	sprintf(data_buffer,"AT+CMGS=%s\r",no);// send command AT+CMGS="Mobile No."
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	8d e8       	ldi	r24, 0x8D	; 141
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	80 e8       	ldi	r24, 0x80	; 128
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	0e 94 dd 13 	call	0x27ba	; 0x27ba <sprintf>
	USART_SendString(data_buffer);
     3ee:	80 e8       	ldi	r24, 0x80	; 128
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <USART_SendString>
     3f6:	9f ef       	ldi	r25, 0xFF	; 255
     3f8:	21 ee       	ldi	r18, 0xE1	; 225
     3fa:	84 e0       	ldi	r24, 0x04	; 4
     3fc:	91 50       	subi	r25, 0x01	; 1
     3fe:	20 40       	sbci	r18, 0x00	; 0
     400:	80 40       	sbci	r24, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <sendSMS+0x4c>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     406:	00 00       	nop
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
	_delay_ms(200);
	while(1)
	{
		if(buff[buffer_pointer]==0x3e)                  //wait for '>' character
     414:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <buffer_pointer>
     418:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <buffer_pointer+0x1>
     41c:	ee 54       	subi	r30, 0x4E	; 78
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 81       	ld	r24, Z
     422:	8e 33       	cpi	r24, 0x3E	; 62
     424:	09 f0       	breq	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     426:	43 c0       	rjmp	.+134    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			buffer_pointer = 0;
     428:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <buffer_pointer+0x1>
     42c:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <buffer_pointer>
			memset(buff,0,strlen(buff));				// emptying "buff" 
     430:	c2 eb       	ldi	r28, 0xB2	; 178
     432:	d1 e0       	ldi	r29, 0x01	; 1
     434:	fe 01       	movw	r30, r28
     436:	01 90       	ld	r0, Z+
     438:	00 20       	and	r0, r0
     43a:	e9 f7       	brne	.-6      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43c:	31 97       	sbiw	r30, 0x01	; 1
     43e:	af 01       	movw	r20, r30
     440:	42 5b       	subi	r20, 0xB2	; 178
     442:	51 40       	sbci	r21, 0x01	; 1
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 85 13 	call	0x270a	; 0x270a <memset>
			USART_SendString(string);                      // send msg 
     44e:	c7 01       	movw	r24, r14
     450:	0e 94 65 0f 	call	0x1eca	; 0x1eca <USART_SendString>
			USART_TxChar(0x1a);                         //send Ctrl+Z then only message will transmit
     454:	8a e1       	ldi	r24, 0x1A	; 26
     456:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <USART_TxChar>
     45a:	9f ef       	ldi	r25, 0xFF	; 255
     45c:	22 e5       	ldi	r18, 0x52	; 82
     45e:	87 e0       	ldi	r24, 0x07	; 7
     460:	91 50       	subi	r25, 0x01	; 1
     462:	20 40       	sbci	r18, 0x00	; 0
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46a:	00 00       	nop
			break;
		}
		buffer_pointer++;
	}
	_delay_ms(300);
	buffer_pointer = 0;
     46c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <buffer_pointer+0x1>
     470:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <buffer_pointer>
	memset(buff,0,strlen(buff));				// emptying "buff" 
     474:	fe 01       	movw	r30, r28
     476:	01 90       	ld	r0, Z+
     478:	00 20       	and	r0, r0
     47a:	e9 f7       	brne	.-6      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     47c:	31 97       	sbiw	r30, 0x01	; 1
     47e:	af 01       	movw	r20, r30
     480:	42 5b       	subi	r20, 0xB2	; 178
     482:	51 40       	sbci	r21, 0x01	; 1
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	0e 94 85 13 	call	0x270a	; 0x270a <memset>
	memset(data_buffer,0,strlen(data_buffer));	// emptying "sms_buffer" 
     48e:	e0 e8       	ldi	r30, 0x80	; 128
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	01 90       	ld	r0, Z+
     494:	00 20       	and	r0, r0
     496:	e9 f7       	brne	.-6      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     498:	31 97       	sbiw	r30, 0x01	; 1
     49a:	af 01       	movw	r20, r30
     49c:	40 58       	subi	r20, 0x80	; 128
     49e:	52 40       	sbci	r21, 0x02	; 2
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e8       	ldi	r24, 0x80	; 128
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	0e 94 85 13 	call	0x270a	; 0x270a <memset>

}
     4ac:	0a c0       	rjmp	.+20     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			memset(buff,0,strlen(buff));				// emptying "buff" 
			USART_SendString(string);                      // send msg 
			USART_TxChar(0x1a);                         //send Ctrl+Z then only message will transmit
			break;
		}
		buffer_pointer++;
     4ae:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <buffer_pointer>
     4b2:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <buffer_pointer+0x1>
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <buffer_pointer+0x1>
     4bc:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <buffer_pointer>
	}
     4c0:	a9 cf       	rjmp	.-174    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	_delay_ms(300);
	buffer_pointer = 0;
	memset(buff,0,strlen(buff));				// emptying "buff" 
	memset(data_buffer,0,strlen(data_buffer));	// emptying "sms_buffer" 

}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret

000004d0 <GSMConnect>:
void GSMConnect(){
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
	while(1){
		USART_SendString("AT\r");// send 'ATE0' to check module is ready or not
     4d4:	89 e9       	ldi	r24, 0x99	; 153
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <USART_SendString>
     4dc:	2f ef       	ldi	r18, 0xFF	; 255
     4de:	84 e3       	ldi	r24, 0x34	; 52
     4e0:	9c e0       	ldi	r25, 0x0C	; 12
     4e2:	21 50       	subi	r18, 0x01	; 1
     4e4:	80 40       	sbci	r24, 0x00	; 0
     4e6:	90 40       	sbci	r25, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <GSMConnect+0x12>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <GSMConnect+0x1c>
     4ec:	00 00       	nop
		_delay_ms(500);
		if(strstr(buff,"OK"))
     4ee:	6d e9       	ldi	r22, 0x9D	; 157
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	82 eb       	ldi	r24, 0xB2	; 178
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 9e 13 	call	0x273c	; 0x273c <strstr>
     4fa:	89 2b       	or	r24, r25
     4fc:	a9 f1       	breq	.+106    	; 0x568 <GSMConnect+0x98>
		{
			sprintf(data_buffer,"AT+CSTT=\"%s\",\"%s\",\"%s\"\r",APN,ISP,ISP); //Set APN,User name,Password
     4fe:	80 ea       	ldi	r24, 0xA0	; 160
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	87 ea       	ldi	r24, 0xA7	; 167
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	c0 e8       	ldi	r28, 0x80	; 128
     518:	d2 e0       	ldi	r29, 0x02	; 2
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <sprintf>
			USART_SendString(data_buffer);
     522:	ce 01       	movw	r24, r28
     524:	0e 94 65 0f 	call	0x1eca	; 0x1eca <USART_SendString>
			memset(data_buffer, 0, 100);              
     528:	84 e6       	ldi	r24, 0x64	; 100
     52a:	fe 01       	movw	r30, r28
     52c:	11 92       	st	Z+, r1
     52e:	8a 95       	dec	r24
     530:	e9 f7       	brne	.-6      	; 0x52c <GSMConnect+0x5c>
     532:	8f e1       	ldi	r24, 0x1F	; 31
     534:	9e e4       	ldi	r25, 0x4E	; 78
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <GSMConnect+0x66>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <GSMConnect+0x6c>
     53c:	00 00       	nop
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	e9 e6       	ldi	r30, 0x69	; 105
     542:	f8 e1       	ldi	r31, 0x18	; 24
     544:	91 50       	subi	r25, 0x01	; 1
     546:	e0 40       	sbci	r30, 0x00	; 0
     548:	f0 40       	sbci	r31, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <GSMConnect+0x74>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <GSMConnect+0x7e>
     54e:	00 00       	nop
			lcd_msg("GSM Error!");
		}
	}
	
		_delay_ms(1000);
		lcd_cmd(0x01);
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	}
     556:	8d b7       	in	r24, 0x3d	; 61
     558:	9e b7       	in	r25, 0x3e	; 62
     55a:	0a 96       	adiw	r24, 0x0a	; 10
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	9e bf       	out	0x3e, r25	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	8d bf       	out	0x3d, r24	; 61
     566:	05 c0       	rjmp	.+10     	; 0x572 <GSMConnect+0xa2>
			break;
			
		}
		else
		{
			lcd_msg("GSM Error!");
     568:	8f eb       	ldi	r24, 0xBF	; 191
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
		}
	}
     570:	b1 cf       	rjmp	.-158    	; 0x4d4 <GSMConnect+0x4>
	
		_delay_ms(1000);
		lcd_cmd(0x01);
	}
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <__vector_13>:
	
    ISR(USART_RXC_vect)
    {
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
	    buff[buffer_pointer] = UDR;							/* copy UDR(received value) to buffer */
     58a:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <buffer_pointer>
     58e:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <buffer_pointer+0x1>
     592:	8c b1       	in	r24, 0x0c	; 12
     594:	ee 54       	subi	r30, 0x4E	; 78
     596:	fe 4f       	sbci	r31, 0xFE	; 254
     598:	80 83       	st	Z, r24
	    buffer_pointer++;
     59a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <buffer_pointer>
     59e:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <buffer_pointer+0x1>
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <buffer_pointer+0x1>
     5a8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <buffer_pointer>
	    status_flag = 1;						            /* flag for new message arrival */
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <__data_end>
    }
     5b2:	ff 91       	pop	r31
     5b4:	ef 91       	pop	r30
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <openSolenoidValves>:
#define SOLENOIDVALVES_H_

unsigned long case_num1;
unsigned long prev_millis1;
unsigned long need_millis1;
void openSolenoidValves(double oxygen, double air) {
     5c4:	8f 92       	push	r8
     5c6:	9f 92       	push	r9
     5c8:	af 92       	push	r10
     5ca:	bf 92       	push	r11
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	4b 01       	movw	r8, r22
     5da:	5c 01       	movw	r10, r24
     5dc:	ca 01       	movw	r24, r20
     5de:	b9 01       	movw	r22, r18
	
	air=air*1000;
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	4a e7       	ldi	r20, 0x7A	; 122
     5e6:	54 e4       	ldi	r21, 0x44	; 68
     5e8:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
     5ec:	6b 01       	movw	r12, r22
     5ee:	7c 01       	movw	r14, r24
	oxygen=oxygen*1000;
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	4a e7       	ldi	r20, 0x7A	; 122
     5f6:	54 e4       	ldi	r21, 0x44	; 68
     5f8:	c5 01       	movw	r24, r10
     5fa:	b4 01       	movw	r22, r8
     5fc:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
     600:	4b 01       	movw	r8, r22
     602:	5c 01       	movw	r10, r24
	
	if(air>oxygen){
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	c7 01       	movw	r24, r14
     60a:	b6 01       	movw	r22, r12
     60c:	0e 94 47 11 	call	0x228e	; 0x228e <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	0c f0       	brlt	.+2      	; 0x616 <openSolenoidValves+0x52>
     614:	b7 c1       	rjmp	.+878    	; 0x984 <__stack+0x125>
		if(prev_millis1==NULL){ // check whether this is the first time program reach to this line 
     616:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <prev_millis1>
     61a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <prev_millis1+0x1>
     61e:	89 2b       	or	r24, r25
     620:	09 f0       	breq	.+2      	; 0x624 <openSolenoidValves+0x60>
     622:	40 c0       	rjmp	.+128    	; 0x6a4 <openSolenoidValves+0xe0>
			
			prev_millis1=millis(); // get how many ms from the beginning of program 
     624:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
     628:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <prev_millis1>
     62c:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <prev_millis1+0x1>
     630:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <prev_millis1+0x2>
     634:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <prev_millis1+0x3>
			need_millis1=oxygen+prev_millis1; // at what time(ms) next action need to be done 
     638:	0e 94 95 10 	call	0x212a	; 0x212a <__floatunsisf>
     63c:	a5 01       	movw	r20, r10
     63e:	94 01       	movw	r18, r8
     640:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3>
     644:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
     648:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <need_millis1>
     64c:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <need_millis1+0x1>
     650:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <need_millis1+0x2>
     654:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <need_millis1+0x3>
			case_num1=1;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	a0 e0       	ldi	r26, 0x00	; 0
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     664:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     668:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     66c:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
			PORTC = PORTC | (1<<2);  //open oxygen(normally closed valve)
     670:	85 b3       	in	r24, 0x15	; 21
     672:	84 60       	ori	r24, 0x04	; 4
     674:	85 bb       	out	0x15, r24	; 21
			PORTC = PORTC & (~(1<<3)); //open air (normally open valve)
     676:	85 b3       	in	r24, 0x15	; 21
     678:	87 7f       	andi	r24, 0xF7	; 247
     67a:	85 bb       	out	0x15, r24	; 21
			case_num1++;
     67c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     680:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     684:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     688:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	a1 1d       	adc	r26, r1
     690:	b1 1d       	adc	r27, r1
     692:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     696:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     69a:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     69e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
     6a2:	70 c1       	rjmp	.+736    	; 0x984 <__stack+0x125>
			}else if(need_millis1<millis()){ // check whether next action time reached  
     6a4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
     6a8:	00 91 5e 02 	lds	r16, 0x025E	; 0x80025e <need_millis1>
     6ac:	10 91 5f 02 	lds	r17, 0x025F	; 0x80025f <need_millis1+0x1>
     6b0:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <need_millis1+0x2>
     6b4:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <need_millis1+0x3>
     6b8:	06 17       	cp	r16, r22
     6ba:	17 07       	cpc	r17, r23
     6bc:	28 07       	cpc	r18, r24
     6be:	39 07       	cpc	r19, r25
     6c0:	08 f0       	brcs	.+2      	; 0x6c4 <openSolenoidValves+0x100>
     6c2:	85 c0       	rjmp	.+266    	; 0x7ce <openSolenoidValves+0x20a>
			
			switch(case_num1){
     6c4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     6c8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     6cc:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     6d0:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	29 f0       	breq	.+10     	; 0x6e8 <openSolenoidValves+0x124>
     6de:	03 97       	sbiw	r24, 0x03	; 3
     6e0:	a1 05       	cpc	r26, r1
     6e2:	b1 05       	cpc	r27, r1
     6e4:	a1 f1       	breq	.+104    	; 0x74e <openSolenoidValves+0x18a>
     6e6:	62 c0       	rjmp	.+196    	; 0x7ac <openSolenoidValves+0x1e8>
				
				case 2:{PORTC = PORTC & (~(1<<2)); //close oxygen
     6e8:	85 b3       	in	r24, 0x15	; 21
     6ea:	8b 7f       	andi	r24, 0xFB	; 251
     6ec:	85 bb       	out	0x15, r24	; 21
						case_num1++;
     6ee:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     6f2:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     6f6:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     6fa:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	a1 1d       	adc	r26, r1
     702:	b1 1d       	adc	r27, r1
     704:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     708:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     70c:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     710:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
						need_millis1=need_millis1+air-oxygen; // at what time(ms) next action need to be done 
     714:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <need_millis1>
     718:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <need_millis1+0x1>
     71c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <need_millis1+0x2>
     720:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <need_millis1+0x3>
     724:	0e 94 95 10 	call	0x212a	; 0x212a <__floatunsisf>
     728:	a7 01       	movw	r20, r14
     72a:	96 01       	movw	r18, r12
     72c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3>
     730:	a5 01       	movw	r20, r10
     732:	94 01       	movw	r18, r8
     734:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
     738:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
     73c:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <need_millis1>
     740:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <need_millis1+0x1>
     744:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <need_millis1+0x2>
     748:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <need_millis1+0x3>
						break;
     74c:	1b c1       	rjmp	.+566    	; 0x984 <__stack+0x125>
						} 
				case 3:{PORTC = PORTC | (1<<3); //close air
     74e:	85 b3       	in	r24, 0x15	; 21
     750:	88 60       	ori	r24, 0x08	; 8
     752:	85 bb       	out	0x15, r24	; 21
						case_num1++;
     754:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     758:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     75c:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     760:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     76e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     772:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     776:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
						need_millis1=need_millis1+air; // at what time(ms) next action need to be done 
     77a:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <need_millis1>
     77e:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <need_millis1+0x1>
     782:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <need_millis1+0x2>
     786:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <need_millis1+0x3>
     78a:	0e 94 95 10 	call	0x212a	; 0x212a <__floatunsisf>
     78e:	a7 01       	movw	r20, r14
     790:	96 01       	movw	r18, r12
     792:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3>
     796:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
     79a:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <need_millis1>
     79e:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <need_millis1+0x1>
     7a2:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <need_millis1+0x2>
     7a6:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <need_millis1+0x3>
						break;
     7aa:	ec c0       	rjmp	.+472    	; 0x984 <__stack+0x125>
						}
				default:{case_num1=NULL; // to repeat process set values to null
     7ac:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <case_num1>
     7b0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <case_num1+0x1>
     7b4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <case_num1+0x2>
     7b8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <case_num1+0x3>
						prev_millis1=NULL;
     7bc:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <prev_millis1>
     7c0:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <prev_millis1+0x1>
     7c4:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <prev_millis1+0x2>
     7c8:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <prev_millis1+0x3>
     7cc:	db c0       	rjmp	.+438    	; 0x984 <__stack+0x125>
			}
			
			
			
			}else {
			if(prev_millis1==NULL){ // check whether this is the first time program reach to this line 
     7ce:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <prev_millis1>
     7d2:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <prev_millis1+0x1>
     7d6:	89 2b       	or	r24, r25
     7d8:	09 f0       	breq	.+2      	; 0x7dc <openSolenoidValves+0x218>
     7da:	40 c0       	rjmp	.+128    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
				
				prev_millis1=millis(); // get how many ms from the beginning of program 
     7dc:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
     7e0:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <prev_millis1>
     7e4:	70 93 63 02 	sts	0x0263, r23	; 0x800263 <prev_millis1+0x1>
     7e8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <prev_millis1+0x2>
     7ec:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <prev_millis1+0x3>
				need_millis1=air+prev_millis1; // at what time(ms) next action need to be done 
     7f0:	0e 94 95 10 	call	0x212a	; 0x212a <__floatunsisf>
     7f4:	a7 01       	movw	r20, r14
     7f6:	96 01       	movw	r18, r12
     7f8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3>
     7fc:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
     800:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <need_millis1>
     804:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <need_millis1+0x1>
     808:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <need_millis1+0x2>
     80c:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <need_millis1+0x3>
				case_num1=1;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a0 e0       	ldi	r26, 0x00	; 0
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     81c:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     820:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     824:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
				PORTC = PORTC | (1 << 2); //open oxygen(normally closed valve)
     828:	85 b3       	in	r24, 0x15	; 21
     82a:	84 60       	ori	r24, 0x04	; 4
     82c:	85 bb       	out	0x15, r24	; 21
				PORTC = PORTC & (~(1 << 3)); //open air (normally open valve)
     82e:	85 b3       	in	r24, 0x15	; 21
     830:	87 7f       	andi	r24, 0xF7	; 247
     832:	85 bb       	out	0x15, r24	; 21
				case_num1++;
     834:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     838:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     83c:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     840:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	a1 1d       	adc	r26, r1
     848:	b1 1d       	adc	r27, r1
     84a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     84e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     852:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     856:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
     85a:	94 c0       	rjmp	.+296    	; 0x984 <__stack+0x125>
				}else if(need_millis1<millis()){ // check whether next action time reached  
     85c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
     860:	00 91 5e 02 	lds	r16, 0x025E	; 0x80025e <need_millis1>
     864:	10 91 5f 02 	lds	r17, 0x025F	; 0x80025f <need_millis1+0x1>
     868:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <need_millis1+0x2>
     86c:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <need_millis1+0x3>
     870:	06 17       	cp	r16, r22
     872:	17 07       	cpc	r17, r23
     874:	28 07       	cpc	r18, r24
     876:	39 07       	cpc	r19, r25
     878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
     87a:	84 c0       	rjmp	.+264    	; 0x984 <__stack+0x125>
				
				switch(case_num1){
     87c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     880:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     884:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     888:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	91 05       	cpc	r25, r1
     890:	a1 05       	cpc	r26, r1
     892:	b1 05       	cpc	r27, r1
     894:	29 f0       	breq	.+10     	; 0x8a0 <__stack+0x41>
     896:	03 97       	sbiw	r24, 0x03	; 3
     898:	a1 05       	cpc	r26, r1
     89a:	b1 05       	cpc	r27, r1
     89c:	a1 f1       	breq	.+104    	; 0x906 <__stack+0xa7>
     89e:	62 c0       	rjmp	.+196    	; 0x964 <__stack+0x105>
					
					case 2:{PORTC = PORTC | (1<<3); //close air
     8a0:	85 b3       	in	r24, 0x15	; 21
     8a2:	88 60       	ori	r24, 0x08	; 8
     8a4:	85 bb       	out	0x15, r24	; 21
							case_num1++;
     8a6:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     8aa:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     8ae:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     8b2:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	a1 1d       	adc	r26, r1
     8ba:	b1 1d       	adc	r27, r1
     8bc:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     8c0:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     8c4:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     8c8:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
							need_millis1=need_millis1+oxygen-air; // at what time(ms) next action need to be done 
     8cc:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <need_millis1>
     8d0:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <need_millis1+0x1>
     8d4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <need_millis1+0x2>
     8d8:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <need_millis1+0x3>
     8dc:	0e 94 95 10 	call	0x212a	; 0x212a <__floatunsisf>
     8e0:	a5 01       	movw	r20, r10
     8e2:	94 01       	movw	r18, r8
     8e4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3>
     8e8:	a7 01       	movw	r20, r14
     8ea:	96 01       	movw	r18, r12
     8ec:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
     8f0:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
     8f4:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <need_millis1>
     8f8:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <need_millis1+0x1>
     8fc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <need_millis1+0x2>
     900:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <need_millis1+0x3>
							break;
     904:	3f c0       	rjmp	.+126    	; 0x984 <__stack+0x125>
							} 
					case 3:{PORTC = PORTC & (~(1<<2)); //close oxygen
     906:	85 b3       	in	r24, 0x15	; 21
     908:	8b 7f       	andi	r24, 0xFB	; 251
     90a:	85 bb       	out	0x15, r24	; 21
							case_num1++;
     90c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <case_num1>
     910:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <case_num1+0x1>
     914:	a0 91 9f 01 	lds	r26, 0x019F	; 0x80019f <case_num1+0x2>
     918:	b0 91 a0 01 	lds	r27, 0x01A0	; 0x8001a0 <case_num1+0x3>
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	a1 1d       	adc	r26, r1
     920:	b1 1d       	adc	r27, r1
     922:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <case_num1>
     926:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <case_num1+0x1>
     92a:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <case_num1+0x2>
     92e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <case_num1+0x3>
							need_millis1=need_millis1+oxygen; // at what time(ms) next action need to be done 
     932:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <need_millis1>
     936:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <need_millis1+0x1>
     93a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <need_millis1+0x2>
     93e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <need_millis1+0x3>
     942:	0e 94 95 10 	call	0x212a	; 0x212a <__floatunsisf>
     946:	a5 01       	movw	r20, r10
     948:	94 01       	movw	r18, r8
     94a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__addsf3>
     94e:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
     952:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <need_millis1>
     956:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <need_millis1+0x1>
     95a:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <need_millis1+0x2>
     95e:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <need_millis1+0x3>
							break;
     962:	10 c0       	rjmp	.+32     	; 0x984 <__stack+0x125>
							}
					default:{case_num1=NULL; // to repeat process set values to null
     964:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <case_num1>
     968:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <case_num1+0x1>
     96c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <case_num1+0x2>
     970:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <case_num1+0x3>
							prev_millis1=NULL;
     974:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <prev_millis1>
     978:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <prev_millis1+0x1>
     97c:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <prev_millis1+0x2>
     980:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <prev_millis1+0x3>
			}

		}

	}
}
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	08 95       	ret

0000099a <startStepperMotor>:

unsigned long prev_millis0;
unsigned long need_millis0;
int case_num0;

void startStepperMotor(int breathPerMin, int BreathLength) {
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
	if(prev_millis0==NULL){
     9a4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <prev_millis0>
     9a8:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <prev_millis0+0x1>
     9ac:	89 2b       	or	r24, r25
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <startStepperMotor+0x18>
     9b0:	3f c0       	rjmp	.+126    	; 0xa30 <startStepperMotor+0x96>
		
		prev_millis0=millis();
     9b2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
     9b6:	8b 01       	movw	r16, r22
     9b8:	9c 01       	movw	r18, r24
     9ba:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <prev_millis0>
     9be:	70 93 7d 02 	sts	0x027D, r23	; 0x80027d <prev_millis0+0x1>
     9c2:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <prev_millis0+0x2>
     9c6:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <prev_millis0+0x3>
		need_millis0=30000/(breathPerMin*10)+prev_millis0;
     9ca:	ce 01       	movw	r24, r28
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	be 01       	movw	r22, r28
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	66 0f       	add	r22, r22
     9d8:	77 1f       	adc	r23, r23
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	68 0f       	add	r22, r24
     9e0:	79 1f       	adc	r23, r25
     9e2:	80 e3       	ldi	r24, 0x30	; 48
     9e4:	95 e7       	ldi	r25, 0x75	; 117
     9e6:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     9ea:	cb 01       	movw	r24, r22
     9ec:	77 0f       	add	r23, r23
     9ee:	aa 0b       	sbc	r26, r26
     9f0:	bb 0b       	sbc	r27, r27
     9f2:	08 0f       	add	r16, r24
     9f4:	19 1f       	adc	r17, r25
     9f6:	2a 1f       	adc	r18, r26
     9f8:	3b 1f       	adc	r19, r27
     9fa:	00 93 ae 01 	sts	0x01AE, r16	; 0x8001ae <need_millis0>
     9fe:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <need_millis0+0x1>
     a02:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <need_millis0+0x2>
     a06:	30 93 b1 01 	sts	0x01B1, r19	; 0x8001b1 <need_millis0+0x3>
		case_num0=1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     a12:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
		PORTC = PORTC | (1<<4);case_num0++;
     a16:	85 b3       	in	r24, 0x15	; 21
     a18:	80 61       	ori	r24, 0x10	; 16
     a1a:	85 bb       	out	0x15, r24	; 21
     a1c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     a20:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     a2a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     a2e:	e3 c3       	rjmp	.+1990   	; 0x11f6 <startStepperMotor+0x85c>
		}else if(need_millis0<millis()){
     a30:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
     a34:	00 91 ae 01 	lds	r16, 0x01AE	; 0x8001ae <need_millis0>
     a38:	10 91 af 01 	lds	r17, 0x01AF	; 0x8001af <need_millis0+0x1>
     a3c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     a40:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     a44:	06 17       	cp	r16, r22
     a46:	17 07       	cpc	r17, r23
     a48:	28 07       	cpc	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	08 f0       	brcs	.+2      	; 0xa50 <startStepperMotor+0xb6>
     a4e:	d3 c3       	rjmp	.+1958   	; 0x11f6 <startStepperMotor+0x85c>
		
		switch(case_num0){
     a50:	e0 91 58 02 	lds	r30, 0x0258	; 0x800258 <case_num0>
     a54:	f0 91 59 02 	lds	r31, 0x0259	; 0x800259 <case_num0+0x1>
     a58:	32 97       	sbiw	r30, 0x02	; 2
     a5a:	e3 31       	cpi	r30, 0x13	; 19
     a5c:	f1 05       	cpc	r31, r1
     a5e:	08 f0       	brcs	.+2      	; 0xa62 <startStepperMotor+0xc8>
     a60:	be c3       	rjmp	.+1916   	; 0x11de <startStepperMotor+0x844>
     a62:	e6 5d       	subi	r30, 0xD6	; 214
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__tablejump2__>
			
			case 2:{PORTC = PORTC | (1<<6);
     a6a:	85 b3       	in	r24, 0x15	; 21
     a6c:	80 64       	ori	r24, 0x40	; 64
     a6e:	85 bb       	out	0x15, r24	; 21
				case_num0++;
     a70:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     a74:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     a7e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     a82:	ce 01       	movw	r24, r28
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	be 01       	movw	r22, r28
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	66 0f       	add	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	66 0f       	add	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	68 0f       	add	r22, r24
     a98:	79 1f       	adc	r23, r25
     a9a:	80 e3       	ldi	r24, 0x30	; 48
     a9c:	95 e7       	ldi	r25, 0x75	; 117
     a9e:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     aa2:	ab 01       	movw	r20, r22
     aa4:	77 0f       	add	r23, r23
     aa6:	66 0b       	sbc	r22, r22
     aa8:	77 0b       	sbc	r23, r23
     aaa:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     aae:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     ab2:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     ab6:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     aba:	84 0f       	add	r24, r20
     abc:	95 1f       	adc	r25, r21
     abe:	a6 1f       	adc	r26, r22
     ac0:	b7 1f       	adc	r27, r23
     ac2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     ac6:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     aca:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     ace:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     ad2:	91 c3       	rjmp	.+1826   	; 0x11f6 <startStepperMotor+0x85c>
			case 3:{PORTC = PORTC & (~(1<<4));
     ad4:	85 b3       	in	r24, 0x15	; 21
     ad6:	8f 7e       	andi	r24, 0xEF	; 239
     ad8:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     ada:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     ade:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     ae8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     aec:	ce 01       	movw	r24, r28
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	be 01       	movw	r22, r28
     af4:	66 0f       	add	r22, r22
     af6:	77 1f       	adc	r23, r23
     af8:	66 0f       	add	r22, r22
     afa:	77 1f       	adc	r23, r23
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	68 0f       	add	r22, r24
     b02:	79 1f       	adc	r23, r25
     b04:	80 e3       	ldi	r24, 0x30	; 48
     b06:	95 e7       	ldi	r25, 0x75	; 117
     b08:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     b0c:	ab 01       	movw	r20, r22
     b0e:	77 0f       	add	r23, r23
     b10:	66 0b       	sbc	r22, r22
     b12:	77 0b       	sbc	r23, r23
     b14:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     b18:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     b1c:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     b20:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     b24:	84 0f       	add	r24, r20
     b26:	95 1f       	adc	r25, r21
     b28:	a6 1f       	adc	r26, r22
     b2a:	b7 1f       	adc	r27, r23
     b2c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     b30:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     b34:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     b38:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     b3c:	5c c3       	rjmp	.+1720   	; 0x11f6 <startStepperMotor+0x85c>
			case 4:{PORTC = PORTC | (1<<5);
     b3e:	85 b3       	in	r24, 0x15	; 21
     b40:	80 62       	ori	r24, 0x20	; 32
     b42:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     b44:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     b48:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     b52:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     b56:	ce 01       	movw	r24, r28
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	be 01       	movw	r22, r28
     b5e:	66 0f       	add	r22, r22
     b60:	77 1f       	adc	r23, r23
     b62:	66 0f       	add	r22, r22
     b64:	77 1f       	adc	r23, r23
     b66:	66 0f       	add	r22, r22
     b68:	77 1f       	adc	r23, r23
     b6a:	68 0f       	add	r22, r24
     b6c:	79 1f       	adc	r23, r25
     b6e:	80 e3       	ldi	r24, 0x30	; 48
     b70:	95 e7       	ldi	r25, 0x75	; 117
     b72:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     b76:	ab 01       	movw	r20, r22
     b78:	77 0f       	add	r23, r23
     b7a:	66 0b       	sbc	r22, r22
     b7c:	77 0b       	sbc	r23, r23
     b7e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     b82:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     b86:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     b8a:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     b8e:	84 0f       	add	r24, r20
     b90:	95 1f       	adc	r25, r21
     b92:	a6 1f       	adc	r26, r22
     b94:	b7 1f       	adc	r27, r23
     b96:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     b9a:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     b9e:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     ba2:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     ba6:	27 c3       	rjmp	.+1614   	; 0x11f6 <startStepperMotor+0x85c>
			case 5:{PORTC = PORTC & (~(1<<6));
     ba8:	85 b3       	in	r24, 0x15	; 21
     baa:	8f 7b       	andi	r24, 0xBF	; 191
     bac:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     bae:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     bb2:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     bbc:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     bc0:	ce 01       	movw	r24, r28
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	be 01       	movw	r22, r28
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	66 0f       	add	r22, r22
     bd2:	77 1f       	adc	r23, r23
     bd4:	68 0f       	add	r22, r24
     bd6:	79 1f       	adc	r23, r25
     bd8:	80 e3       	ldi	r24, 0x30	; 48
     bda:	95 e7       	ldi	r25, 0x75	; 117
     bdc:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     be0:	ab 01       	movw	r20, r22
     be2:	77 0f       	add	r23, r23
     be4:	66 0b       	sbc	r22, r22
     be6:	77 0b       	sbc	r23, r23
     be8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     bec:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     bf0:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     bf4:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     bf8:	84 0f       	add	r24, r20
     bfa:	95 1f       	adc	r25, r21
     bfc:	a6 1f       	adc	r26, r22
     bfe:	b7 1f       	adc	r27, r23
     c00:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     c04:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     c08:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     c0c:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     c10:	f2 c2       	rjmp	.+1508   	; 0x11f6 <startStepperMotor+0x85c>
			case 6:{PORTC = PORTC | (1<<7);case_num0++;
     c12:	85 b3       	in	r24, 0x15	; 21
     c14:	80 68       	ori	r24, 0x80	; 128
     c16:	85 bb       	out	0x15, r24	; 21
     c18:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     c1c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     c26:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     c2a:	ce 01       	movw	r24, r28
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	be 01       	movw	r22, r28
     c32:	66 0f       	add	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	66 0f       	add	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	66 0f       	add	r22, r22
     c3c:	77 1f       	adc	r23, r23
     c3e:	68 0f       	add	r22, r24
     c40:	79 1f       	adc	r23, r25
     c42:	80 e3       	ldi	r24, 0x30	; 48
     c44:	95 e7       	ldi	r25, 0x75	; 117
     c46:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     c4a:	ab 01       	movw	r20, r22
     c4c:	77 0f       	add	r23, r23
     c4e:	66 0b       	sbc	r22, r22
     c50:	77 0b       	sbc	r23, r23
     c52:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     c56:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     c5a:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     c5e:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     c62:	84 0f       	add	r24, r20
     c64:	95 1f       	adc	r25, r21
     c66:	a6 1f       	adc	r26, r22
     c68:	b7 1f       	adc	r27, r23
     c6a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     c6e:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     c72:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     c76:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     c7a:	bd c2       	rjmp	.+1402   	; 0x11f6 <startStepperMotor+0x85c>
			case 7:{PORTC = PORTC & (~(1<<5));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     c7c:	85 b3       	in	r24, 0x15	; 21
     c7e:	8f 7d       	andi	r24, 0xDF	; 223
     c80:	85 bb       	out	0x15, r24	; 21
     c82:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     c86:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     c90:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     c94:	ce 01       	movw	r24, r28
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	be 01       	movw	r22, r28
     c9c:	66 0f       	add	r22, r22
     c9e:	77 1f       	adc	r23, r23
     ca0:	66 0f       	add	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	66 0f       	add	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	68 0f       	add	r22, r24
     caa:	79 1f       	adc	r23, r25
     cac:	80 e3       	ldi	r24, 0x30	; 48
     cae:	95 e7       	ldi	r25, 0x75	; 117
     cb0:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     cb4:	ab 01       	movw	r20, r22
     cb6:	77 0f       	add	r23, r23
     cb8:	66 0b       	sbc	r22, r22
     cba:	77 0b       	sbc	r23, r23
     cbc:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     cc0:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     cc4:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     cc8:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     ccc:	84 0f       	add	r24, r20
     cce:	95 1f       	adc	r25, r21
     cd0:	a6 1f       	adc	r26, r22
     cd2:	b7 1f       	adc	r27, r23
     cd4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     cd8:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     cdc:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     ce0:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     ce4:	88 c2       	rjmp	.+1296   	; 0x11f6 <startStepperMotor+0x85c>
			case 8:{PORTC = PORTC | (1<<4);case_num0++;
     ce6:	85 b3       	in	r24, 0x15	; 21
     ce8:	80 61       	ori	r24, 0x10	; 16
     cea:	85 bb       	out	0x15, r24	; 21
     cec:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     cf0:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     cfa:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     cfe:	ce 01       	movw	r24, r28
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	be 01       	movw	r22, r28
     d06:	66 0f       	add	r22, r22
     d08:	77 1f       	adc	r23, r23
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	68 0f       	add	r22, r24
     d14:	79 1f       	adc	r23, r25
     d16:	80 e3       	ldi	r24, 0x30	; 48
     d18:	95 e7       	ldi	r25, 0x75	; 117
     d1a:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     d1e:	ab 01       	movw	r20, r22
     d20:	77 0f       	add	r23, r23
     d22:	66 0b       	sbc	r22, r22
     d24:	77 0b       	sbc	r23, r23
     d26:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     d2a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     d2e:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     d32:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     d36:	84 0f       	add	r24, r20
     d38:	95 1f       	adc	r25, r21
     d3a:	a6 1f       	adc	r26, r22
     d3c:	b7 1f       	adc	r27, r23
     d3e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     d42:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     d46:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     d4a:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     d4e:	53 c2       	rjmp	.+1190   	; 0x11f6 <startStepperMotor+0x85c>
			case 9:{PORTC = PORTC & (~(1<<7));case_num0++;
     d50:	85 b3       	in	r24, 0x15	; 21
     d52:	8f 77       	andi	r24, 0x7F	; 127
     d54:	85 bb       	out	0x15, r24	; 21
     d56:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     d5a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     d64:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     d68:	ce 01       	movw	r24, r28
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	be 01       	movw	r22, r28
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	66 0f       	add	r22, r22
     d76:	77 1f       	adc	r23, r23
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	68 0f       	add	r22, r24
     d7e:	79 1f       	adc	r23, r25
     d80:	80 e3       	ldi	r24, 0x30	; 48
     d82:	95 e7       	ldi	r25, 0x75	; 117
     d84:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     d88:	ab 01       	movw	r20, r22
     d8a:	77 0f       	add	r23, r23
     d8c:	66 0b       	sbc	r22, r22
     d8e:	77 0b       	sbc	r23, r23
     d90:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     d94:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     d98:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     d9c:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     da0:	84 0f       	add	r24, r20
     da2:	95 1f       	adc	r25, r21
     da4:	a6 1f       	adc	r26, r22
     da6:	b7 1f       	adc	r27, r23
     da8:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     dac:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     db0:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     db4:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     db8:	1e c2       	rjmp	.+1084   	; 0x11f6 <startStepperMotor+0x85c>
			case 10:{PORTC = PORTC & (~(1<<4));
     dba:	85 b3       	in	r24, 0x15	; 21
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     dc0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     dc4:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     dce:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     dd2:	ce 01       	movw	r24, r28
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	be 01       	movw	r22, r28
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	66 0f       	add	r22, r22
     de0:	77 1f       	adc	r23, r23
     de2:	66 0f       	add	r22, r22
     de4:	77 1f       	adc	r23, r23
     de6:	68 0f       	add	r22, r24
     de8:	79 1f       	adc	r23, r25
     dea:	80 e3       	ldi	r24, 0x30	; 48
     dec:	95 e7       	ldi	r25, 0x75	; 117
     dee:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     df2:	ab 01       	movw	r20, r22
     df4:	77 0f       	add	r23, r23
     df6:	66 0b       	sbc	r22, r22
     df8:	77 0b       	sbc	r23, r23
     dfa:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     dfe:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     e02:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     e06:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     e0a:	84 0f       	add	r24, r20
     e0c:	95 1f       	adc	r25, r21
     e0e:	a6 1f       	adc	r26, r22
     e10:	b7 1f       	adc	r27, r23
     e12:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     e16:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     e1a:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     e1e:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     e22:	e9 c1       	rjmp	.+978    	; 0x11f6 <startStepperMotor+0x85c>
			case 11:{PORTC = PORTC | (1<<4);case_num0++;
     e24:	85 b3       	in	r24, 0x15	; 21
     e26:	80 61       	ori	r24, 0x10	; 16
     e28:	85 bb       	out	0x15, r24	; 21
     e2a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     e2e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     e38:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     e3c:	ce 01       	movw	r24, r28
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	be 01       	movw	r22, r28
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	68 0f       	add	r22, r24
     e52:	79 1f       	adc	r23, r25
     e54:	80 e3       	ldi	r24, 0x30	; 48
     e56:	95 e7       	ldi	r25, 0x75	; 117
     e58:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     e5c:	ab 01       	movw	r20, r22
     e5e:	77 0f       	add	r23, r23
     e60:	66 0b       	sbc	r22, r22
     e62:	77 0b       	sbc	r23, r23
     e64:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     e68:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     e6c:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     e70:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     e74:	84 0f       	add	r24, r20
     e76:	95 1f       	adc	r25, r21
     e78:	a6 1f       	adc	r26, r22
     e7a:	b7 1f       	adc	r27, r23
     e7c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     e80:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     e84:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     e88:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     e8c:	b4 c1       	rjmp	.+872    	; 0x11f6 <startStepperMotor+0x85c>
			case 12:{PORTC = PORTC | (1<<7);
     e8e:	85 b3       	in	r24, 0x15	; 21
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     e94:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     e98:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     ea2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     ea6:	ce 01       	movw	r24, r28
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	be 01       	movw	r22, r28
     eae:	66 0f       	add	r22, r22
     eb0:	77 1f       	adc	r23, r23
     eb2:	66 0f       	add	r22, r22
     eb4:	77 1f       	adc	r23, r23
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	68 0f       	add	r22, r24
     ebc:	79 1f       	adc	r23, r25
     ebe:	80 e3       	ldi	r24, 0x30	; 48
     ec0:	95 e7       	ldi	r25, 0x75	; 117
     ec2:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     ec6:	ab 01       	movw	r20, r22
     ec8:	77 0f       	add	r23, r23
     eca:	66 0b       	sbc	r22, r22
     ecc:	77 0b       	sbc	r23, r23
     ece:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     ed2:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     ed6:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     eda:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     ede:	84 0f       	add	r24, r20
     ee0:	95 1f       	adc	r25, r21
     ee2:	a6 1f       	adc	r26, r22
     ee4:	b7 1f       	adc	r27, r23
     ee6:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     eea:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     eee:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     ef2:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     ef6:	7f c1       	rjmp	.+766    	; 0x11f6 <startStepperMotor+0x85c>
			case 13:{PORTC = PORTC & (~(1<<4));
     ef8:	85 b3       	in	r24, 0x15	; 21
     efa:	8f 7e       	andi	r24, 0xEF	; 239
     efc:	85 bb       	out	0x15, r24	; 21
				case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     efe:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     f02:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     f0c:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     f10:	ce 01       	movw	r24, r28
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	be 01       	movw	r22, r28
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	66 0f       	add	r22, r22
     f1e:	77 1f       	adc	r23, r23
     f20:	66 0f       	add	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	68 0f       	add	r22, r24
     f26:	79 1f       	adc	r23, r25
     f28:	80 e3       	ldi	r24, 0x30	; 48
     f2a:	95 e7       	ldi	r25, 0x75	; 117
     f2c:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     f30:	ab 01       	movw	r20, r22
     f32:	77 0f       	add	r23, r23
     f34:	66 0b       	sbc	r22, r22
     f36:	77 0b       	sbc	r23, r23
     f38:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     f3c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     f40:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     f44:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     f48:	84 0f       	add	r24, r20
     f4a:	95 1f       	adc	r25, r21
     f4c:	a6 1f       	adc	r26, r22
     f4e:	b7 1f       	adc	r27, r23
     f50:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     f54:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     f58:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     f5c:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     f60:	4a c1       	rjmp	.+660    	; 0x11f6 <startStepperMotor+0x85c>
			case 14:{PORTC = PORTC | (1<<5);case_num0++;
     f62:	85 b3       	in	r24, 0x15	; 21
     f64:	80 62       	ori	r24, 0x20	; 32
     f66:	85 bb       	out	0x15, r24	; 21
     f68:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     f6c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     f76:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
     f7a:	ce 01       	movw	r24, r28
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	be 01       	movw	r22, r28
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	66 0f       	add	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	68 0f       	add	r22, r24
     f90:	79 1f       	adc	r23, r25
     f92:	80 e3       	ldi	r24, 0x30	; 48
     f94:	95 e7       	ldi	r25, 0x75	; 117
     f96:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
     f9a:	ab 01       	movw	r20, r22
     f9c:	77 0f       	add	r23, r23
     f9e:	66 0b       	sbc	r22, r22
     fa0:	77 0b       	sbc	r23, r23
     fa2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
     fa6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
     faa:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
     fae:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
     fb6:	a6 1f       	adc	r26, r22
     fb8:	b7 1f       	adc	r27, r23
     fba:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
     fbe:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
     fc2:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
     fc6:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
     fca:	15 c1       	rjmp	.+554    	; 0x11f6 <startStepperMotor+0x85c>
			case 16:{PORTC = PORTC & (~(1<<7));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
     fcc:	85 b3       	in	r24, 0x15	; 21
     fce:	8f 77       	andi	r24, 0x7F	; 127
     fd0:	85 bb       	out	0x15, r24	; 21
     fd2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
     fd6:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
     fe0:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
     fe4:	ce 01       	movw	r24, r28
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	be 01       	movw	r22, r28
     fec:	66 0f       	add	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	66 0f       	add	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	68 0f       	add	r22, r24
     ffa:	79 1f       	adc	r23, r25
     ffc:	80 e3       	ldi	r24, 0x30	; 48
     ffe:	95 e7       	ldi	r25, 0x75	; 117
    1000:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
    1004:	ab 01       	movw	r20, r22
    1006:	77 0f       	add	r23, r23
    1008:	66 0b       	sbc	r22, r22
    100a:	77 0b       	sbc	r23, r23
    100c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
    1010:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
    1014:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
    1018:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
    101c:	84 0f       	add	r24, r20
    101e:	95 1f       	adc	r25, r21
    1020:	a6 1f       	adc	r26, r22
    1022:	b7 1f       	adc	r27, r23
    1024:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
    1028:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
    102c:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
    1030:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
    1034:	e0 c0       	rjmp	.+448    	; 0x11f6 <startStepperMotor+0x85c>
			case 17:{PORTC = PORTC | (1<<6);case_num0++;
    1036:	85 b3       	in	r24, 0x15	; 21
    1038:	80 64       	ori	r24, 0x40	; 64
    103a:	85 bb       	out	0x15, r24	; 21
    103c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
    1040:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
    104a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
    104e:	ce 01       	movw	r24, r28
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	be 01       	movw	r22, r28
    1056:	66 0f       	add	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	68 0f       	add	r22, r24
    1064:	79 1f       	adc	r23, r25
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	95 e7       	ldi	r25, 0x75	; 117
    106a:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
    106e:	ab 01       	movw	r20, r22
    1070:	77 0f       	add	r23, r23
    1072:	66 0b       	sbc	r22, r22
    1074:	77 0b       	sbc	r23, r23
    1076:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
    107a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
    107e:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
    1082:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
    1086:	84 0f       	add	r24, r20
    1088:	95 1f       	adc	r25, r21
    108a:	a6 1f       	adc	r26, r22
    108c:	b7 1f       	adc	r27, r23
    108e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
    1092:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
    1096:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
    109a:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
    109e:	ab c0       	rjmp	.+342    	; 0x11f6 <startStepperMotor+0x85c>
			case 18:{PORTC = PORTC & (~(1<<5));case_num0++;
    10a0:	85 b3       	in	r24, 0x15	; 21
    10a2:	8f 7d       	andi	r24, 0xDF	; 223
    10a4:	85 bb       	out	0x15, r24	; 21
    10a6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
    10aa:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
    10b4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);break;}
    10b8:	ce 01       	movw	r24, r28
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	be 01       	movw	r22, r28
    10c0:	66 0f       	add	r22, r22
    10c2:	77 1f       	adc	r23, r23
    10c4:	66 0f       	add	r22, r22
    10c6:	77 1f       	adc	r23, r23
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	68 0f       	add	r22, r24
    10ce:	79 1f       	adc	r23, r25
    10d0:	80 e3       	ldi	r24, 0x30	; 48
    10d2:	95 e7       	ldi	r25, 0x75	; 117
    10d4:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
    10d8:	ab 01       	movw	r20, r22
    10da:	77 0f       	add	r23, r23
    10dc:	66 0b       	sbc	r22, r22
    10de:	77 0b       	sbc	r23, r23
    10e0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
    10e4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
    10e8:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
    10ec:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
    10f0:	84 0f       	add	r24, r20
    10f2:	95 1f       	adc	r25, r21
    10f4:	a6 1f       	adc	r26, r22
    10f6:	b7 1f       	adc	r27, r23
    10f8:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
    10fc:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
    1100:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
    1104:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
    1108:	76 c0       	rjmp	.+236    	; 0x11f6 <startStepperMotor+0x85c>
			case 19:{PORTC = PORTC & (~(1<<6));case_num0++;need_millis0=need_millis0+30000/(breathPerMin*10);
    110a:	85 b3       	in	r24, 0x15	; 21
    110c:	8f 7b       	andi	r24, 0xBF	; 191
    110e:	85 bb       	out	0x15, r24	; 21
    1110:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
    1114:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
    111e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
    1122:	ce 01       	movw	r24, r28
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	be 01       	movw	r22, r28
    112a:	66 0f       	add	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	66 0f       	add	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	66 0f       	add	r22, r22
    1134:	77 1f       	adc	r23, r23
    1136:	68 0f       	add	r22, r24
    1138:	79 1f       	adc	r23, r25
    113a:	80 e3       	ldi	r24, 0x30	; 48
    113c:	95 e7       	ldi	r25, 0x75	; 117
    113e:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
    1142:	ab 01       	movw	r20, r22
    1144:	77 0f       	add	r23, r23
    1146:	66 0b       	sbc	r22, r22
    1148:	77 0b       	sbc	r23, r23
    114a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
    114e:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
    1152:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
    1156:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
    115a:	84 0f       	add	r24, r20
    115c:	95 1f       	adc	r25, r21
    115e:	a6 1f       	adc	r26, r22
    1160:	b7 1f       	adc	r27, r23
    1162:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
    1166:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
    116a:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
    116e:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
    1172:	41 c0       	rjmp	.+130    	; 0x11f6 <startStepperMotor+0x85c>
			case 20:{PORTC = PORTC & (~(1<<4));case_num0++;
    1174:	85 b3       	in	r24, 0x15	; 21
    1176:	8f 7e       	andi	r24, 0xEF	; 239
    1178:	85 bb       	out	0x15, r24	; 21
    117a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <case_num0>
    117e:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <case_num0+0x1>
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <case_num0+0x1>
    1188:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <case_num0>
				need_millis0=need_millis0+30000/(breathPerMin*10);
    118c:	ce 01       	movw	r24, r28
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	be 01       	movw	r22, r28
    1194:	66 0f       	add	r22, r22
    1196:	77 1f       	adc	r23, r23
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	68 0f       	add	r22, r24
    11a2:	79 1f       	adc	r23, r25
    11a4:	80 e3       	ldi	r24, 0x30	; 48
    11a6:	95 e7       	ldi	r25, 0x75	; 117
    11a8:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodhi4>
    11ac:	ab 01       	movw	r20, r22
    11ae:	77 0f       	add	r23, r23
    11b0:	66 0b       	sbc	r22, r22
    11b2:	77 0b       	sbc	r23, r23
    11b4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <need_millis0>
    11b8:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <need_millis0+0x1>
    11bc:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <need_millis0+0x2>
    11c0:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <need_millis0+0x3>
    11c4:	84 0f       	add	r24, r20
    11c6:	95 1f       	adc	r25, r21
    11c8:	a6 1f       	adc	r26, r22
    11ca:	b7 1f       	adc	r27, r23
    11cc:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <need_millis0>
    11d0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <need_millis0+0x1>
    11d4:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <need_millis0+0x2>
    11d8:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <need_millis0+0x3>
				break;}
    11dc:	0c c0       	rjmp	.+24     	; 0x11f6 <startStepperMotor+0x85c>
			default:{case_num0=NULL;
    11de:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <case_num0+0x1>
    11e2:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <case_num0>
				prev_millis0=NULL;
    11e6:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <prev_millis0>
    11ea:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <prev_millis0+0x1>
    11ee:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <prev_millis0+0x2>
    11f2:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <prev_millis0+0x3>
	



	
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	08 95       	ret

00001200 <ADC_Init>:
#ifndef POTENTIOMETER_H_
#define POTENTIOMETER_H_

void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
    1200:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
    1202:	87 e8       	ldi	r24, 0x87	; 135
    1204:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
    1206:	80 e4       	ldi	r24, 0x40	; 64
    1208:	87 b9       	out	0x07, r24	; 7
    120a:	08 95       	ret

0000120c <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
    120c:	97 b1       	in	r25, 0x07	; 7
    120e:	8f 70       	andi	r24, 0x0F	; 15
    1210:	98 2b       	or	r25, r24
    1212:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
    1214:	86 b1       	in	r24, 0x06	; 6
    1216:	80 64       	ori	r24, 0x40	; 64
    1218:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
    121a:	34 9b       	sbis	0x06, 4	; 6
    121c:	fe cf       	rjmp	.-4      	; 0x121a <ADC_Read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121e:	8a e1       	ldi	r24, 0x1A	; 26
    1220:	8a 95       	dec	r24
    1222:	f1 f7       	brne	.-4      	; 0x1220 <ADC_Read+0x14>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <ADC_Read+0x1a>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
    1226:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
    1228:	85 b1       	in	r24, 0x05	; 5
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	98 2f       	mov	r25, r24
    122e:	88 27       	eor	r24, r24
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
    1230:	82 0f       	add	r24, r18
    1232:	91 1d       	adc	r25, r1
    1234:	08 95       	ret

00001236 <ADC_Read_Pressure>:
#ifndef MPX4250 PRESSURE SENSOR_H_
#define MPX4250 PRESSURE SENSOR_H_

int ADC_Read_Pressure(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    1236:	87 70       	andi	r24, 0x07	; 7
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
    123c:	86 b1       	in	r24, 0x06	; 6
    123e:	80 64       	ori	r24, 0x40	; 64
    1240:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    1242:	34 9b       	sbis	0x06, 4	; 6
    1244:	fe cf       	rjmp	.-4      	; 0x1242 <ADC_Read_Pressure+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
    1246:	86 b1       	in	r24, 0x06	; 6
    1248:	80 61       	ori	r24, 0x10	; 16
    124a:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    124c:	8f ec       	ldi	r24, 0xCF	; 207
    124e:	97 e0       	ldi	r25, 0x07	; 7
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <ADC_Read_Pressure+0x1a>
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <ADC_Read_Pressure+0x20>
    1256:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
    1258:	84 b1       	in	r24, 0x04	; 4
    125a:	95 b1       	in	r25, 0x05	; 5
}
    125c:	08 95       	ret

0000125e <get_pressure>:

float get_pressure(int pin)
{
	float kilopascal;
	kilopascal = (ADC_Read_Pressure(pin));
    125e:	0e 94 1b 09 	call	0x1236	; 0x1236 <ADC_Read_Pressure>
    1262:	bc 01       	movw	r22, r24
    1264:	99 0f       	add	r25, r25
    1266:	88 0b       	sbc	r24, r24
    1268:	99 0b       	sbc	r25, r25
    126a:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
	kilopascal = ((((kilopascal/1024)-0.04)/0.00369)-3.3);
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5a e3       	ldi	r21, 0x3A	; 58
    1276:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
    127a:	2a e0       	ldi	r18, 0x0A	; 10
    127c:	37 ed       	ldi	r19, 0xD7	; 215
    127e:	43 e2       	ldi	r20, 0x23	; 35
    1280:	5d e3       	ldi	r21, 0x3D	; 61
    1282:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
    1286:	2d ee       	ldi	r18, 0xED	; 237
    1288:	33 ed       	ldi	r19, 0xD3	; 211
    128a:	41 e7       	ldi	r20, 0x71	; 113
    128c:	5b e3       	ldi	r21, 0x3B	; 59
    128e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
    1292:	23 e3       	ldi	r18, 0x33	; 51
    1294:	33 e3       	ldi	r19, 0x33	; 51
    1296:	43 e5       	ldi	r20, 0x53	; 83
    1298:	50 e4       	ldi	r21, 0x40	; 64
    129a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
	return kilopascal;
}
    129e:	08 95       	ret

000012a0 <ADC_Read_Temperature>:
#ifndef LM35 TEMPERATURE SENSOR_H_
#define LM35 TEMPERATURE SENSOR_H_

int ADC_Read_Temperature(char channel)
{
	ADMUX = 0x40 | (channel & 0x07);   /* set input channel to read */
    12a0:	87 70       	andi	r24, 0x07	; 7
    12a2:	80 64       	ori	r24, 0x40	; 64
    12a4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);               /* Start ADC conversion */
    12a6:	86 b1       	in	r24, 0x06	; 6
    12a8:	80 64       	ori	r24, 0x40	; 64
    12aa:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));     /* Wait until end of conversion by polling ADC interrupt flag */
    12ac:	34 9b       	sbis	0x06, 4	; 6
    12ae:	fe cf       	rjmp	.-4      	; 0x12ac <ADC_Read_Temperature+0xc>
	ADCSRA |= (1<<ADIF);               /* Clear interrupt flag */
    12b0:	86 b1       	in	r24, 0x06	; 6
    12b2:	80 61       	ori	r24, 0x10	; 16
    12b4:	86 b9       	out	0x06, r24	; 6
    12b6:	8f ec       	ldi	r24, 0xCF	; 207
    12b8:	97 e0       	ldi	r25, 0x07	; 7
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <ADC_Read_Temperature+0x1a>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <ADC_Read_Temperature+0x20>
    12c0:	00 00       	nop
	_delay_ms(1);                      /* Wait a little bit */
	return ADCW;                       /* Return ADC word */
    12c2:	84 b1       	in	r24, 0x04	; 4
    12c4:	95 b1       	in	r25, 0x05	; 5
}
    12c6:	08 95       	ret

000012c8 <get_Temperature>:

float get_Temperature()
{
	float celsius;
	celsius = (ADC_Read_Temperature(5)*4.88);
    12c8:	85 e0       	ldi	r24, 0x05	; 5
    12ca:	0e 94 50 09 	call	0x12a0	; 0x12a0 <ADC_Read_Temperature>
    12ce:	bc 01       	movw	r22, r24
    12d0:	99 0f       	add	r25, r25
    12d2:	88 0b       	sbc	r24, r24
    12d4:	99 0b       	sbc	r25, r25
    12d6:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
    12da:	26 ef       	ldi	r18, 0xF6	; 246
    12dc:	38 e2       	ldi	r19, 0x28	; 40
    12de:	4c e9       	ldi	r20, 0x9C	; 156
    12e0:	50 e4       	ldi	r21, 0x40	; 64
    12e2:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
	celsius = (celsius/10.00);
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
	return celsius;
}
    12f2:	08 95       	ret

000012f4 <__vector_1>:
            return 0;
        }
    }
}
ISR(INT0_vect)
{ // External interrupt
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31

    OxygenAutomation = !OxygenAutomation;
    1316:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <OxygenAutomation>
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	89 27       	eor	r24, r25
    131e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <OxygenAutomation>

    if (OxygenAutomation)
    1322:	88 23       	and	r24, r24
    1324:	41 f0       	breq	.+16     	; 0x1336 <__vector_1+0x42>
    {
        lcd_cmd(0x01);
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("O2 Auto On");
    132c:	8a ec       	ldi	r24, 0xCA	; 202
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <__vector_1+0x50>
    }
    else
    {
        lcd_cmd(0x01);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("O2 Auto Off");
    133c:	85 ed       	ldi	r24, 0xD5	; 213
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1344:	2f e7       	ldi	r18, 0x7F	; 127
    1346:	88 e3       	ldi	r24, 0x38	; 56
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	21 50       	subi	r18, 0x01	; 1
    134c:	80 40       	sbci	r24, 0x00	; 0
    134e:	90 40       	sbci	r25, 0x00	; 0
    1350:	e1 f7       	brne	.-8      	; 0x134a <__vector_1+0x56>
    1352:	00 c0       	rjmp	.+0      	; 0x1354 <__vector_1+0x60>
    1354:	00 00       	nop
    }
    _delay_ms(50);
    lcd_cmd(0x01);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_2>:
ISR(INT1_vect)
{ // External interrupt
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	2f 93       	push	r18
    138a:	3f 93       	push	r19
    138c:	4f 93       	push	r20
    138e:	5f 93       	push	r21
    1390:	6f 93       	push	r22
    1392:	7f 93       	push	r23
    1394:	8f 93       	push	r24
    1396:	9f 93       	push	r25
    1398:	af 93       	push	r26
    139a:	bf 93       	push	r27
    139c:	ef 93       	push	r30
    139e:	ff 93       	push	r31
    power = !power;
    13a0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <power>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 27       	eor	r24, r25
    13a8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <power>
    if (power)
    13ac:	88 23       	and	r24, r24
    13ae:	41 f0       	breq	.+16     	; 0x13c0 <__vector_2+0x42>
    {
        lcd_cmd(0x01);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("Power On");
    13b6:	81 ee       	ldi	r24, 0xE1	; 225
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <__vector_2+0x50>
    }
    else
    {
        lcd_cmd(0x01);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
        lcd_msg("Power Off");
    13c6:	8a ee       	ldi	r24, 0xEA	; 234
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    13ce:	2f e7       	ldi	r18, 0x7F	; 127
    13d0:	88 e3       	ldi	r24, 0x38	; 56
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	21 50       	subi	r18, 0x01	; 1
    13d6:	80 40       	sbci	r24, 0x00	; 0
    13d8:	90 40       	sbci	r25, 0x00	; 0
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <__vector_2+0x56>
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <__vector_2+0x60>
    13de:	00 00       	nop
    }
    _delay_ms(50);
    lcd_cmd(0x01);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
}
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	bf 91       	pop	r27
    13ec:	af 91       	pop	r26
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	7f 91       	pop	r23
    13f4:	6f 91       	pop	r22
    13f6:	5f 91       	pop	r21
    13f8:	4f 91       	pop	r20
    13fa:	3f 91       	pop	r19
    13fc:	2f 91       	pop	r18
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <controlOxygenPercentage>:
    controlSolenoidValve(Oxygen_percentage, rBPM);
    startStepperMotor(rBPM, rBL);
}
void controlOxygenPercentage(int bloodOxygenLevel)
{
    if (bloodOxygenLevel < 40)
    1408:	88 32       	cpi	r24, 0x28	; 40
    140a:	91 05       	cpc	r25, r1
    140c:	3c f4       	brge	.+14     	; 0x141c <controlOxygenPercentage+0x14>
    {
        Oxygen_percentage = 90;
    140e:	8a e5       	ldi	r24, 0x5A	; 90
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1416:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    141a:	08 95       	ret
    }
    else if (bloodOxygenLevel < 70)
    141c:	86 34       	cpi	r24, 0x46	; 70
    141e:	91 05       	cpc	r25, r1
    1420:	3c f4       	brge	.+14     	; 0x1430 <controlOxygenPercentage+0x28>
    {
        Oxygen_percentage = 70;
    1422:	86 e4       	ldi	r24, 0x46	; 70
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    142a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    142e:	08 95       	ret
    }
    else if (bloodOxygenLevel < 90)
    1430:	8a 35       	cpi	r24, 0x5A	; 90
    1432:	91 05       	cpc	r25, r1
    1434:	3c f4       	brge	.+14     	; 0x1444 <controlOxygenPercentage+0x3c>
    {
        Oxygen_percentage = 60;
    1436:	8c e3       	ldi	r24, 0x3C	; 60
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    143e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1442:	08 95       	ret
    }
    else if (bloodOxygenLevel < 94)
    1444:	8e 35       	cpi	r24, 0x5E	; 94
    1446:	91 05       	cpc	r25, r1
    1448:	34 f4       	brge	.+12     	; 0x1456 <controlOxygenPercentage+0x4e>
    {
        Oxygen_percentage = 40;
    144a:	88 e2       	ldi	r24, 0x28	; 40
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Oxygen_percentage+0x1>
    1452:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <Oxygen_percentage>
    1456:	08 95       	ret

00001458 <getOxygenTankPressure>:
    }
}

double getOxygenTankPressure()
{
    float kilopascal = get_pressure(1); 
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 2f 09 	call	0x125e	; 0x125e <get_pressure>
	return kilopascal*1000; // return Oxygen tank pressure in pascal
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a e7       	ldi	r20, 0x7A	; 122
    1466:	54 e4       	ldi	r21, 0x44	; 68
    1468:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
}
    146c:	08 95       	ret

0000146e <controlSolenoidValve>:
    }
    // update variable Oxygen Percentage According to Blood Oxygen Level
}

void controlSolenoidValve(double oxygenPercentage, int breathPerMin)
{
    146e:	4f 92       	push	r4
    1470:	5f 92       	push	r5
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	6b 01       	movw	r12, r22
    1488:	7c 01       	movw	r14, r24
    double inflationTime = 30.0000 / breathPerMin;
    148a:	ba 01       	movw	r22, r20
    148c:	55 0f       	add	r21, r21
    148e:	88 0b       	sbc	r24, r24
    1490:	99 0b       	sbc	r25, r25
    1492:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
    1496:	9b 01       	movw	r18, r22
    1498:	ac 01       	movw	r20, r24
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	80 ef       	ldi	r24, 0xF0	; 240
    14a0:	91 e4       	ldi	r25, 0x41	; 65
    14a2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
    14a6:	4b 01       	movw	r8, r22
    14a8:	5c 01       	movw	r10, r24
    double constValue;
    double Pressure = 101325;
    double airDensity = 1.225;
    double OxygenDensity = 1.355;

    constValue = (0.79 * (1.266 * oxygenPercentage - 26.67) / (100 - oxygenPercentage)) * sqrt(Pressure * OxygenDensity / getOxygenTankPressure() / airDensity);
    14aa:	2a e4       	ldi	r18, 0x4A	; 74
    14ac:	3c e0       	ldi	r19, 0x0C	; 12
    14ae:	42 ea       	ldi	r20, 0xA2	; 162
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	c7 01       	movw	r24, r14
    14b4:	b6 01       	movw	r22, r12
    14b6:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
    14ba:	29 e2       	ldi	r18, 0x29	; 41
    14bc:	3c e5       	ldi	r19, 0x5C	; 92
    14be:	45 ed       	ldi	r20, 0xD5	; 213
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
    14c6:	21 e7       	ldi	r18, 0x71	; 113
    14c8:	3d e3       	ldi	r19, 0x3D	; 61
    14ca:	4a e4       	ldi	r20, 0x4A	; 74
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
    14d2:	2b 01       	movw	r4, r22
    14d4:	3c 01       	movw	r6, r24
    14d6:	a7 01       	movw	r20, r14
    14d8:	96 01       	movw	r18, r12
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	70 e0       	ldi	r23, 0x00	; 0
    14de:	88 ec       	ldi	r24, 0xC8	; 200
    14e0:	92 e4       	ldi	r25, 0x42	; 66
    14e2:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	c3 01       	movw	r24, r6
    14ec:	b2 01       	movw	r22, r4
    14ee:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
    14f2:	2b 01       	movw	r4, r22
    14f4:	3c 01       	movw	r6, r24
    14f6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <getOxygenTankPressure>
    14fa:	9b 01       	movw	r18, r22
    14fc:	ac 01       	movw	r20, r24
    14fe:	68 ed       	ldi	r22, 0xD8	; 216
    1500:	73 e1       	ldi	r23, 0x13	; 19
    1502:	86 e0       	ldi	r24, 0x06	; 6
    1504:	98 e4       	ldi	r25, 0x48	; 72
    1506:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
    150a:	6b 01       	movw	r12, r22
    150c:	7c 01       	movw	r14, r24
    150e:	2d ec       	ldi	r18, 0xCD	; 205
    1510:	3c ec       	ldi	r19, 0xCC	; 204
    1512:	4c e9       	ldi	r20, 0x9C	; 156
    1514:	5f e3       	ldi	r21, 0x3F	; 63
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
    151e:	0e 94 bf 11 	call	0x237e	; 0x237e <sqrt>
    1522:	9b 01       	movw	r18, r22
    1524:	ac 01       	movw	r20, r24
    1526:	c3 01       	movw	r24, r6
    1528:	b2 01       	movw	r22, r4
    152a:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
    152e:	6b 01       	movw	r12, r22
    1530:	7c 01       	movw	r14, r24
    if (constValue > 1)
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	5f e3       	ldi	r21, 0x3F	; 63
    153a:	0e 94 47 11 	call	0x228e	; 0x228e <__gesf2>
    153e:	18 16       	cp	r1, r24
    1540:	5c f4       	brge	.+22     	; 0x1558 <controlSolenoidValve+0xea>
    {
        tOxygen = inflationTime;
        tAir = tOxygen / constValue;
    1542:	a7 01       	movw	r20, r14
    1544:	96 01       	movw	r18, r12
    1546:	c5 01       	movw	r24, r10
    1548:	b4 01       	movw	r22, r8
    154a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
        openSolenoidValves(tAir, tOxygen); // values in s
    154e:	a5 01       	movw	r20, r10
    1550:	94 01       	movw	r18, r8
    1552:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <openSolenoidValves>
    1556:	0c c0       	rjmp	.+24     	; 0x1570 <controlSolenoidValve+0x102>
    }
    else
    {
        tAir = inflationTime;
        tOxygen = tAir * constValue;
    1558:	a7 01       	movw	r20, r14
    155a:	96 01       	movw	r18, r12
    155c:	c5 01       	movw	r24, r10
    155e:	b4 01       	movw	r22, r8
    1560:	0e 94 4c 11 	call	0x2298	; 0x2298 <__mulsf3>
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
        openSolenoidValves(tAir, tOxygen); // values in s
    1568:	c5 01       	movw	r24, r10
    156a:	b4 01       	movw	r22, r8
    156c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <openSolenoidValves>
    }
}
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	bf 90       	pop	r11
    157a:	af 90       	pop	r10
    157c:	9f 90       	pop	r9
    157e:	8f 90       	pop	r8
    1580:	7f 90       	pop	r7
    1582:	6f 90       	pop	r6
    1584:	5f 90       	pop	r5
    1586:	4f 90       	pop	r4
    1588:	08 95       	ret

0000158a <startAirSupply>:
	return kilopascal*1000; // return Oxygen tank pressure in pascal
}

void startAirSupply()
{
    startStepperMotor(rBPM, rBL);
    158a:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <rBL>
    158e:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <rBL+0x1>
    1592:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <rBPM>
    1596:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <rBPM+0x1>
    159a:	0e 94 cd 04 	call	0x99a	; 0x99a <startStepperMotor>
    controlSolenoidValve(0, rBPM);
    159e:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <rBPM>
    15a2:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <rBPM+0x1>
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	cb 01       	movw	r24, r22
    15ac:	0e 94 37 0a 	call	0x146e	; 0x146e <controlSolenoidValve>
    15b0:	08 95       	ret

000015b2 <checkBloodOxygenLevel>:
}
int checkBloodOxygenLevel()
{

    return 39; // return Blood Oxygen Level
}
    15b2:	87 e2       	ldi	r24, 0x27	; 39
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	08 95       	ret

000015b8 <startOxygenAndAirSupply>:
    _delay_ms(50);
    lcd_cmd(0x01);
}

void startOxygenAndAirSupply(int percentage)
{
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    controlOxygenPercentage(checkBloodOxygenLevel());
    15bc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <checkBloodOxygenLevel>
    15c0:	0e 94 04 0a 	call	0x1408	; 0x1408 <controlOxygenPercentage>
    controlSolenoidValve(Oxygen_percentage, rBPM);
    15c4:	c0 91 54 02 	lds	r28, 0x0254	; 0x800254 <rBPM>
    15c8:	d0 91 55 02 	lds	r29, 0x0255	; 0x800255 <rBPM+0x1>
    15cc:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Oxygen_percentage>
    15d0:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    15d4:	07 2e       	mov	r0, r23
    15d6:	00 0c       	add	r0, r0
    15d8:	88 0b       	sbc	r24, r24
    15da:	99 0b       	sbc	r25, r25
    15dc:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
    15e0:	ae 01       	movw	r20, r28
    15e2:	0e 94 37 0a 	call	0x146e	; 0x146e <controlSolenoidValve>
    startStepperMotor(rBPM, rBL);
    15e6:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <rBL>
    15ea:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <rBL+0x1>
    15ee:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <rBPM>
    15f2:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <rBPM+0x1>
    15f6:	0e 94 cd 04 	call	0x99a	; 0x99a <startStepperMotor>
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <PatientTemp>:
}

int PatientTemp()
{
	float temp;
	temp= get_Temperature();
    1600:	0e 94 64 09 	call	0x12c8	; 0x12c8 <get_Temperature>
    return temp; // return temperature value
    1604:	0e 94 5f 10 	call	0x20be	; 0x20be <__fixsfsi>
}
    1608:	cb 01       	movw	r24, r22
    160a:	08 95       	ret

0000160c <notifySpeaker>:

void notifySpeaker()
{
    DDRD = DDRD | (1 << 4);
    160c:	81 b3       	in	r24, 0x11	; 17
    160e:	80 61       	ori	r24, 0x10	; 16
    1610:	81 bb       	out	0x11, r24	; 17
    1612:	08 95       	ret

00001614 <getParametersFromKnobs>:
}

void getParametersFromKnobs()
{
 
	 ADC_Init();
    1614:	0e 94 00 09 	call	0x1200	; 0x1200 <ADC_Init>
	 value = ADC_Read(4);
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	0e 94 06 09 	call	0x120c	; 0x120c <ADC_Read>
    161e:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <value+0x1>
    1622:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <value>
	 rOP = (100 * value) / 1024; // OP range vary from 0 to 100
    1626:	44 e6       	ldi	r20, 0x64	; 100
    1628:	48 9f       	mul	r20, r24
    162a:	90 01       	movw	r18, r0
    162c:	49 9f       	mul	r20, r25
    162e:	30 0d       	add	r19, r0
    1630:	11 24       	eor	r1, r1
    1632:	33 23       	and	r19, r19
    1634:	14 f4       	brge	.+4      	; 0x163a <getParametersFromKnobs+0x26>
    1636:	21 50       	subi	r18, 0x01	; 1
    1638:	3c 4f       	sbci	r19, 0xFC	; 252
    163a:	83 2f       	mov	r24, r19
    163c:	88 0f       	add	r24, r24
    163e:	88 0b       	sbc	r24, r24
    1640:	93 2f       	mov	r25, r19
    1642:	95 95       	asr	r25
    1644:	95 95       	asr	r25
    1646:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <rOP>
    164a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <rOP+0x1>
	 Oxygen_percentage = rOP;
    164e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Oxygen_percentage>
    1652:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Oxygen_percentage+0x1>
    1656:	08 95       	ret

00001658 <automationOn>:
}

bool automationOn()
{
    return OxygenAutomation; // Check Automation On/Off
}
    1658:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <OxygenAutomation>
    165c:	08 95       	ret

0000165e <turnOn>:

bool turnOn()
{
    return power; // return 1 if power on switched pressed else return 0
}
    165e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <power>
    1662:	08 95       	ret

00001664 <notifyDisplay>:
    }
}

void notifyDisplay(const char *string)
{
    lcd_msg(string);
    1664:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    lcd_cmd(0x01);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    166e:	08 95       	ret

00001670 <checkPower>:
}

bool checkPower()
{
    if ((PINA & (1 << PINA7)) == (1 << PINA7))
    1670:	cf 9b       	sbis	0x19, 7	; 25
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <checkPower+0x8>
    {
        return 1; // pin is high
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	08 95       	ret
    }
    else
    {
        return 0; // pin is low
    1678:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    167a:	08 95       	ret

0000167c <concatS>:
    itoa(percentage, Spercentage, 10); // convert int to string

    sendSMS(Mobile_no, concatS(string, Spercentage));
}
const char *concatS(const char *string, char sPercentage[4])
{
    167c:	ef 92       	push	r14
    167e:	ff 92       	push	r15
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	8c 01       	movw	r16, r24
    168a:	eb 01       	movw	r28, r22
    char *result = malloc(strlen(string) + strlen(sPercentage) + 1);
    168c:	fc 01       	movw	r30, r24
    168e:	01 90       	ld	r0, Z+
    1690:	00 20       	and	r0, r0
    1692:	e9 f7       	brne	.-6      	; 0x168e <concatS+0x12>
    1694:	31 97       	sbiw	r30, 0x01	; 1
    1696:	cf 01       	movw	r24, r30
    1698:	80 1b       	sub	r24, r16
    169a:	91 0b       	sbc	r25, r17
    169c:	fb 01       	movw	r30, r22
    169e:	01 90       	ld	r0, Z+
    16a0:	00 20       	and	r0, r0
    16a2:	e9 f7       	brne	.-6      	; 0x169e <concatS+0x22>
    16a4:	31 97       	sbiw	r30, 0x01	; 1
    16a6:	e6 1b       	sub	r30, r22
    16a8:	f7 0b       	sbc	r31, r23
    16aa:	8e 0f       	add	r24, r30
    16ac:	9f 1f       	adc	r25, r31
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <malloc>
    16b4:	7c 01       	movw	r14, r24
    strcpy(result, string);
    16b6:	b8 01       	movw	r22, r16
    16b8:	0e 94 97 13 	call	0x272e	; 0x272e <strcpy>
    strcat(result, sPercentage);
    16bc:	be 01       	movw	r22, r28
    16be:	c7 01       	movw	r24, r14
    16c0:	0e 94 8c 13 	call	0x2718	; 0x2718 <strcat>
    return result;
}
    16c4:	c7 01       	movw	r24, r14
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	08 95       	ret

000016d4 <notifyGSM>:
        return 0; // pin is low
    }
}

void notifyGSM(const char *string, int percentage)
{
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	00 d0       	rcall	.+0      	; 0x16de <notifyGSM+0xa>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <notifyGSM+0xc>
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	8c 01       	movw	r16, r24
    16e6:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    16e8:	4a e0       	ldi	r20, 0x0A	; 10
    16ea:	be 01       	movw	r22, r28
    16ec:	6f 5f       	subi	r22, 0xFF	; 255
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
    16f0:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
    char Spercentage[4];
    itoa(percentage, Spercentage, 10); // convert int to string

    sendSMS(Mobile_no, concatS(string, Spercentage));
    16f4:	be 01       	movw	r22, r28
    16f6:	6f 5f       	subi	r22, 0xFF	; 255
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	c8 01       	movw	r24, r16
    16fc:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1700:	bc 01       	movw	r22, r24
    1702:	8a e6       	ldi	r24, 0x6A	; 106
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <sendSMS>
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <checkPatientTemp>:
{
    DDRD = DDRD | (1 << 4);
}

bool checkPatientTemp()
{
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	00 d0       	rcall	.+0      	; 0x1722 <checkPatientTemp+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <checkPatientTemp+0x8>
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    if (PatientTemp() > 37.2 || PatientTemp() < 36.1)
    1728:	0e 94 00 0b 	call	0x1600	; 0x1600 <PatientTemp>
    172c:	bc 01       	movw	r22, r24
    172e:	99 0f       	add	r25, r25
    1730:	88 0b       	sbc	r24, r24
    1732:	99 0b       	sbc	r25, r25
    1734:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
    1738:	2d ec       	ldi	r18, 0xCD	; 205
    173a:	3c ec       	ldi	r19, 0xCC	; 204
    173c:	44 e1       	ldi	r20, 0x14	; 20
    173e:	52 e4       	ldi	r21, 0x42	; 66
    1740:	0e 94 47 11 	call	0x228e	; 0x228e <__gesf2>
    1744:	18 16       	cp	r1, r24
    1746:	84 f0       	brlt	.+32     	; 0x1768 <checkPatientTemp+0x4c>
    1748:	0e 94 00 0b 	call	0x1600	; 0x1600 <PatientTemp>
    174c:	bc 01       	movw	r22, r24
    174e:	99 0f       	add	r25, r25
    1750:	88 0b       	sbc	r24, r24
    1752:	99 0b       	sbc	r25, r25
    1754:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
    1758:	26 e6       	ldi	r18, 0x66	; 102
    175a:	36 e6       	ldi	r19, 0x66	; 102
    175c:	40 e1       	ldi	r20, 0x10	; 16
    175e:	52 e4       	ldi	r21, 0x42	; 66
    1760:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__cmpsf2>
    1764:	88 23       	and	r24, r24
    1766:	e4 f4       	brge	.+56     	; 0x17a0 <checkPatientTemp+0x84>
    {
        notifyGSM("Temperature Not Normal-", PatientTemp());
    1768:	0e 94 00 0b 	call	0x1600	; 0x1600 <PatientTemp>
    176c:	bc 01       	movw	r22, r24
    176e:	84 ef       	ldi	r24, 0xF4	; 244
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <notifyGSM>
        char Spercentage[4];
        itoa(PatientTemp(), Spercentage, 10); // convert int to string
    1776:	0e 94 00 0b 	call	0x1600	; 0x1600 <PatientTemp>
    177a:	4a e0       	ldi	r20, 0x0A	; 10
    177c:	be 01       	movw	r22, r28
    177e:	6f 5f       	subi	r22, 0xFF	; 255
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
        notifyDisplay(concatS("Abnormal Temp-", Spercentage));
    1786:	be 01       	movw	r22, r28
    1788:	6f 5f       	subi	r22, 0xFF	; 255
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	8c e0       	ldi	r24, 0x0C	; 12
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1794:	0e 94 32 0b 	call	0x1664	; 0x1664 <notifyDisplay>
        notifySpeaker();
    1798:	0e 94 06 0b 	call	0x160c	; 0x160c <notifySpeaker>
        return 0;
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <checkPatientTemp+0x86>
    }
    else
    {
        return 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    }
    // if normal return 1 else notify speaker and gsm
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	08 95       	ret

000017b0 <oxygenTankPercentage>:

int oxygenTankPercentage()
{
	float x;
	int y;
	x=getOxygenTankPressure();
    17b0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <getOxygenTankPressure>
    17b4:	9b 01       	movw	r18, r22
    17b6:	ac 01       	movw	r20, r24
	y= (100-((300000-x)/3000));
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	7c e7       	ldi	r23, 0x7C	; 124
    17bc:	82 e9       	ldi	r24, 0x92	; 146
    17be:	98 e4       	ldi	r25, 0x48	; 72
    17c0:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e8       	ldi	r19, 0x80	; 128
    17c8:	4b e3       	ldi	r20, 0x3B	; 59
    17ca:	55 e4       	ldi	r21, 0x45	; 69
    17cc:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__divsf3>
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	88 ec       	ldi	r24, 0xC8	; 200
    17da:	92 e4       	ldi	r25, 0x42	; 66
    17dc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__subsf3>
    17e0:	0e 94 5f 10 	call	0x20be	; 0x20be <__fixsfsi>
    return y;
}
    17e4:	cb 01       	movw	r24, r22
    17e6:	08 95       	ret

000017e8 <checkStatus>:
{
    return power; // return 1 if power on switched pressed else return 0
}

bool checkStatus()
{
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <checkStatus+0x8>
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <checkStatus+0xa>
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    if (turnOn())
    17f6:	0e 94 2f 0b 	call	0x165e	; 0x165e <turnOn>
    17fa:	18 2f       	mov	r17, r24
    17fc:	88 23       	and	r24, r24
    17fe:	e9 f1       	breq	.+122    	; 0x187a <checkStatus+0x92>
    {
        if (oxygenTankPercentage() < 10)
    1800:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oxygenTankPercentage>
    1804:	0a 97       	sbiw	r24, 0x0a	; 10
    1806:	c4 f4       	brge	.+48     	; 0x1838 <checkStatus+0x50>
        {
            notifyGSM("Oxygen Tank Percentage : ", oxygenTankPercentage());
    1808:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oxygenTankPercentage>
    180c:	bc 01       	movw	r22, r24
    180e:	8b e1       	ldi	r24, 0x1B	; 27
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <notifyGSM>
            char Spercentage[4];
            itoa(oxygenTankPercentage(), Spercentage, 10); // convert int to string
    1816:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oxygenTankPercentage>
    181a:	4a e0       	ldi	r20, 0x0A	; 10
    181c:	be 01       	movw	r22, r28
    181e:	6f 5f       	subi	r22, 0xFF	; 255
    1820:	7f 4f       	sbci	r23, 0xFF	; 255
    1822:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
            notifyDisplay(concatS("OxyTank % ", Spercentage));
    1826:	be 01       	movw	r22, r28
    1828:	6f 5f       	subi	r22, 0xFF	; 255
    182a:	7f 4f       	sbci	r23, 0xFF	; 255
    182c:	85 e3       	ldi	r24, 0x35	; 53
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1834:	0e 94 32 0b 	call	0x1664	; 0x1664 <notifyDisplay>
        }
        if (!checkPower())
    1838:	0e 94 38 0b 	call	0x1670	; 0x1670 <checkPower>
    183c:	81 11       	cpse	r24, r1
    183e:	16 c0       	rjmp	.+44     	; 0x186c <checkStatus+0x84>
        {
            if (powerfailure == NULL)
    1840:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <powerfailure>
    1844:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <powerfailure+0x1>
    1848:	89 2b       	or	r24, r25
    184a:	69 f4       	brne	.+26     	; 0x1866 <checkStatus+0x7e>
            {
                lcd_msg("POWER FAILURE");
    184c:	80 e4       	ldi	r24, 0x40	; 64
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
                lcd_cmd(0x01);
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
                powerfailure = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <powerfailure+0x1>
    1862:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <powerfailure>
            }
            notifySpeaker();
    1866:	0e 94 06 0b 	call	0x160c	; 0x160c <notifySpeaker>
    186a:	07 c0       	rjmp	.+14     	; 0x187a <checkStatus+0x92>
        }
        else
        {
            powerfailure = NULL;
    186c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <powerfailure+0x1>
    1870:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <powerfailure>
            DDRD = DDRD | (0 << 4);
    1874:	91 b3       	in	r25, 0x11	; 17
    1876:	91 bb       	out	0x11, r25	; 17
        }
        return 1;
    1878:	18 2f       	mov	r17, r24
    }
    else
    {
        return 0;
    }
}
    187a:	81 2f       	mov	r24, r17
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	08 95       	ret

0000188c <checkPatientExpPresure>:
	y= (100-((300000-x)/3000));
    return y;
}
int checkPatientExpPresure()
{
	float kilopascal = get_pressure(2);
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 2f 09 	call	0x125e	; 0x125e <get_pressure>
	return kilopascal; // return patient expiration pressure in kilopascal
    1894:	0e 94 5f 10 	call	0x20be	; 0x20be <__fixsfsi>
}
    1898:	cb 01       	movw	r24, r22
    189a:	08 95       	ret

0000189c <Set_Heart_Rate>:

int Set_Heart_Rate()
{
	return 80;
    189c:	80 e5       	ldi	r24, 0x50	; 80
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	08 95       	ret

000018a2 <main>:
unsigned long case_num2;
unsigned long prev_millis2;
unsigned long need_millis2;

int main(void)
{
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <main+0xa>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <main+0xc>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62

    DDRC = DDRC | (1 << 2); // solenoid valve
    18b2:	84 b3       	in	r24, 0x14	; 20
    18b4:	84 60       	ori	r24, 0x04	; 4
    18b6:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 3); // solenoid valve
    18b8:	84 b3       	in	r24, 0x14	; 20
    18ba:	88 60       	ori	r24, 0x08	; 8
    18bc:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 4); // stepper motor
    18be:	84 b3       	in	r24, 0x14	; 20
    18c0:	80 61       	ori	r24, 0x10	; 16
    18c2:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 5); // stepper motor
    18c4:	84 b3       	in	r24, 0x14	; 20
    18c6:	80 62       	ori	r24, 0x20	; 32
    18c8:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 6); // stepper motor
    18ca:	84 b3       	in	r24, 0x14	; 20
    18cc:	80 64       	ori	r24, 0x40	; 64
    18ce:	84 bb       	out	0x14, r24	; 20
    DDRC = DDRC | (1 << 7); // stepper motor
    18d0:	84 b3       	in	r24, 0x14	; 20
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	84 bb       	out	0x14, r24	; 20

    DDRB = 0x0F;            // 0,1,3,2--->1   4,5,6,7-->0 for keypad
    18d6:	8f e0       	ldi	r24, 0x0F	; 15
    18d8:	87 bb       	out	0x17, r24	; 23
    DDRD = DDRD | (0 << 2); // PD2 as Oxygen Automation
    18da:	81 b3       	in	r24, 0x11	; 17
    18dc:	81 bb       	out	0x11, r24	; 17
    DDRD = DDRD | (0 << 3); // PD3 as input for power on
    18de:	81 b3       	in	r24, 0x11	; 17
    18e0:	81 bb       	out	0x11, r24	; 17
    DDRD = DDRD | (1 << 4); // Speaker
    18e2:	81 b3       	in	r24, 0x11	; 17
    18e4:	80 61       	ori	r24, 0x10	; 16
    18e6:	81 bb       	out	0x11, r24	; 17
    DDRA = DDRA | (0 << 7); // PA7 as input for power supply
    18e8:	8a b3       	in	r24, 0x1a	; 26
    18ea:	8a bb       	out	0x1a, r24	; 26

    MCUCR |= 1 << ISC01; // interrupt fire on falling edge in INT0
    18ec:	85 b7       	in	r24, 0x35	; 53
    18ee:	82 60       	ori	r24, 0x02	; 2
    18f0:	85 bf       	out	0x35, r24	; 53
    MCUCR |= 1 << ISC11; // interrupt fire on falling edge in INT1
    18f2:	85 b7       	in	r24, 0x35	; 53
    18f4:	88 60       	ori	r24, 0x08	; 8
    18f6:	85 bf       	out	0x35, r24	; 53

    //
    GICR |= 1 << INT0; // Enable the external interrupt source in general interrupt control register
    18f8:	8b b7       	in	r24, 0x3b	; 59
    18fa:	80 64       	ori	r24, 0x40	; 64
    18fc:	8b bf       	out	0x3b, r24	; 59
    GICR |= 1 << INT1; // Enable the external interrupt source in general interrupt control register
    18fe:	8b b7       	in	r24, 0x3b	; 59
    1900:	80 68       	ori	r24, 0x80	; 128
    1902:	8b bf       	out	0x3b, r24	; 59
	
    init_millis(8000000UL);
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	72 e1       	ldi	r23, 0x12	; 18
    1908:	8a e7       	ldi	r24, 0x7A	; 122
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <init_millis>
    sei();
    1910:	78 94       	sei
    ADC_Init();
    1912:	0e 94 00 09 	call	0x1200	; 0x1200 <ADC_Init>
    i2c_init();
    1916:	0e 94 c5 01 	call	0x38a	; 0x38a <i2c_init>
    i2c_start();
    191a:	0e 94 cb 01 	call	0x396	; 0x396 <i2c_start>
    i2c_write(0x70);
    191e:	80 e7       	ldi	r24, 0x70	; 112
    1920:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <i2c_write>
    lcd_init();
    1924:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_init>
	
	
    lcd_cmd(0x80);
    1928:	80 e8       	ldi	r24, 0x80	; 128
    192a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    lcd_msg("Enter Phone");
    192e:	8e e4       	ldi	r24, 0x4E	; 78
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1936:	8f e5       	ldi	r24, 0x5F	; 95
    1938:	9a ee       	ldi	r25, 0xEA	; 234
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	f1 f7       	brne	.-4      	; 0x193a <main+0x98>
    193e:	00 c0       	rjmp	.+0      	; 0x1940 <main+0x9e>
    1940:	00 00       	nop
    _delay_ms(30);
    lcd_cmd(0xC0);
    1942:	80 ec       	ldi	r24, 0xC0	; 192
    1944:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    1948:	8f e1       	ldi	r24, 0x1F	; 31
    194a:	9e e4       	ldi	r25, 0x4E	; 78
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <main+0xaa>
    1950:	00 c0       	rjmp	.+0      	; 0x1952 <main+0xb0>
    1952:	00 00       	nop
    _delay_ms(10);
    lcd_msg("Number");
    1954:	8a e5       	ldi	r24, 0x5A	; 90
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    195c:	8f e5       	ldi	r24, 0x5F	; 95
    195e:	9a ee       	ldi	r25, 0xEA	; 234
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <main+0xbe>
    1964:	00 c0       	rjmp	.+0      	; 0x1966 <main+0xc4>
    1966:	00 00       	nop
    _delay_ms(30);
    lcd_cmd(0x01);
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    196e:	9f ef       	ldi	r25, 0xFF	; 255
    1970:	20 e7       	ldi	r18, 0x70	; 112
    1972:	42 e0       	ldi	r20, 0x02	; 2
    1974:	91 50       	subi	r25, 0x01	; 1
    1976:	20 40       	sbci	r18, 0x00	; 0
    1978:	40 40       	sbci	r20, 0x00	; 0
    197a:	e1 f7       	brne	.-8      	; 0x1974 <main+0xd2>
    197c:	00 c0       	rjmp	.+0      	; 0x197e <main+0xdc>
    197e:	00 00       	nop
    _delay_ms(100);
    lcd_cmd(0x80);
    1980:	80 e8       	ldi	r24, 0x80	; 128
    1982:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>

initialPoint:
    lcd_cmd(0x01);
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>

    PORTB = 0xF0;
    198c:	80 ef       	ldi	r24, 0xF0	; 240
    198e:	88 bb       	out	0x18, r24	; 24
    int f = 0;
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	10 e0       	ldi	r17, 0x00	; 0
    do
    {
        x = Keypad();
    1994:	0e 94 5c 00 	call	0xb8	; 0xb8 <Keypad>
    1998:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <x>
        Mobile_no[f]=x;
    199c:	f8 01       	movw	r30, r16
    199e:	e6 59       	subi	r30, 0x96	; 150
    19a0:	fd 4f       	sbci	r31, 0xFD	; 253
    19a2:	80 83       	st	Z, r24
         
        if (((PINB & (1 << PINB4)) == 0) || ((PINB & (1 << PINB5)) == 0) || ((PINB & (1 << PINB6)) == 0))
    19a4:	b4 9b       	sbis	0x16, 4	; 22
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <main+0x10e>
    19a8:	b5 9b       	sbis	0x16, 5	; 22
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <main+0x10e>
    19ac:	b6 99       	sbic	0x16, 6	; 22
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <main+0x112>
        {
            f++;
    19b0:	0f 5f       	subi	r16, 0xFF	; 255
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        lcd_msg(x);
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    19ba:	5f e7       	ldi	r21, 0x7F	; 127
    19bc:	85 eb       	ldi	r24, 0xB5	; 181
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	51 50       	subi	r21, 0x01	; 1
    19c2:	80 40       	sbci	r24, 0x00	; 0
    19c4:	90 40       	sbci	r25, 0x00	; 0
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <main+0x11e>
    19c8:	00 c0       	rjmp	.+0      	; 0x19ca <main+0x128>
    19ca:	00 00       	nop
        _delay_ms(70);

        if ((PINB & (1 << PINB4)) == 0) // clr button
    19cc:	b4 9b       	sbis	0x16, 4	; 22
    19ce:	db cf       	rjmp	.-74     	; 0x1986 <main+0xe4>
        {
            goto initialPoint;
        }
        if ((PINB & (1 << PINB6)) == 0) // ok button
    19d0:	b6 9b       	sbis	0x16, 6	; 22
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <main+0x138>
        {
            break;
        }

    } while (PINB != 0xF0);
    19d4:	86 b3       	in	r24, 0x16	; 22
    19d6:	80 3f       	cpi	r24, 0xF0	; 240
    19d8:	e9 f6       	brne	.-70     	; 0x1994 <main+0xf2>
   
    lcd_cmd(0x01);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	lcd_cmd(0x80);
    19e0:	80 e8       	ldi	r24, 0x80	; 128
    19e2:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    lcd_msg("Number");
    19e6:	8a e5       	ldi	r24, 0x5A	; 90
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    lcd_cmd(0xc0);
    19ee:	80 ec       	ldi	r24, 0xC0	; 192
    19f0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    lcd_msg("Registered");
    19f4:	81 e6       	ldi	r24, 0x61	; 97
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    19fc:	2f ef       	ldi	r18, 0xFF	; 255
    19fe:	40 e7       	ldi	r20, 0x70	; 112
    1a00:	52 e0       	ldi	r21, 0x02	; 2
    1a02:	21 50       	subi	r18, 0x01	; 1
    1a04:	40 40       	sbci	r20, 0x00	; 0
    1a06:	50 40       	sbci	r21, 0x00	; 0
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <main+0x160>
    1a0a:	00 c0       	rjmp	.+0      	; 0x1a0c <main+0x16a>
    1a0c:	00 00       	nop
    _delay_ms(100);
    lcd_cmd(0x01);
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
	

    USART_Init(9600);
    1a14:	60 e8       	ldi	r22, 0x80	; 128
    1a16:	75 e2       	ldi	r23, 0x25	; 37
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <USART_Init>
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	99 e6       	ldi	r25, 0x69	; 105
    1a24:	28 e1       	ldi	r18, 0x18	; 24
    1a26:	81 50       	subi	r24, 0x01	; 1
    1a28:	90 40       	sbci	r25, 0x00	; 0
    1a2a:	20 40       	sbci	r18, 0x00	; 0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <main+0x184>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <main+0x18e>
    1a30:	00 00       	nop
    _delay_ms(1000);
    GSMConnect();
    1a32:	0e 94 68 02 	call	0x4d0	; 0x4d0 <GSMConnect>
    

    while (1)
    {
		switch (caseADC)
    1a36:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    1a3a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <main+0x1a8>
    1a44:	02 97       	sbiw	r24, 0x02	; 2
    1a46:	69 f1       	breq	.+90     	; 0x1aa2 <main+0x200>
    1a48:	56 c0       	rjmp	.+172    	; 0x1af6 <main+0x254>
		{
			case 1:
			{
				ADC_Init();
    1a4a:	0e 94 00 09 	call	0x1200	; 0x1200 <ADC_Init>
				value = ADC_Read(3);
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	0e 94 06 09 	call	0x120c	; 0x120c <ADC_Read>
    1a54:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <value+0x1>
    1a58:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <value>
				rBL = ((value * 500) / 1024) + 250; // BL range vary from 250 to 750
    1a5c:	44 ef       	ldi	r20, 0xF4	; 244
    1a5e:	51 e0       	ldi	r21, 0x01	; 1
    1a60:	84 9f       	mul	r24, r20
    1a62:	90 01       	movw	r18, r0
    1a64:	85 9f       	mul	r24, r21
    1a66:	30 0d       	add	r19, r0
    1a68:	94 9f       	mul	r25, r20
    1a6a:	30 0d       	add	r19, r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	33 23       	and	r19, r19
    1a70:	14 f4       	brge	.+4      	; 0x1a76 <main+0x1d4>
    1a72:	21 50       	subi	r18, 0x01	; 1
    1a74:	3c 4f       	sbci	r19, 0xFC	; 252
    1a76:	83 2f       	mov	r24, r19
    1a78:	85 95       	asr	r24
    1a7a:	85 95       	asr	r24
    1a7c:	93 2f       	mov	r25, r19
    1a7e:	99 0f       	add	r25, r25
    1a80:	99 0b       	sbc	r25, r25
    1a82:	86 50       	subi	r24, 0x06	; 6
    1a84:	9f 4f       	sbci	r25, 0xFF	; 255
    1a86:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <rBL+0x1>
    1a8a:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <rBL>
				caseADC++;
    1a8e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <caseADC>
    1a92:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <caseADC+0x1>
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1a9c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
				break;
    1aa0:	2a c0       	rjmp	.+84     	; 0x1af6 <main+0x254>
				
			}
			case 2:
			{
				ADC_Init();
    1aa2:	0e 94 00 09 	call	0x1200	; 0x1200 <ADC_Init>
				value = ADC_Read(0);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 06 09 	call	0x120c	; 0x120c <ADC_Read>
    1aac:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <value+0x1>
    1ab0:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <value>
				rBPM = ((value * 14) / 1024) + 10; // BPM range vary from 10 to 24
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	9c 01       	movw	r18, r24
    1aba:	22 0f       	add	r18, r18
    1abc:	33 1f       	adc	r19, r19
    1abe:	22 0f       	add	r18, r18
    1ac0:	33 1f       	adc	r19, r19
    1ac2:	22 0f       	add	r18, r18
    1ac4:	33 1f       	adc	r19, r19
    1ac6:	a9 01       	movw	r20, r18
    1ac8:	48 1b       	sub	r20, r24
    1aca:	59 0b       	sbc	r21, r25
    1acc:	9a 01       	movw	r18, r20
    1ace:	12 f4       	brpl	.+4      	; 0x1ad4 <main+0x232>
    1ad0:	21 50       	subi	r18, 0x01	; 1
    1ad2:	3c 4f       	sbci	r19, 0xFC	; 252
    1ad4:	83 2f       	mov	r24, r19
    1ad6:	85 95       	asr	r24
    1ad8:	85 95       	asr	r24
    1ada:	93 2f       	mov	r25, r19
    1adc:	99 0f       	add	r25, r25
    1ade:	99 0b       	sbc	r25, r25
    1ae0:	0a 96       	adiw	r24, 0x0a	; 10
    1ae2:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <rBPM+0x1>
    1ae6:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <rBPM>
				caseADC=1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <caseADC+0x1>
    1af2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <caseADC>
				break;
			}
			
		}
		
		if(prev_millis2==NULL){
    1af6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <prev_millis2>
    1afa:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <prev_millis2+0x1>
    1afe:	89 2b       	or	r24, r25
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <main+0x262>
    1b02:	84 c0       	rjmp	.+264    	; 0x1c0c <main+0x36a>
			
			prev_millis2=millis();
    1b04:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
    1b08:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <prev_millis2>
    1b0c:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <prev_millis2+0x1>
    1b10:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <prev_millis2+0x2>
    1b14:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <prev_millis2+0x3>
			need_millis2=500+prev_millis2;
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	8c 50       	subi	r24, 0x0C	; 12
    1b1e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b20:	af 4f       	sbci	r26, 0xFF	; 255
    1b22:	bf 4f       	sbci	r27, 0xFF	; 255
    1b24:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <need_millis2>
    1b28:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <need_millis2+0x1>
    1b2c:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <need_millis2+0x2>
    1b30:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <need_millis2+0x3>
			case_num2=1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <case_num2>
    1b40:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <case_num2+0x1>
    1b44:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <case_num2+0x2>
    1b48:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <case_num2+0x3>
			     char Spercentage[4];
			     lcd_cmd(0x01);
    1b4c:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
				 lcd_cmd(0x80);
    1b50:	80 e8       	ldi	r24, 0x80	; 128
    1b52:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
				 itoa(checkBloodOxygenLevel(), Spercentage, 10);
    1b56:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <checkBloodOxygenLevel>
    1b5a:	4a e0       	ldi	r20, 0x0A	; 10
    1b5c:	be 01       	movw	r22, r28
    1b5e:	6f 5f       	subi	r22, 0xFF	; 255
    1b60:	7f 4f       	sbci	r23, 0xFF	; 255
    1b62:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
				 lcd_msg(concatS("PBO2L-", Spercentage));
    1b66:	be 01       	movw	r22, r28
    1b68:	6f 5f       	subi	r22, 0xFF	; 255
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8c e6       	ldi	r24, 0x6C	; 108
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1b74:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
				 itoa(Set_Heart_Rate(), Spercentage, 10);
    1b78:	0e 94 4e 0c 	call	0x189c	; 0x189c <Set_Heart_Rate>
    1b7c:	4a e0       	ldi	r20, 0x0A	; 10
    1b7e:	be 01       	movw	r22, r28
    1b80:	6f 5f       	subi	r22, 0xFF	; 255
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
				 lcd_msg(concatS("  HR-", Spercentage));
    1b88:	be 01       	movw	r22, r28
    1b8a:	6f 5f       	subi	r22, 0xFF	; 255
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	83 e7       	ldi	r24, 0x73	; 115
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1b96:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
				 lcd_cmd(0xc0);
    1b9a:	80 ec       	ldi	r24, 0xC0	; 192
    1b9c:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
				 itoa(PatientTemp(), Spercentage, 10);
    1ba0:	0e 94 00 0b 	call	0x1600	; 0x1600 <PatientTemp>
    1ba4:	4a e0       	ldi	r20, 0x0A	; 10
    1ba6:	be 01       	movw	r22, r28
    1ba8:	6f 5f       	subi	r22, 0xFF	; 255
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
				 lcd_msg(concatS("Temp-",Spercentage));
    1bb0:	be 01       	movw	r22, r28
    1bb2:	6f 5f       	subi	r22, 0xFF	; 255
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	85 e1       	ldi	r24, 0x15	; 21
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1bbe:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
				 itoa(checkPatientExpPresure(), Spercentage, 10);
    1bc2:	0e 94 46 0c 	call	0x188c	; 0x188c <checkPatientExpPresure>
    1bc6:	4a e0       	ldi	r20, 0x0A	; 10
    1bc8:	be 01       	movw	r22, r28
    1bca:	6f 5f       	subi	r22, 0xFF	; 255
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
				 lcd_msg(concatS(" ExpP-", Spercentage));
    1bd2:	be 01       	movw	r22, r28
    1bd4:	6f 5f       	subi	r22, 0xFF	; 255
    1bd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd8:	89 e7       	ldi	r24, 0x79	; 121
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1be0:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
			case_num2++;
    1be4:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <case_num2>
    1be8:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <case_num2+0x1>
    1bec:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <case_num2+0x2>
    1bf0:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <case_num2+0x3>
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	b1 1d       	adc	r27, r1
    1bfa:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <case_num2>
    1bfe:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <case_num2+0x1>
    1c02:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <case_num2+0x2>
    1c06:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <case_num2+0x3>
    1c0a:	a8 c0       	rjmp	.+336    	; 0x1d5c <main+0x4ba>
			}else if(need_millis1<millis()){
    1c0c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <millis>
    1c10:	00 91 5e 02 	lds	r16, 0x025E	; 0x80025e <need_millis1>
    1c14:	10 91 5f 02 	lds	r17, 0x025F	; 0x80025f <need_millis1+0x1>
    1c18:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <need_millis1+0x2>
    1c1c:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <need_millis1+0x3>
    1c20:	06 17       	cp	r16, r22
    1c22:	17 07       	cpc	r17, r23
    1c24:	28 07       	cpc	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <main+0x38a>
    1c2a:	98 c0       	rjmp	.+304    	; 0x1d5c <main+0x4ba>
			
			switch(case_num2){
    1c2c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <case_num2>
    1c30:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <case_num2+0x1>
    1c34:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <case_num2+0x2>
    1c38:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <case_num2+0x3>
    1c3c:	02 97       	sbiw	r24, 0x02	; 2
    1c3e:	a1 05       	cpc	r26, r1
    1c40:	b1 05       	cpc	r27, r1
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <main+0x3a4>
    1c44:	7b c0       	rjmp	.+246    	; 0x1d3c <main+0x49a>
				
				case 2:{
					lcd_cmd(0x01);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
					lcd_cmd(0x80);
    1c4c:	80 e8       	ldi	r24, 0x80	; 128
    1c4e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
    1c52:	4a e0       	ldi	r20, 0x0A	; 10
    1c54:	be 01       	movw	r22, r28
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <rBPM>
    1c5e:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <rBPM+0x1>
    1c62:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
					char Spercentage1[4];
					itoa(rBPM, Spercentage1, 10);
					lcd_msg(concatS("BPM-", Spercentage1));
    1c66:	be 01       	movw	r22, r28
    1c68:	6f 5f       	subi	r22, 0xFF	; 255
    1c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6c:	80 e8       	ldi	r24, 0x80	; 128
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1c74:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1c78:	4a e0       	ldi	r20, 0x0A	; 10
    1c7a:	be 01       	movw	r22, r28
    1c7c:	6f 5f       	subi	r22, 0xFF	; 255
    1c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c80:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <rBL>
    1c84:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <rBL+0x1>
    1c88:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
					itoa(rBL, Spercentage1, 10);
					lcd_msg(concatS("   BL-", Spercentage1));
    1c8c:	be 01       	movw	r22, r28
    1c8e:	6f 5f       	subi	r22, 0xFF	; 255
    1c90:	7f 4f       	sbci	r23, 0xFF	; 255
    1c92:	85 e8       	ldi	r24, 0x85	; 133
    1c94:	91 e0       	ldi	r25, 0x01	; 1
    1c96:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1c9a:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
					lcd_cmd(0xc0);
    1c9e:	80 ec       	ldi	r24, 0xC0	; 192
    1ca0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_cmd>
					itoa(oxygenTankPercentage(), Spercentage1, 10);
    1ca4:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <oxygenTankPercentage>
    1ca8:	4a e0       	ldi	r20, 0x0A	; 10
    1caa:	be 01       	movw	r22, r28
    1cac:	6f 5f       	subi	r22, 0xFF	; 255
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
					lcd_msg(concatS("O2TP-", Spercentage1));
    1cb4:	be 01       	movw	r22, r28
    1cb6:	6f 5f       	subi	r22, 0xFF	; 255
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	8c e8       	ldi	r24, 0x8C	; 140
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1cc2:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
    1cc6:	4a e0       	ldi	r20, 0x0A	; 10
    1cc8:	be 01       	movw	r22, r28
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    1cd2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    1cd6:	0e 94 b8 13 	call	0x2770	; 0x2770 <__itoa_ncheck>
					itoa(Oxygen_percentage, Spercentage1, 10);
					lcd_msg(concatS(" AO2P-", Spercentage1));
    1cda:	be 01       	movw	r22, r28
    1cdc:	6f 5f       	subi	r22, 0xFF	; 255
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	82 e9       	ldi	r24, 0x92	; 146
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	0e 94 3e 0b 	call	0x167c	; 0x167c <concatS>
    1ce8:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_msg>
					case_num2++;
    1cec:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <case_num2>
    1cf0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <case_num2+0x1>
    1cf4:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <case_num2+0x2>
    1cf8:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <case_num2+0x3>
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	a1 1d       	adc	r26, r1
    1d00:	b1 1d       	adc	r27, r1
    1d02:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <case_num2>
    1d06:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <case_num2+0x1>
    1d0a:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <case_num2+0x2>
    1d0e:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <case_num2+0x3>
					need_millis2=need_millis2+500;
    1d12:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <need_millis2>
    1d16:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <need_millis2+0x1>
    1d1a:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <need_millis2+0x2>
    1d1e:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <need_millis2+0x3>
    1d22:	8c 50       	subi	r24, 0x0C	; 12
    1d24:	9e 4f       	sbci	r25, 0xFE	; 254
    1d26:	af 4f       	sbci	r26, 0xFF	; 255
    1d28:	bf 4f       	sbci	r27, 0xFF	; 255
    1d2a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <need_millis2>
    1d2e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <need_millis2+0x1>
    1d32:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <need_millis2+0x2>
    1d36:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <need_millis2+0x3>
    1d3a:	10 c0       	rjmp	.+32     	; 0x1d5c <main+0x4ba>
					break;
				} 
				
				default:{case_num2=NULL;
    1d3c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <case_num2>
    1d40:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <case_num2+0x1>
    1d44:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <case_num2+0x2>
    1d48:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <case_num2+0x3>
					prev_millis2=NULL;
    1d4c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <prev_millis2>
    1d50:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <prev_millis2+0x1>
    1d54:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <prev_millis2+0x2>
    1d58:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <prev_millis2+0x3>
       
       

        

        if (checkStatus())
    1d5c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <checkStatus>
    1d60:	88 23       	and	r24, r24
    1d62:	e1 f1       	breq	.+120    	; 0x1ddc <main+0x53a>
        {
            if (automationOn())
    1d64:	0e 94 2c 0b 	call	0x1658	; 0x1658 <automationOn>
    1d68:	88 23       	and	r24, r24
    1d6a:	c1 f0       	breq	.+48     	; 0x1d9c <main+0x4fa>
            {
                if (checkPatientTemp())
    1d6c:	0e 94 8e 0b 	call	0x171c	; 0x171c <checkPatientTemp>
    1d70:	88 23       	and	r24, r24
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <main+0x4d4>
    1d74:	60 ce       	rjmp	.-832    	; 0x1a36 <main+0x194>
                {

                    if (checkBloodOxygenLevel() < Average_Blood_Oxygen_level)
    1d76:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <checkBloodOxygenLevel>
    1d7a:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <Average_Blood_Oxygen_level>
    1d7e:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <Average_Blood_Oxygen_level+0x1>
    1d82:	82 17       	cp	r24, r18
    1d84:	93 07       	cpc	r25, r19
    1d86:	3c f4       	brge	.+14     	; 0x1d96 <main+0x4f4>
                    {
                        startOxygenAndAirSupply(Oxygen_percentage);
    1d88:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <Oxygen_percentage>
    1d8c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    1d90:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <startOxygenAndAirSupply>
    1d94:	50 ce       	rjmp	.-864    	; 0x1a36 <main+0x194>
                    }
                    else
                    {
                        startAirSupply();
    1d96:	0e 94 c5 0a 	call	0x158a	; 0x158a <startAirSupply>
    1d9a:	4d ce       	rjmp	.-870    	; 0x1a36 <main+0x194>
                    }
                }
            }
            else
            {
                checkPatientTemp();
    1d9c:	0e 94 8e 0b 	call	0x171c	; 0x171c <checkPatientTemp>
                getParametersFromKnobs(); // update o2 percentage manually
    1da0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <getParametersFromKnobs>
                controlSolenoidValve(Oxygen_percentage, rBPM);
    1da4:	00 91 54 02 	lds	r16, 0x0254	; 0x800254 <rBPM>
    1da8:	10 91 55 02 	lds	r17, 0x0255	; 0x800255 <rBPM+0x1>
    1dac:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Oxygen_percentage>
    1db0:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Oxygen_percentage+0x1>
    1db4:	07 2e       	mov	r0, r23
    1db6:	00 0c       	add	r0, r0
    1db8:	88 0b       	sbc	r24, r24
    1dba:	99 0b       	sbc	r25, r25
    1dbc:	0e 94 97 10 	call	0x212e	; 0x212e <__floatsisf>
    1dc0:	a8 01       	movw	r20, r16
    1dc2:	0e 94 37 0a 	call	0x146e	; 0x146e <controlSolenoidValve>
                startStepperMotor(rBPM, rBL);
    1dc6:	60 91 52 02 	lds	r22, 0x0252	; 0x800252 <rBL>
    1dca:	70 91 53 02 	lds	r23, 0x0253	; 0x800253 <rBL+0x1>
    1dce:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <rBPM>
    1dd2:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <rBPM+0x1>
    1dd6:	0e 94 cd 04 	call	0x99a	; 0x99a <startStepperMotor>
    1dda:	2d ce       	rjmp	.-934    	; 0x1a36 <main+0x194>
        else
        {
            return 0;
        }
    }
}
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	08 95       	ret

00001df2 <__vector_7>:
#include <avr/interrupt.h>

#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    1df2:	1f 92       	push	r1
    1df4:	0f 92       	push	r0
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	0f 92       	push	r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	8f 93       	push	r24
    1dfe:	9f 93       	push	r25
    1e00:	af 93       	push	r26
    1e02:	bf 93       	push	r27
  timer1_millis++;
    1e04:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <timer1_millis>
    1e08:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <timer1_millis+0x1>
    1e0c:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <timer1_millis+0x2>
    1e10:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <timer1_millis+0x3>
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	a1 1d       	adc	r26, r1
    1e18:	b1 1d       	adc	r27, r1
    1e1a:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <timer1_millis>
    1e1e:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <timer1_millis+0x1>
    1e22:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <timer1_millis+0x2>
    1e26:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <timer1_millis+0x3>
}
    1e2a:	bf 91       	pop	r27
    1e2c:	af 91       	pop	r26
    1e2e:	9f 91       	pop	r25
    1e30:	8f 91       	pop	r24
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <init_millis>:

void init_millis(unsigned long f_cpu)
{
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    1e3c:	20 e4       	ldi	r18, 0x40	; 64
    1e3e:	3f e1       	ldi	r19, 0x1F	; 31
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodsi4>

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    1e48:	8e b5       	in	r24, 0x2e	; 46
    1e4a:	8a 60       	ori	r24, 0x0A	; 10
    1e4c:	8e bd       	out	0x2e, r24	; 46

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    1e4e:	bb 27       	eor	r27, r27
    1e50:	a5 2f       	mov	r26, r21
    1e52:	94 2f       	mov	r25, r20
    1e54:	83 2f       	mov	r24, r19
    1e56:	8b bd       	out	0x2b, r24	; 43
  OCR1AL = ctc_match_overflow;
    1e58:	2a bd       	out	0x2a, r18	; 42

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    1e5a:	89 b7       	in	r24, 0x39	; 57
    1e5c:	80 61       	ori	r24, 0x10	; 16
    1e5e:	89 bf       	out	0x39, r24	; 57
    1e60:	08 95       	ret

00001e62 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e62:	f8 94       	cli
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    1e64:	21 e0       	ldi	r18, 0x01	; 1
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <millis+0x18>
    millis_return = timer1_millis;
    1e68:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <timer1_millis>
    1e6c:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <timer1_millis+0x1>
    1e70:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer1_millis+0x2>
    1e74:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer1_millis+0x3>
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	21 11       	cpse	r18, r1
    1e7c:	f5 cf       	rjmp	.-22     	; 0x1e68 <millis+0x6>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    1e7e:	78 94       	sei
    millis_return = timer1_millis;
  }
  return millis_return;
}
    1e80:	08 95       	ret

00001e82 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */
}
    1e82:	2a b1       	in	r18, 0x0a	; 10
    1e84:	28 69       	ori	r18, 0x98	; 152
    1e86:	2a b9       	out	0x0a, r18	; 10
    1e88:	20 b5       	in	r18, 0x20	; 32
    1e8a:	26 68       	ori	r18, 0x86	; 134
    1e8c:	20 bd       	out	0x20, r18	; 32
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	22 0f       	add	r18, r18
    1e94:	33 1f       	adc	r19, r19
    1e96:	44 1f       	adc	r20, r20
    1e98:	55 1f       	adc	r21, r21
    1e9a:	60 e4       	ldi	r22, 0x40	; 64
    1e9c:	72 e4       	ldi	r23, 0x42	; 66
    1e9e:	8f e0       	ldi	r24, 0x0F	; 15
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 28 12 	call	0x2450	; 0x2450 <__udivmodsi4>
    1ea6:	8f ef       	ldi	r24, 0xFF	; 255
    1ea8:	82 0f       	add	r24, r18
    1eaa:	89 b9       	out	0x09, r24	; 9
    1eac:	da 01       	movw	r26, r20
    1eae:	c9 01       	movw	r24, r18
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	a1 09       	sbc	r26, r1
    1eb4:	b1 09       	sbc	r27, r1
    1eb6:	89 2f       	mov	r24, r25
    1eb8:	9a 2f       	mov	r25, r26
    1eba:	ab 2f       	mov	r26, r27
    1ebc:	bb 27       	eor	r27, r27
    1ebe:	80 bd       	out	0x20, r24	; 32
    1ec0:	08 95       	ret

00001ec2 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
    1ec2:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
    1ec4:	5d 9b       	sbis	0x0b, 5	; 11
    1ec6:	fe cf       	rjmp	.-4      	; 0x1ec4 <USART_TxChar+0x2>
}
    1ec8:	08 95       	ret

00001eca <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	8c 01       	movw	r16, r24
	int i=0;
    1ed4:	c0 e0       	ldi	r28, 0x00	; 0
    1ed6:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i]!=0)
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <USART_SendString+0x16>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    1eda:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <USART_TxChar>
		i++;
    1ede:	21 96       	adiw	r28, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	ec 0f       	add	r30, r28
    1ee4:	fd 1f       	adc	r31, r29
    1ee6:	80 81       	ld	r24, Z
    1ee8:	81 11       	cpse	r24, r1
    1eea:	f7 cf       	rjmp	.-18     	; 0x1eda <USART_SendString+0x10>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	08 95       	ret

00001ef6 <__subsf3>:
    1ef6:	50 58       	subi	r21, 0x80	; 128

00001ef8 <__addsf3>:
    1ef8:	bb 27       	eor	r27, r27
    1efa:	aa 27       	eor	r26, r26
    1efc:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <__addsf3x>
    1f00:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__fp_round>
    1f04:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fp_pscA>
    1f08:	38 f0       	brcs	.+14     	; 0x1f18 <__addsf3+0x20>
    1f0a:	0e 94 06 11 	call	0x220c	; 0x220c <__fp_pscB>
    1f0e:	20 f0       	brcs	.+8      	; 0x1f18 <__addsf3+0x20>
    1f10:	39 f4       	brne	.+14     	; 0x1f20 <__addsf3+0x28>
    1f12:	9f 3f       	cpi	r25, 0xFF	; 255
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <__addsf3+0x24>
    1f16:	26 f4       	brtc	.+8      	; 0x1f20 <__addsf3+0x28>
    1f18:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__fp_nan>
    1f1c:	0e f4       	brtc	.+2      	; 0x1f20 <__addsf3+0x28>
    1f1e:	e0 95       	com	r30
    1f20:	e7 fb       	bst	r30, 7
    1f22:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_inf>

00001f26 <__addsf3x>:
    1f26:	e9 2f       	mov	r30, r25
    1f28:	0e 94 1e 11 	call	0x223c	; 0x223c <__fp_split3>
    1f2c:	58 f3       	brcs	.-42     	; 0x1f04 <__addsf3+0xc>
    1f2e:	ba 17       	cp	r27, r26
    1f30:	62 07       	cpc	r22, r18
    1f32:	73 07       	cpc	r23, r19
    1f34:	84 07       	cpc	r24, r20
    1f36:	95 07       	cpc	r25, r21
    1f38:	20 f0       	brcs	.+8      	; 0x1f42 <__addsf3x+0x1c>
    1f3a:	79 f4       	brne	.+30     	; 0x1f5a <__addsf3x+0x34>
    1f3c:	a6 f5       	brtc	.+104    	; 0x1fa6 <__addsf3x+0x80>
    1f3e:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__fp_zero>
    1f42:	0e f4       	brtc	.+2      	; 0x1f46 <__addsf3x+0x20>
    1f44:	e0 95       	com	r30
    1f46:	0b 2e       	mov	r0, r27
    1f48:	ba 2f       	mov	r27, r26
    1f4a:	a0 2d       	mov	r26, r0
    1f4c:	0b 01       	movw	r0, r22
    1f4e:	b9 01       	movw	r22, r18
    1f50:	90 01       	movw	r18, r0
    1f52:	0c 01       	movw	r0, r24
    1f54:	ca 01       	movw	r24, r20
    1f56:	a0 01       	movw	r20, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	ff 27       	eor	r31, r31
    1f5c:	59 1b       	sub	r21, r25
    1f5e:	99 f0       	breq	.+38     	; 0x1f86 <__addsf3x+0x60>
    1f60:	59 3f       	cpi	r21, 0xF9	; 249
    1f62:	50 f4       	brcc	.+20     	; 0x1f78 <__addsf3x+0x52>
    1f64:	50 3e       	cpi	r21, 0xE0	; 224
    1f66:	68 f1       	brcs	.+90     	; 0x1fc2 <__addsf3x+0x9c>
    1f68:	1a 16       	cp	r1, r26
    1f6a:	f0 40       	sbci	r31, 0x00	; 0
    1f6c:	a2 2f       	mov	r26, r18
    1f6e:	23 2f       	mov	r18, r19
    1f70:	34 2f       	mov	r19, r20
    1f72:	44 27       	eor	r20, r20
    1f74:	58 5f       	subi	r21, 0xF8	; 248
    1f76:	f3 cf       	rjmp	.-26     	; 0x1f5e <__addsf3x+0x38>
    1f78:	46 95       	lsr	r20
    1f7a:	37 95       	ror	r19
    1f7c:	27 95       	ror	r18
    1f7e:	a7 95       	ror	r26
    1f80:	f0 40       	sbci	r31, 0x00	; 0
    1f82:	53 95       	inc	r21
    1f84:	c9 f7       	brne	.-14     	; 0x1f78 <__addsf3x+0x52>
    1f86:	7e f4       	brtc	.+30     	; 0x1fa6 <__addsf3x+0x80>
    1f88:	1f 16       	cp	r1, r31
    1f8a:	ba 0b       	sbc	r27, r26
    1f8c:	62 0b       	sbc	r22, r18
    1f8e:	73 0b       	sbc	r23, r19
    1f90:	84 0b       	sbc	r24, r20
    1f92:	ba f0       	brmi	.+46     	; 0x1fc2 <__addsf3x+0x9c>
    1f94:	91 50       	subi	r25, 0x01	; 1
    1f96:	a1 f0       	breq	.+40     	; 0x1fc0 <__addsf3x+0x9a>
    1f98:	ff 0f       	add	r31, r31
    1f9a:	bb 1f       	adc	r27, r27
    1f9c:	66 1f       	adc	r22, r22
    1f9e:	77 1f       	adc	r23, r23
    1fa0:	88 1f       	adc	r24, r24
    1fa2:	c2 f7       	brpl	.-16     	; 0x1f94 <__addsf3x+0x6e>
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <__addsf3x+0x9c>
    1fa6:	ba 0f       	add	r27, r26
    1fa8:	62 1f       	adc	r22, r18
    1faa:	73 1f       	adc	r23, r19
    1fac:	84 1f       	adc	r24, r20
    1fae:	48 f4       	brcc	.+18     	; 0x1fc2 <__addsf3x+0x9c>
    1fb0:	87 95       	ror	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	b7 95       	ror	r27
    1fb8:	f7 95       	ror	r31
    1fba:	9e 3f       	cpi	r25, 0xFE	; 254
    1fbc:	08 f0       	brcs	.+2      	; 0x1fc0 <__addsf3x+0x9a>
    1fbe:	b0 cf       	rjmp	.-160    	; 0x1f20 <__addsf3+0x28>
    1fc0:	93 95       	inc	r25
    1fc2:	88 0f       	add	r24, r24
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <__addsf3x+0xa2>
    1fc6:	99 27       	eor	r25, r25
    1fc8:	ee 0f       	add	r30, r30
    1fca:	97 95       	ror	r25
    1fcc:	87 95       	ror	r24
    1fce:	08 95       	ret

00001fd0 <__cmpsf2>:
    1fd0:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__fp_cmp>
    1fd4:	08 f4       	brcc	.+2      	; 0x1fd8 <__cmpsf2+0x8>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	08 95       	ret

00001fda <__divsf3>:
    1fda:	0e 94 01 10 	call	0x2002	; 0x2002 <__divsf3x>
    1fde:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__fp_round>
    1fe2:	0e 94 06 11 	call	0x220c	; 0x220c <__fp_pscB>
    1fe6:	58 f0       	brcs	.+22     	; 0x1ffe <__divsf3+0x24>
    1fe8:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fp_pscA>
    1fec:	40 f0       	brcs	.+16     	; 0x1ffe <__divsf3+0x24>
    1fee:	29 f4       	brne	.+10     	; 0x1ffa <__divsf3+0x20>
    1ff0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <__divsf3+0x24>
    1ff4:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_inf>
    1ff8:	51 11       	cpse	r21, r1
    1ffa:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_szero>
    1ffe:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__fp_nan>

00002002 <__divsf3x>:
    2002:	0e 94 1e 11 	call	0x223c	; 0x223c <__fp_split3>
    2006:	68 f3       	brcs	.-38     	; 0x1fe2 <__divsf3+0x8>

00002008 <__divsf3_pse>:
    2008:	99 23       	and	r25, r25
    200a:	b1 f3       	breq	.-20     	; 0x1ff8 <__divsf3+0x1e>
    200c:	55 23       	and	r21, r21
    200e:	91 f3       	breq	.-28     	; 0x1ff4 <__divsf3+0x1a>
    2010:	95 1b       	sub	r25, r21
    2012:	55 0b       	sbc	r21, r21
    2014:	bb 27       	eor	r27, r27
    2016:	aa 27       	eor	r26, r26
    2018:	62 17       	cp	r22, r18
    201a:	73 07       	cpc	r23, r19
    201c:	84 07       	cpc	r24, r20
    201e:	38 f0       	brcs	.+14     	; 0x202e <__divsf3_pse+0x26>
    2020:	9f 5f       	subi	r25, 0xFF	; 255
    2022:	5f 4f       	sbci	r21, 0xFF	; 255
    2024:	22 0f       	add	r18, r18
    2026:	33 1f       	adc	r19, r19
    2028:	44 1f       	adc	r20, r20
    202a:	aa 1f       	adc	r26, r26
    202c:	a9 f3       	breq	.-22     	; 0x2018 <__divsf3_pse+0x10>
    202e:	35 d0       	rcall	.+106    	; 0x209a <__divsf3_pse+0x92>
    2030:	0e 2e       	mov	r0, r30
    2032:	3a f0       	brmi	.+14     	; 0x2042 <__divsf3_pse+0x3a>
    2034:	e0 e8       	ldi	r30, 0x80	; 128
    2036:	32 d0       	rcall	.+100    	; 0x209c <__divsf3_pse+0x94>
    2038:	91 50       	subi	r25, 0x01	; 1
    203a:	50 40       	sbci	r21, 0x00	; 0
    203c:	e6 95       	lsr	r30
    203e:	00 1c       	adc	r0, r0
    2040:	ca f7       	brpl	.-14     	; 0x2034 <__divsf3_pse+0x2c>
    2042:	2b d0       	rcall	.+86     	; 0x209a <__divsf3_pse+0x92>
    2044:	fe 2f       	mov	r31, r30
    2046:	29 d0       	rcall	.+82     	; 0x209a <__divsf3_pse+0x92>
    2048:	66 0f       	add	r22, r22
    204a:	77 1f       	adc	r23, r23
    204c:	88 1f       	adc	r24, r24
    204e:	bb 1f       	adc	r27, r27
    2050:	26 17       	cp	r18, r22
    2052:	37 07       	cpc	r19, r23
    2054:	48 07       	cpc	r20, r24
    2056:	ab 07       	cpc	r26, r27
    2058:	b0 e8       	ldi	r27, 0x80	; 128
    205a:	09 f0       	breq	.+2      	; 0x205e <__divsf3_pse+0x56>
    205c:	bb 0b       	sbc	r27, r27
    205e:	80 2d       	mov	r24, r0
    2060:	bf 01       	movw	r22, r30
    2062:	ff 27       	eor	r31, r31
    2064:	93 58       	subi	r25, 0x83	; 131
    2066:	5f 4f       	sbci	r21, 0xFF	; 255
    2068:	3a f0       	brmi	.+14     	; 0x2078 <__divsf3_pse+0x70>
    206a:	9e 3f       	cpi	r25, 0xFE	; 254
    206c:	51 05       	cpc	r21, r1
    206e:	78 f0       	brcs	.+30     	; 0x208e <__divsf3_pse+0x86>
    2070:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_inf>
    2074:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_szero>
    2078:	5f 3f       	cpi	r21, 0xFF	; 255
    207a:	e4 f3       	brlt	.-8      	; 0x2074 <__divsf3_pse+0x6c>
    207c:	98 3e       	cpi	r25, 0xE8	; 232
    207e:	d4 f3       	brlt	.-12     	; 0x2074 <__divsf3_pse+0x6c>
    2080:	86 95       	lsr	r24
    2082:	77 95       	ror	r23
    2084:	67 95       	ror	r22
    2086:	b7 95       	ror	r27
    2088:	f7 95       	ror	r31
    208a:	9f 5f       	subi	r25, 0xFF	; 255
    208c:	c9 f7       	brne	.-14     	; 0x2080 <__divsf3_pse+0x78>
    208e:	88 0f       	add	r24, r24
    2090:	91 1d       	adc	r25, r1
    2092:	96 95       	lsr	r25
    2094:	87 95       	ror	r24
    2096:	97 f9       	bld	r25, 7
    2098:	08 95       	ret
    209a:	e1 e0       	ldi	r30, 0x01	; 1
    209c:	66 0f       	add	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	bb 1f       	adc	r27, r27
    20a4:	62 17       	cp	r22, r18
    20a6:	73 07       	cpc	r23, r19
    20a8:	84 07       	cpc	r24, r20
    20aa:	ba 07       	cpc	r27, r26
    20ac:	20 f0       	brcs	.+8      	; 0x20b6 <__divsf3_pse+0xae>
    20ae:	62 1b       	sub	r22, r18
    20b0:	73 0b       	sbc	r23, r19
    20b2:	84 0b       	sbc	r24, r20
    20b4:	ba 0b       	sbc	r27, r26
    20b6:	ee 1f       	adc	r30, r30
    20b8:	88 f7       	brcc	.-30     	; 0x209c <__divsf3_pse+0x94>
    20ba:	e0 95       	com	r30
    20bc:	08 95       	ret

000020be <__fixsfsi>:
    20be:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fixunssfsi>
    20c2:	68 94       	set
    20c4:	b1 11       	cpse	r27, r1
    20c6:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_szero>
    20ca:	08 95       	ret

000020cc <__fixunssfsi>:
    20cc:	0e 94 26 11 	call	0x224c	; 0x224c <__fp_splitA>
    20d0:	88 f0       	brcs	.+34     	; 0x20f4 <__fixunssfsi+0x28>
    20d2:	9f 57       	subi	r25, 0x7F	; 127
    20d4:	98 f0       	brcs	.+38     	; 0x20fc <__fixunssfsi+0x30>
    20d6:	b9 2f       	mov	r27, r25
    20d8:	99 27       	eor	r25, r25
    20da:	b7 51       	subi	r27, 0x17	; 23
    20dc:	b0 f0       	brcs	.+44     	; 0x210a <__fixunssfsi+0x3e>
    20de:	e1 f0       	breq	.+56     	; 0x2118 <__fixunssfsi+0x4c>
    20e0:	66 0f       	add	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	88 1f       	adc	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	1a f0       	brmi	.+6      	; 0x20f0 <__fixunssfsi+0x24>
    20ea:	ba 95       	dec	r27
    20ec:	c9 f7       	brne	.-14     	; 0x20e0 <__fixunssfsi+0x14>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <__fixunssfsi+0x4c>
    20f0:	b1 30       	cpi	r27, 0x01	; 1
    20f2:	91 f0       	breq	.+36     	; 0x2118 <__fixunssfsi+0x4c>
    20f4:	0e 94 40 11 	call	0x2280	; 0x2280 <__fp_zero>
    20f8:	b1 e0       	ldi	r27, 0x01	; 1
    20fa:	08 95       	ret
    20fc:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__fp_zero>
    2100:	67 2f       	mov	r22, r23
    2102:	78 2f       	mov	r23, r24
    2104:	88 27       	eor	r24, r24
    2106:	b8 5f       	subi	r27, 0xF8	; 248
    2108:	39 f0       	breq	.+14     	; 0x2118 <__fixunssfsi+0x4c>
    210a:	b9 3f       	cpi	r27, 0xF9	; 249
    210c:	cc f3       	brlt	.-14     	; 0x2100 <__fixunssfsi+0x34>
    210e:	86 95       	lsr	r24
    2110:	77 95       	ror	r23
    2112:	67 95       	ror	r22
    2114:	b3 95       	inc	r27
    2116:	d9 f7       	brne	.-10     	; 0x210e <__fixunssfsi+0x42>
    2118:	3e f4       	brtc	.+14     	; 0x2128 <__fixunssfsi+0x5c>
    211a:	90 95       	com	r25
    211c:	80 95       	com	r24
    211e:	70 95       	com	r23
    2120:	61 95       	neg	r22
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	8f 4f       	sbci	r24, 0xFF	; 255
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	08 95       	ret

0000212a <__floatunsisf>:
    212a:	e8 94       	clt
    212c:	09 c0       	rjmp	.+18     	; 0x2140 <__floatsisf+0x12>

0000212e <__floatsisf>:
    212e:	97 fb       	bst	r25, 7
    2130:	3e f4       	brtc	.+14     	; 0x2140 <__floatsisf+0x12>
    2132:	90 95       	com	r25
    2134:	80 95       	com	r24
    2136:	70 95       	com	r23
    2138:	61 95       	neg	r22
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	99 23       	and	r25, r25
    2142:	a9 f0       	breq	.+42     	; 0x216e <__floatsisf+0x40>
    2144:	f9 2f       	mov	r31, r25
    2146:	96 e9       	ldi	r25, 0x96	; 150
    2148:	bb 27       	eor	r27, r27
    214a:	93 95       	inc	r25
    214c:	f6 95       	lsr	r31
    214e:	87 95       	ror	r24
    2150:	77 95       	ror	r23
    2152:	67 95       	ror	r22
    2154:	b7 95       	ror	r27
    2156:	f1 11       	cpse	r31, r1
    2158:	f8 cf       	rjmp	.-16     	; 0x214a <__floatsisf+0x1c>
    215a:	fa f4       	brpl	.+62     	; 0x219a <__floatsisf+0x6c>
    215c:	bb 0f       	add	r27, r27
    215e:	11 f4       	brne	.+4      	; 0x2164 <__floatsisf+0x36>
    2160:	60 ff       	sbrs	r22, 0
    2162:	1b c0       	rjmp	.+54     	; 0x219a <__floatsisf+0x6c>
    2164:	6f 5f       	subi	r22, 0xFF	; 255
    2166:	7f 4f       	sbci	r23, 0xFF	; 255
    2168:	8f 4f       	sbci	r24, 0xFF	; 255
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	16 c0       	rjmp	.+44     	; 0x219a <__floatsisf+0x6c>
    216e:	88 23       	and	r24, r24
    2170:	11 f0       	breq	.+4      	; 0x2176 <__floatsisf+0x48>
    2172:	96 e9       	ldi	r25, 0x96	; 150
    2174:	11 c0       	rjmp	.+34     	; 0x2198 <__floatsisf+0x6a>
    2176:	77 23       	and	r23, r23
    2178:	21 f0       	breq	.+8      	; 0x2182 <__floatsisf+0x54>
    217a:	9e e8       	ldi	r25, 0x8E	; 142
    217c:	87 2f       	mov	r24, r23
    217e:	76 2f       	mov	r23, r22
    2180:	05 c0       	rjmp	.+10     	; 0x218c <__floatsisf+0x5e>
    2182:	66 23       	and	r22, r22
    2184:	71 f0       	breq	.+28     	; 0x21a2 <__floatsisf+0x74>
    2186:	96 e8       	ldi	r25, 0x86	; 134
    2188:	86 2f       	mov	r24, r22
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	2a f0       	brmi	.+10     	; 0x219a <__floatsisf+0x6c>
    2190:	9a 95       	dec	r25
    2192:	66 0f       	add	r22, r22
    2194:	77 1f       	adc	r23, r23
    2196:	88 1f       	adc	r24, r24
    2198:	da f7       	brpl	.-10     	; 0x2190 <__floatsisf+0x62>
    219a:	88 0f       	add	r24, r24
    219c:	96 95       	lsr	r25
    219e:	87 95       	ror	r24
    21a0:	97 f9       	bld	r25, 7
    21a2:	08 95       	ret

000021a4 <__fp_cmp>:
    21a4:	99 0f       	add	r25, r25
    21a6:	00 08       	sbc	r0, r0
    21a8:	55 0f       	add	r21, r21
    21aa:	aa 0b       	sbc	r26, r26
    21ac:	e0 e8       	ldi	r30, 0x80	; 128
    21ae:	fe ef       	ldi	r31, 0xFE	; 254
    21b0:	16 16       	cp	r1, r22
    21b2:	17 06       	cpc	r1, r23
    21b4:	e8 07       	cpc	r30, r24
    21b6:	f9 07       	cpc	r31, r25
    21b8:	c0 f0       	brcs	.+48     	; 0x21ea <__fp_cmp+0x46>
    21ba:	12 16       	cp	r1, r18
    21bc:	13 06       	cpc	r1, r19
    21be:	e4 07       	cpc	r30, r20
    21c0:	f5 07       	cpc	r31, r21
    21c2:	98 f0       	brcs	.+38     	; 0x21ea <__fp_cmp+0x46>
    21c4:	62 1b       	sub	r22, r18
    21c6:	73 0b       	sbc	r23, r19
    21c8:	84 0b       	sbc	r24, r20
    21ca:	95 0b       	sbc	r25, r21
    21cc:	39 f4       	brne	.+14     	; 0x21dc <__fp_cmp+0x38>
    21ce:	0a 26       	eor	r0, r26
    21d0:	61 f0       	breq	.+24     	; 0x21ea <__fp_cmp+0x46>
    21d2:	23 2b       	or	r18, r19
    21d4:	24 2b       	or	r18, r20
    21d6:	25 2b       	or	r18, r21
    21d8:	21 f4       	brne	.+8      	; 0x21e2 <__fp_cmp+0x3e>
    21da:	08 95       	ret
    21dc:	0a 26       	eor	r0, r26
    21de:	09 f4       	brne	.+2      	; 0x21e2 <__fp_cmp+0x3e>
    21e0:	a1 40       	sbci	r26, 0x01	; 1
    21e2:	a6 95       	lsr	r26
    21e4:	8f ef       	ldi	r24, 0xFF	; 255
    21e6:	81 1d       	adc	r24, r1
    21e8:	81 1d       	adc	r24, r1
    21ea:	08 95       	ret

000021ec <__fp_inf>:
    21ec:	97 f9       	bld	r25, 7
    21ee:	9f 67       	ori	r25, 0x7F	; 127
    21f0:	80 e8       	ldi	r24, 0x80	; 128
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	08 95       	ret

000021f8 <__fp_nan>:
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	80 ec       	ldi	r24, 0xC0	; 192
    21fc:	08 95       	ret

000021fe <__fp_pscA>:
    21fe:	00 24       	eor	r0, r0
    2200:	0a 94       	dec	r0
    2202:	16 16       	cp	r1, r22
    2204:	17 06       	cpc	r1, r23
    2206:	18 06       	cpc	r1, r24
    2208:	09 06       	cpc	r0, r25
    220a:	08 95       	ret

0000220c <__fp_pscB>:
    220c:	00 24       	eor	r0, r0
    220e:	0a 94       	dec	r0
    2210:	12 16       	cp	r1, r18
    2212:	13 06       	cpc	r1, r19
    2214:	14 06       	cpc	r1, r20
    2216:	05 06       	cpc	r0, r21
    2218:	08 95       	ret

0000221a <__fp_round>:
    221a:	09 2e       	mov	r0, r25
    221c:	03 94       	inc	r0
    221e:	00 0c       	add	r0, r0
    2220:	11 f4       	brne	.+4      	; 0x2226 <__fp_round+0xc>
    2222:	88 23       	and	r24, r24
    2224:	52 f0       	brmi	.+20     	; 0x223a <__fp_round+0x20>
    2226:	bb 0f       	add	r27, r27
    2228:	40 f4       	brcc	.+16     	; 0x223a <__fp_round+0x20>
    222a:	bf 2b       	or	r27, r31
    222c:	11 f4       	brne	.+4      	; 0x2232 <__fp_round+0x18>
    222e:	60 ff       	sbrs	r22, 0
    2230:	04 c0       	rjmp	.+8      	; 0x223a <__fp_round+0x20>
    2232:	6f 5f       	subi	r22, 0xFF	; 255
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	8f 4f       	sbci	r24, 0xFF	; 255
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	08 95       	ret

0000223c <__fp_split3>:
    223c:	57 fd       	sbrc	r21, 7
    223e:	90 58       	subi	r25, 0x80	; 128
    2240:	44 0f       	add	r20, r20
    2242:	55 1f       	adc	r21, r21
    2244:	59 f0       	breq	.+22     	; 0x225c <__fp_splitA+0x10>
    2246:	5f 3f       	cpi	r21, 0xFF	; 255
    2248:	71 f0       	breq	.+28     	; 0x2266 <__fp_splitA+0x1a>
    224a:	47 95       	ror	r20

0000224c <__fp_splitA>:
    224c:	88 0f       	add	r24, r24
    224e:	97 fb       	bst	r25, 7
    2250:	99 1f       	adc	r25, r25
    2252:	61 f0       	breq	.+24     	; 0x226c <__fp_splitA+0x20>
    2254:	9f 3f       	cpi	r25, 0xFF	; 255
    2256:	79 f0       	breq	.+30     	; 0x2276 <__fp_splitA+0x2a>
    2258:	87 95       	ror	r24
    225a:	08 95       	ret
    225c:	12 16       	cp	r1, r18
    225e:	13 06       	cpc	r1, r19
    2260:	14 06       	cpc	r1, r20
    2262:	55 1f       	adc	r21, r21
    2264:	f2 cf       	rjmp	.-28     	; 0x224a <__fp_split3+0xe>
    2266:	46 95       	lsr	r20
    2268:	f1 df       	rcall	.-30     	; 0x224c <__fp_splitA>
    226a:	08 c0       	rjmp	.+16     	; 0x227c <__fp_splitA+0x30>
    226c:	16 16       	cp	r1, r22
    226e:	17 06       	cpc	r1, r23
    2270:	18 06       	cpc	r1, r24
    2272:	99 1f       	adc	r25, r25
    2274:	f1 cf       	rjmp	.-30     	; 0x2258 <__fp_splitA+0xc>
    2276:	86 95       	lsr	r24
    2278:	71 05       	cpc	r23, r1
    227a:	61 05       	cpc	r22, r1
    227c:	08 94       	sec
    227e:	08 95       	ret

00002280 <__fp_zero>:
    2280:	e8 94       	clt

00002282 <__fp_szero>:
    2282:	bb 27       	eor	r27, r27
    2284:	66 27       	eor	r22, r22
    2286:	77 27       	eor	r23, r23
    2288:	cb 01       	movw	r24, r22
    228a:	97 f9       	bld	r25, 7
    228c:	08 95       	ret

0000228e <__gesf2>:
    228e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__fp_cmp>
    2292:	08 f4       	brcc	.+2      	; 0x2296 <__gesf2+0x8>
    2294:	8f ef       	ldi	r24, 0xFF	; 255
    2296:	08 95       	ret

00002298 <__mulsf3>:
    2298:	0e 94 5f 11 	call	0x22be	; 0x22be <__mulsf3x>
    229c:	0c 94 0d 11 	jmp	0x221a	; 0x221a <__fp_round>
    22a0:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__fp_pscA>
    22a4:	38 f0       	brcs	.+14     	; 0x22b4 <__mulsf3+0x1c>
    22a6:	0e 94 06 11 	call	0x220c	; 0x220c <__fp_pscB>
    22aa:	20 f0       	brcs	.+8      	; 0x22b4 <__mulsf3+0x1c>
    22ac:	95 23       	and	r25, r21
    22ae:	11 f0       	breq	.+4      	; 0x22b4 <__mulsf3+0x1c>
    22b0:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_inf>
    22b4:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__fp_nan>
    22b8:	11 24       	eor	r1, r1
    22ba:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_szero>

000022be <__mulsf3x>:
    22be:	0e 94 1e 11 	call	0x223c	; 0x223c <__fp_split3>
    22c2:	70 f3       	brcs	.-36     	; 0x22a0 <__mulsf3+0x8>

000022c4 <__mulsf3_pse>:
    22c4:	95 9f       	mul	r25, r21
    22c6:	c1 f3       	breq	.-16     	; 0x22b8 <__mulsf3+0x20>
    22c8:	95 0f       	add	r25, r21
    22ca:	50 e0       	ldi	r21, 0x00	; 0
    22cc:	55 1f       	adc	r21, r21
    22ce:	62 9f       	mul	r22, r18
    22d0:	f0 01       	movw	r30, r0
    22d2:	72 9f       	mul	r23, r18
    22d4:	bb 27       	eor	r27, r27
    22d6:	f0 0d       	add	r31, r0
    22d8:	b1 1d       	adc	r27, r1
    22da:	63 9f       	mul	r22, r19
    22dc:	aa 27       	eor	r26, r26
    22de:	f0 0d       	add	r31, r0
    22e0:	b1 1d       	adc	r27, r1
    22e2:	aa 1f       	adc	r26, r26
    22e4:	64 9f       	mul	r22, r20
    22e6:	66 27       	eor	r22, r22
    22e8:	b0 0d       	add	r27, r0
    22ea:	a1 1d       	adc	r26, r1
    22ec:	66 1f       	adc	r22, r22
    22ee:	82 9f       	mul	r24, r18
    22f0:	22 27       	eor	r18, r18
    22f2:	b0 0d       	add	r27, r0
    22f4:	a1 1d       	adc	r26, r1
    22f6:	62 1f       	adc	r22, r18
    22f8:	73 9f       	mul	r23, r19
    22fa:	b0 0d       	add	r27, r0
    22fc:	a1 1d       	adc	r26, r1
    22fe:	62 1f       	adc	r22, r18
    2300:	83 9f       	mul	r24, r19
    2302:	a0 0d       	add	r26, r0
    2304:	61 1d       	adc	r22, r1
    2306:	22 1f       	adc	r18, r18
    2308:	74 9f       	mul	r23, r20
    230a:	33 27       	eor	r19, r19
    230c:	a0 0d       	add	r26, r0
    230e:	61 1d       	adc	r22, r1
    2310:	23 1f       	adc	r18, r19
    2312:	84 9f       	mul	r24, r20
    2314:	60 0d       	add	r22, r0
    2316:	21 1d       	adc	r18, r1
    2318:	82 2f       	mov	r24, r18
    231a:	76 2f       	mov	r23, r22
    231c:	6a 2f       	mov	r22, r26
    231e:	11 24       	eor	r1, r1
    2320:	9f 57       	subi	r25, 0x7F	; 127
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	9a f0       	brmi	.+38     	; 0x234c <__mulsf3_pse+0x88>
    2326:	f1 f0       	breq	.+60     	; 0x2364 <__mulsf3_pse+0xa0>
    2328:	88 23       	and	r24, r24
    232a:	4a f0       	brmi	.+18     	; 0x233e <__mulsf3_pse+0x7a>
    232c:	ee 0f       	add	r30, r30
    232e:	ff 1f       	adc	r31, r31
    2330:	bb 1f       	adc	r27, r27
    2332:	66 1f       	adc	r22, r22
    2334:	77 1f       	adc	r23, r23
    2336:	88 1f       	adc	r24, r24
    2338:	91 50       	subi	r25, 0x01	; 1
    233a:	50 40       	sbci	r21, 0x00	; 0
    233c:	a9 f7       	brne	.-22     	; 0x2328 <__mulsf3_pse+0x64>
    233e:	9e 3f       	cpi	r25, 0xFE	; 254
    2340:	51 05       	cpc	r21, r1
    2342:	80 f0       	brcs	.+32     	; 0x2364 <__mulsf3_pse+0xa0>
    2344:	0c 94 f6 10 	jmp	0x21ec	; 0x21ec <__fp_inf>
    2348:	0c 94 41 11 	jmp	0x2282	; 0x2282 <__fp_szero>
    234c:	5f 3f       	cpi	r21, 0xFF	; 255
    234e:	e4 f3       	brlt	.-8      	; 0x2348 <__mulsf3_pse+0x84>
    2350:	98 3e       	cpi	r25, 0xE8	; 232
    2352:	d4 f3       	brlt	.-12     	; 0x2348 <__mulsf3_pse+0x84>
    2354:	86 95       	lsr	r24
    2356:	77 95       	ror	r23
    2358:	67 95       	ror	r22
    235a:	b7 95       	ror	r27
    235c:	f7 95       	ror	r31
    235e:	e7 95       	ror	r30
    2360:	9f 5f       	subi	r25, 0xFF	; 255
    2362:	c1 f7       	brne	.-16     	; 0x2354 <__mulsf3_pse+0x90>
    2364:	fe 2b       	or	r31, r30
    2366:	88 0f       	add	r24, r24
    2368:	91 1d       	adc	r25, r1
    236a:	96 95       	lsr	r25
    236c:	87 95       	ror	r24
    236e:	97 f9       	bld	r25, 7
    2370:	08 95       	ret
    2372:	19 f4       	brne	.+6      	; 0x237a <__mulsf3_pse+0xb6>
    2374:	16 f4       	brtc	.+4      	; 0x237a <__mulsf3_pse+0xb6>
    2376:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <__fp_nan>
    237a:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__fp_mpack>

0000237e <sqrt>:
    237e:	0e 94 26 11 	call	0x224c	; 0x224c <__fp_splitA>
    2382:	b8 f3       	brcs	.-18     	; 0x2372 <__mulsf3_pse+0xae>
    2384:	99 23       	and	r25, r25
    2386:	c9 f3       	breq	.-14     	; 0x237a <__mulsf3_pse+0xb6>
    2388:	b6 f3       	brts	.-20     	; 0x2376 <__mulsf3_pse+0xb2>
    238a:	9f 57       	subi	r25, 0x7F	; 127
    238c:	55 0b       	sbc	r21, r21
    238e:	87 ff       	sbrs	r24, 7
    2390:	0e 94 0d 12 	call	0x241a	; 0x241a <__fp_norm2>
    2394:	00 24       	eor	r0, r0
    2396:	a0 e6       	ldi	r26, 0x60	; 96
    2398:	40 ea       	ldi	r20, 0xA0	; 160
    239a:	90 01       	movw	r18, r0
    239c:	80 58       	subi	r24, 0x80	; 128
    239e:	56 95       	lsr	r21
    23a0:	97 95       	ror	r25
    23a2:	28 f4       	brcc	.+10     	; 0x23ae <sqrt+0x30>
    23a4:	80 5c       	subi	r24, 0xC0	; 192
    23a6:	66 0f       	add	r22, r22
    23a8:	77 1f       	adc	r23, r23
    23aa:	88 1f       	adc	r24, r24
    23ac:	20 f0       	brcs	.+8      	; 0x23b6 <sqrt+0x38>
    23ae:	26 17       	cp	r18, r22
    23b0:	37 07       	cpc	r19, r23
    23b2:	48 07       	cpc	r20, r24
    23b4:	30 f4       	brcc	.+12     	; 0x23c2 <sqrt+0x44>
    23b6:	62 1b       	sub	r22, r18
    23b8:	73 0b       	sbc	r23, r19
    23ba:	84 0b       	sbc	r24, r20
    23bc:	20 29       	or	r18, r0
    23be:	31 29       	or	r19, r1
    23c0:	4a 2b       	or	r20, r26
    23c2:	a6 95       	lsr	r26
    23c4:	17 94       	ror	r1
    23c6:	07 94       	ror	r0
    23c8:	20 25       	eor	r18, r0
    23ca:	31 25       	eor	r19, r1
    23cc:	4a 27       	eor	r20, r26
    23ce:	58 f7       	brcc	.-42     	; 0x23a6 <sqrt+0x28>
    23d0:	66 0f       	add	r22, r22
    23d2:	77 1f       	adc	r23, r23
    23d4:	88 1f       	adc	r24, r24
    23d6:	20 f0       	brcs	.+8      	; 0x23e0 <sqrt+0x62>
    23d8:	26 17       	cp	r18, r22
    23da:	37 07       	cpc	r19, r23
    23dc:	48 07       	cpc	r20, r24
    23de:	30 f4       	brcc	.+12     	; 0x23ec <sqrt+0x6e>
    23e0:	62 0b       	sbc	r22, r18
    23e2:	73 0b       	sbc	r23, r19
    23e4:	84 0b       	sbc	r24, r20
    23e6:	20 0d       	add	r18, r0
    23e8:	31 1d       	adc	r19, r1
    23ea:	41 1d       	adc	r20, r1
    23ec:	a0 95       	com	r26
    23ee:	81 f7       	brne	.-32     	; 0x23d0 <sqrt+0x52>
    23f0:	b9 01       	movw	r22, r18
    23f2:	84 2f       	mov	r24, r20
    23f4:	91 58       	subi	r25, 0x81	; 129
    23f6:	88 0f       	add	r24, r24
    23f8:	96 95       	lsr	r25
    23fa:	87 95       	ror	r24
    23fc:	08 95       	ret

000023fe <__fp_mpack>:
    23fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2400:	31 f0       	breq	.+12     	; 0x240e <__fp_mpack_finite+0xc>

00002402 <__fp_mpack_finite>:
    2402:	91 50       	subi	r25, 0x01	; 1
    2404:	20 f4       	brcc	.+8      	; 0x240e <__fp_mpack_finite+0xc>
    2406:	87 95       	ror	r24
    2408:	77 95       	ror	r23
    240a:	67 95       	ror	r22
    240c:	b7 95       	ror	r27
    240e:	88 0f       	add	r24, r24
    2410:	91 1d       	adc	r25, r1
    2412:	96 95       	lsr	r25
    2414:	87 95       	ror	r24
    2416:	97 f9       	bld	r25, 7
    2418:	08 95       	ret

0000241a <__fp_norm2>:
    241a:	91 50       	subi	r25, 0x01	; 1
    241c:	50 40       	sbci	r21, 0x00	; 0
    241e:	66 0f       	add	r22, r22
    2420:	77 1f       	adc	r23, r23
    2422:	88 1f       	adc	r24, r24
    2424:	d2 f7       	brpl	.-12     	; 0x241a <__fp_norm2>
    2426:	08 95       	ret

00002428 <__divmodhi4>:
    2428:	97 fb       	bst	r25, 7
    242a:	07 2e       	mov	r0, r23
    242c:	16 f4       	brtc	.+4      	; 0x2432 <__divmodhi4+0xa>
    242e:	00 94       	com	r0
    2430:	07 d0       	rcall	.+14     	; 0x2440 <__divmodhi4_neg1>
    2432:	77 fd       	sbrc	r23, 7
    2434:	09 d0       	rcall	.+18     	; 0x2448 <__divmodhi4_neg2>
    2436:	0e 94 50 12 	call	0x24a0	; 0x24a0 <__udivmodhi4>
    243a:	07 fc       	sbrc	r0, 7
    243c:	05 d0       	rcall	.+10     	; 0x2448 <__divmodhi4_neg2>
    243e:	3e f4       	brtc	.+14     	; 0x244e <__divmodhi4_exit>

00002440 <__divmodhi4_neg1>:
    2440:	90 95       	com	r25
    2442:	81 95       	neg	r24
    2444:	9f 4f       	sbci	r25, 0xFF	; 255
    2446:	08 95       	ret

00002448 <__divmodhi4_neg2>:
    2448:	70 95       	com	r23
    244a:	61 95       	neg	r22
    244c:	7f 4f       	sbci	r23, 0xFF	; 255

0000244e <__divmodhi4_exit>:
    244e:	08 95       	ret

00002450 <__udivmodsi4>:
    2450:	a1 e2       	ldi	r26, 0x21	; 33
    2452:	1a 2e       	mov	r1, r26
    2454:	aa 1b       	sub	r26, r26
    2456:	bb 1b       	sub	r27, r27
    2458:	fd 01       	movw	r30, r26
    245a:	0d c0       	rjmp	.+26     	; 0x2476 <__udivmodsi4_ep>

0000245c <__udivmodsi4_loop>:
    245c:	aa 1f       	adc	r26, r26
    245e:	bb 1f       	adc	r27, r27
    2460:	ee 1f       	adc	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	a2 17       	cp	r26, r18
    2466:	b3 07       	cpc	r27, r19
    2468:	e4 07       	cpc	r30, r20
    246a:	f5 07       	cpc	r31, r21
    246c:	20 f0       	brcs	.+8      	; 0x2476 <__udivmodsi4_ep>
    246e:	a2 1b       	sub	r26, r18
    2470:	b3 0b       	sbc	r27, r19
    2472:	e4 0b       	sbc	r30, r20
    2474:	f5 0b       	sbc	r31, r21

00002476 <__udivmodsi4_ep>:
    2476:	66 1f       	adc	r22, r22
    2478:	77 1f       	adc	r23, r23
    247a:	88 1f       	adc	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	1a 94       	dec	r1
    2480:	69 f7       	brne	.-38     	; 0x245c <__udivmodsi4_loop>
    2482:	60 95       	com	r22
    2484:	70 95       	com	r23
    2486:	80 95       	com	r24
    2488:	90 95       	com	r25
    248a:	9b 01       	movw	r18, r22
    248c:	ac 01       	movw	r20, r24
    248e:	bd 01       	movw	r22, r26
    2490:	cf 01       	movw	r24, r30
    2492:	08 95       	ret

00002494 <__tablejump2__>:
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	05 90       	lpm	r0, Z+
    249a:	f4 91       	lpm	r31, Z
    249c:	e0 2d       	mov	r30, r0
    249e:	09 94       	ijmp

000024a0 <__udivmodhi4>:
    24a0:	aa 1b       	sub	r26, r26
    24a2:	bb 1b       	sub	r27, r27
    24a4:	51 e1       	ldi	r21, 0x11	; 17
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <__udivmodhi4_ep>

000024a8 <__udivmodhi4_loop>:
    24a8:	aa 1f       	adc	r26, r26
    24aa:	bb 1f       	adc	r27, r27
    24ac:	a6 17       	cp	r26, r22
    24ae:	b7 07       	cpc	r27, r23
    24b0:	10 f0       	brcs	.+4      	; 0x24b6 <__udivmodhi4_ep>
    24b2:	a6 1b       	sub	r26, r22
    24b4:	b7 0b       	sbc	r27, r23

000024b6 <__udivmodhi4_ep>:
    24b6:	88 1f       	adc	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	5a 95       	dec	r21
    24bc:	a9 f7       	brne	.-22     	; 0x24a8 <__udivmodhi4_loop>
    24be:	80 95       	com	r24
    24c0:	90 95       	com	r25
    24c2:	bc 01       	movw	r22, r24
    24c4:	cd 01       	movw	r24, r26
    24c6:	08 95       	ret

000024c8 <malloc>:
    24c8:	0f 93       	push	r16
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	82 30       	cpi	r24, 0x02	; 2
    24d2:	91 05       	cpc	r25, r1
    24d4:	10 f4       	brcc	.+4      	; 0x24da <malloc+0x12>
    24d6:	82 e0       	ldi	r24, 0x02	; 2
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <__flp>
    24de:	f0 91 e9 02 	lds	r31, 0x02E9	; 0x8002e9 <__flp+0x1>
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	a0 e0       	ldi	r26, 0x00	; 0
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	30 97       	sbiw	r30, 0x00	; 0
    24ec:	19 f1       	breq	.+70     	; 0x2534 <malloc+0x6c>
    24ee:	40 81       	ld	r20, Z
    24f0:	51 81       	ldd	r21, Z+1	; 0x01
    24f2:	02 81       	ldd	r16, Z+2	; 0x02
    24f4:	13 81       	ldd	r17, Z+3	; 0x03
    24f6:	48 17       	cp	r20, r24
    24f8:	59 07       	cpc	r21, r25
    24fa:	c8 f0       	brcs	.+50     	; 0x252e <malloc+0x66>
    24fc:	84 17       	cp	r24, r20
    24fe:	95 07       	cpc	r25, r21
    2500:	69 f4       	brne	.+26     	; 0x251c <malloc+0x54>
    2502:	10 97       	sbiw	r26, 0x00	; 0
    2504:	31 f0       	breq	.+12     	; 0x2512 <malloc+0x4a>
    2506:	12 96       	adiw	r26, 0x02	; 2
    2508:	0c 93       	st	X, r16
    250a:	12 97       	sbiw	r26, 0x02	; 2
    250c:	13 96       	adiw	r26, 0x03	; 3
    250e:	1c 93       	st	X, r17
    2510:	27 c0       	rjmp	.+78     	; 0x2560 <malloc+0x98>
    2512:	00 93 e8 02 	sts	0x02E8, r16	; 0x8002e8 <__flp>
    2516:	10 93 e9 02 	sts	0x02E9, r17	; 0x8002e9 <__flp+0x1>
    251a:	22 c0       	rjmp	.+68     	; 0x2560 <malloc+0x98>
    251c:	21 15       	cp	r18, r1
    251e:	31 05       	cpc	r19, r1
    2520:	19 f0       	breq	.+6      	; 0x2528 <malloc+0x60>
    2522:	42 17       	cp	r20, r18
    2524:	53 07       	cpc	r21, r19
    2526:	18 f4       	brcc	.+6      	; 0x252e <malloc+0x66>
    2528:	9a 01       	movw	r18, r20
    252a:	bd 01       	movw	r22, r26
    252c:	ef 01       	movw	r28, r30
    252e:	df 01       	movw	r26, r30
    2530:	f8 01       	movw	r30, r16
    2532:	db cf       	rjmp	.-74     	; 0x24ea <malloc+0x22>
    2534:	21 15       	cp	r18, r1
    2536:	31 05       	cpc	r19, r1
    2538:	f9 f0       	breq	.+62     	; 0x2578 <malloc+0xb0>
    253a:	28 1b       	sub	r18, r24
    253c:	39 0b       	sbc	r19, r25
    253e:	24 30       	cpi	r18, 0x04	; 4
    2540:	31 05       	cpc	r19, r1
    2542:	80 f4       	brcc	.+32     	; 0x2564 <malloc+0x9c>
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	61 15       	cp	r22, r1
    254a:	71 05       	cpc	r23, r1
    254c:	21 f0       	breq	.+8      	; 0x2556 <malloc+0x8e>
    254e:	fb 01       	movw	r30, r22
    2550:	93 83       	std	Z+3, r25	; 0x03
    2552:	82 83       	std	Z+2, r24	; 0x02
    2554:	04 c0       	rjmp	.+8      	; 0x255e <malloc+0x96>
    2556:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <__flp+0x1>
    255a:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <__flp>
    255e:	fe 01       	movw	r30, r28
    2560:	32 96       	adiw	r30, 0x02	; 2
    2562:	44 c0       	rjmp	.+136    	; 0x25ec <malloc+0x124>
    2564:	fe 01       	movw	r30, r28
    2566:	e2 0f       	add	r30, r18
    2568:	f3 1f       	adc	r31, r19
    256a:	81 93       	st	Z+, r24
    256c:	91 93       	st	Z+, r25
    256e:	22 50       	subi	r18, 0x02	; 2
    2570:	31 09       	sbc	r19, r1
    2572:	39 83       	std	Y+1, r19	; 0x01
    2574:	28 83       	st	Y, r18
    2576:	3a c0       	rjmp	.+116    	; 0x25ec <malloc+0x124>
    2578:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__brkval>
    257c:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__brkval+0x1>
    2580:	23 2b       	or	r18, r19
    2582:	41 f4       	brne	.+16     	; 0x2594 <malloc+0xcc>
    2584:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    2588:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    258c:	30 93 e7 02 	sts	0x02E7, r19	; 0x8002e7 <__brkval+0x1>
    2590:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <__brkval>
    2594:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2598:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    259c:	21 15       	cp	r18, r1
    259e:	31 05       	cpc	r19, r1
    25a0:	41 f4       	brne	.+16     	; 0x25b2 <malloc+0xea>
    25a2:	2d b7       	in	r18, 0x3d	; 61
    25a4:	3e b7       	in	r19, 0x3e	; 62
    25a6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    25aa:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    25ae:	24 1b       	sub	r18, r20
    25b0:	35 0b       	sbc	r19, r21
    25b2:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <__brkval>
    25b6:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <__brkval+0x1>
    25ba:	e2 17       	cp	r30, r18
    25bc:	f3 07       	cpc	r31, r19
    25be:	a0 f4       	brcc	.+40     	; 0x25e8 <malloc+0x120>
    25c0:	2e 1b       	sub	r18, r30
    25c2:	3f 0b       	sbc	r19, r31
    25c4:	28 17       	cp	r18, r24
    25c6:	39 07       	cpc	r19, r25
    25c8:	78 f0       	brcs	.+30     	; 0x25e8 <malloc+0x120>
    25ca:	ac 01       	movw	r20, r24
    25cc:	4e 5f       	subi	r20, 0xFE	; 254
    25ce:	5f 4f       	sbci	r21, 0xFF	; 255
    25d0:	24 17       	cp	r18, r20
    25d2:	35 07       	cpc	r19, r21
    25d4:	48 f0       	brcs	.+18     	; 0x25e8 <malloc+0x120>
    25d6:	4e 0f       	add	r20, r30
    25d8:	5f 1f       	adc	r21, r31
    25da:	50 93 e7 02 	sts	0x02E7, r21	; 0x8002e7 <__brkval+0x1>
    25de:	40 93 e6 02 	sts	0x02E6, r20	; 0x8002e6 <__brkval>
    25e2:	81 93       	st	Z+, r24
    25e4:	91 93       	st	Z+, r25
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <malloc+0x124>
    25e8:	e0 e0       	ldi	r30, 0x00	; 0
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	cf 01       	movw	r24, r30
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <free>:
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	09 f4       	brne	.+2      	; 0x2602 <free+0xa>
    2600:	81 c0       	rjmp	.+258    	; 0x2704 <free+0x10c>
    2602:	fc 01       	movw	r30, r24
    2604:	32 97       	sbiw	r30, 0x02	; 2
    2606:	13 82       	std	Z+3, r1	; 0x03
    2608:	12 82       	std	Z+2, r1	; 0x02
    260a:	a0 91 e8 02 	lds	r26, 0x02E8	; 0x8002e8 <__flp>
    260e:	b0 91 e9 02 	lds	r27, 0x02E9	; 0x8002e9 <__flp+0x1>
    2612:	10 97       	sbiw	r26, 0x00	; 0
    2614:	81 f4       	brne	.+32     	; 0x2636 <free+0x3e>
    2616:	20 81       	ld	r18, Z
    2618:	31 81       	ldd	r19, Z+1	; 0x01
    261a:	82 0f       	add	r24, r18
    261c:	93 1f       	adc	r25, r19
    261e:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__brkval>
    2622:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__brkval+0x1>
    2626:	28 17       	cp	r18, r24
    2628:	39 07       	cpc	r19, r25
    262a:	51 f5       	brne	.+84     	; 0x2680 <free+0x88>
    262c:	f0 93 e7 02 	sts	0x02E7, r31	; 0x8002e7 <__brkval+0x1>
    2630:	e0 93 e6 02 	sts	0x02E6, r30	; 0x8002e6 <__brkval>
    2634:	67 c0       	rjmp	.+206    	; 0x2704 <free+0x10c>
    2636:	ed 01       	movw	r28, r26
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	ce 17       	cp	r28, r30
    263e:	df 07       	cpc	r29, r31
    2640:	40 f4       	brcc	.+16     	; 0x2652 <free+0x5a>
    2642:	4a 81       	ldd	r20, Y+2	; 0x02
    2644:	5b 81       	ldd	r21, Y+3	; 0x03
    2646:	9e 01       	movw	r18, r28
    2648:	41 15       	cp	r20, r1
    264a:	51 05       	cpc	r21, r1
    264c:	f1 f0       	breq	.+60     	; 0x268a <free+0x92>
    264e:	ea 01       	movw	r28, r20
    2650:	f5 cf       	rjmp	.-22     	; 0x263c <free+0x44>
    2652:	d3 83       	std	Z+3, r29	; 0x03
    2654:	c2 83       	std	Z+2, r28	; 0x02
    2656:	40 81       	ld	r20, Z
    2658:	51 81       	ldd	r21, Z+1	; 0x01
    265a:	84 0f       	add	r24, r20
    265c:	95 1f       	adc	r25, r21
    265e:	c8 17       	cp	r28, r24
    2660:	d9 07       	cpc	r29, r25
    2662:	59 f4       	brne	.+22     	; 0x267a <free+0x82>
    2664:	88 81       	ld	r24, Y
    2666:	99 81       	ldd	r25, Y+1	; 0x01
    2668:	84 0f       	add	r24, r20
    266a:	95 1f       	adc	r25, r21
    266c:	02 96       	adiw	r24, 0x02	; 2
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	93 83       	std	Z+3, r25	; 0x03
    2678:	82 83       	std	Z+2, r24	; 0x02
    267a:	21 15       	cp	r18, r1
    267c:	31 05       	cpc	r19, r1
    267e:	29 f4       	brne	.+10     	; 0x268a <free+0x92>
    2680:	f0 93 e9 02 	sts	0x02E9, r31	; 0x8002e9 <__flp+0x1>
    2684:	e0 93 e8 02 	sts	0x02E8, r30	; 0x8002e8 <__flp>
    2688:	3d c0       	rjmp	.+122    	; 0x2704 <free+0x10c>
    268a:	e9 01       	movw	r28, r18
    268c:	fb 83       	std	Y+3, r31	; 0x03
    268e:	ea 83       	std	Y+2, r30	; 0x02
    2690:	49 91       	ld	r20, Y+
    2692:	59 91       	ld	r21, Y+
    2694:	c4 0f       	add	r28, r20
    2696:	d5 1f       	adc	r29, r21
    2698:	ec 17       	cp	r30, r28
    269a:	fd 07       	cpc	r31, r29
    269c:	61 f4       	brne	.+24     	; 0x26b6 <free+0xbe>
    269e:	80 81       	ld	r24, Z
    26a0:	91 81       	ldd	r25, Z+1	; 0x01
    26a2:	84 0f       	add	r24, r20
    26a4:	95 1f       	adc	r25, r21
    26a6:	02 96       	adiw	r24, 0x02	; 2
    26a8:	e9 01       	movw	r28, r18
    26aa:	99 83       	std	Y+1, r25	; 0x01
    26ac:	88 83       	st	Y, r24
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	9b 83       	std	Y+3, r25	; 0x03
    26b4:	8a 83       	std	Y+2, r24	; 0x02
    26b6:	e0 e0       	ldi	r30, 0x00	; 0
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	12 96       	adiw	r26, 0x02	; 2
    26bc:	8d 91       	ld	r24, X+
    26be:	9c 91       	ld	r25, X
    26c0:	13 97       	sbiw	r26, 0x03	; 3
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	19 f0       	breq	.+6      	; 0x26cc <free+0xd4>
    26c6:	fd 01       	movw	r30, r26
    26c8:	dc 01       	movw	r26, r24
    26ca:	f7 cf       	rjmp	.-18     	; 0x26ba <free+0xc2>
    26cc:	8d 91       	ld	r24, X+
    26ce:	9c 91       	ld	r25, X
    26d0:	11 97       	sbiw	r26, 0x01	; 1
    26d2:	9d 01       	movw	r18, r26
    26d4:	2e 5f       	subi	r18, 0xFE	; 254
    26d6:	3f 4f       	sbci	r19, 0xFF	; 255
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
    26dc:	20 91 e6 02 	lds	r18, 0x02E6	; 0x8002e6 <__brkval>
    26e0:	30 91 e7 02 	lds	r19, 0x02E7	; 0x8002e7 <__brkval+0x1>
    26e4:	28 17       	cp	r18, r24
    26e6:	39 07       	cpc	r19, r25
    26e8:	69 f4       	brne	.+26     	; 0x2704 <free+0x10c>
    26ea:	30 97       	sbiw	r30, 0x00	; 0
    26ec:	29 f4       	brne	.+10     	; 0x26f8 <free+0x100>
    26ee:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <__flp+0x1>
    26f2:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <__flp>
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <free+0x104>
    26f8:	13 82       	std	Z+3, r1	; 0x03
    26fa:	12 82       	std	Z+2, r1	; 0x02
    26fc:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <__brkval+0x1>
    2700:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <__brkval>
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <memset>:
    270a:	dc 01       	movw	r26, r24
    270c:	01 c0       	rjmp	.+2      	; 0x2710 <memset+0x6>
    270e:	6d 93       	st	X+, r22
    2710:	41 50       	subi	r20, 0x01	; 1
    2712:	50 40       	sbci	r21, 0x00	; 0
    2714:	e0 f7       	brcc	.-8      	; 0x270e <memset+0x4>
    2716:	08 95       	ret

00002718 <strcat>:
    2718:	fb 01       	movw	r30, r22
    271a:	dc 01       	movw	r26, r24
    271c:	0d 90       	ld	r0, X+
    271e:	00 20       	and	r0, r0
    2720:	e9 f7       	brne	.-6      	; 0x271c <strcat+0x4>
    2722:	11 97       	sbiw	r26, 0x01	; 1
    2724:	01 90       	ld	r0, Z+
    2726:	0d 92       	st	X+, r0
    2728:	00 20       	and	r0, r0
    272a:	e1 f7       	brne	.-8      	; 0x2724 <strcat+0xc>
    272c:	08 95       	ret

0000272e <strcpy>:
    272e:	fb 01       	movw	r30, r22
    2730:	dc 01       	movw	r26, r24
    2732:	01 90       	ld	r0, Z+
    2734:	0d 92       	st	X+, r0
    2736:	00 20       	and	r0, r0
    2738:	e1 f7       	brne	.-8      	; 0x2732 <strcpy+0x4>
    273a:	08 95       	ret

0000273c <strstr>:
    273c:	fb 01       	movw	r30, r22
    273e:	51 91       	ld	r21, Z+
    2740:	55 23       	and	r21, r21
    2742:	a9 f0       	breq	.+42     	; 0x276e <strstr+0x32>
    2744:	bf 01       	movw	r22, r30
    2746:	dc 01       	movw	r26, r24
    2748:	4d 91       	ld	r20, X+
    274a:	45 17       	cp	r20, r21
    274c:	41 11       	cpse	r20, r1
    274e:	e1 f7       	brne	.-8      	; 0x2748 <strstr+0xc>
    2750:	59 f4       	brne	.+22     	; 0x2768 <strstr+0x2c>
    2752:	cd 01       	movw	r24, r26
    2754:	01 90       	ld	r0, Z+
    2756:	00 20       	and	r0, r0
    2758:	49 f0       	breq	.+18     	; 0x276c <strstr+0x30>
    275a:	4d 91       	ld	r20, X+
    275c:	40 15       	cp	r20, r0
    275e:	41 11       	cpse	r20, r1
    2760:	c9 f3       	breq	.-14     	; 0x2754 <strstr+0x18>
    2762:	fb 01       	movw	r30, r22
    2764:	41 11       	cpse	r20, r1
    2766:	ef cf       	rjmp	.-34     	; 0x2746 <strstr+0xa>
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	08 95       	ret

00002770 <__itoa_ncheck>:
    2770:	bb 27       	eor	r27, r27
    2772:	4a 30       	cpi	r20, 0x0A	; 10
    2774:	31 f4       	brne	.+12     	; 0x2782 <__itoa_ncheck+0x12>
    2776:	99 23       	and	r25, r25
    2778:	22 f4       	brpl	.+8      	; 0x2782 <__itoa_ncheck+0x12>
    277a:	bd e2       	ldi	r27, 0x2D	; 45
    277c:	90 95       	com	r25
    277e:	81 95       	neg	r24
    2780:	9f 4f       	sbci	r25, 0xFF	; 255
    2782:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__utoa_common>

00002786 <__utoa_ncheck>:
    2786:	bb 27       	eor	r27, r27

00002788 <__utoa_common>:
    2788:	fb 01       	movw	r30, r22
    278a:	55 27       	eor	r21, r21
    278c:	aa 27       	eor	r26, r26
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	aa 1f       	adc	r26, r26
    2794:	a4 17       	cp	r26, r20
    2796:	10 f0       	brcs	.+4      	; 0x279c <__utoa_common+0x14>
    2798:	a4 1b       	sub	r26, r20
    279a:	83 95       	inc	r24
    279c:	50 51       	subi	r21, 0x10	; 16
    279e:	b9 f7       	brne	.-18     	; 0x278e <__utoa_common+0x6>
    27a0:	a0 5d       	subi	r26, 0xD0	; 208
    27a2:	aa 33       	cpi	r26, 0x3A	; 58
    27a4:	08 f0       	brcs	.+2      	; 0x27a8 <__utoa_common+0x20>
    27a6:	a9 5d       	subi	r26, 0xD9	; 217
    27a8:	a1 93       	st	Z+, r26
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	79 f7       	brne	.-34     	; 0x278c <__utoa_common+0x4>
    27ae:	b1 11       	cpse	r27, r1
    27b0:	b1 93       	st	Z+, r27
    27b2:	11 92       	st	Z+, r1
    27b4:	cb 01       	movw	r24, r22
    27b6:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <strrev>

000027ba <sprintf>:
    27ba:	ae e0       	ldi	r26, 0x0E	; 14
    27bc:	b0 e0       	ldi	r27, 0x00	; 0
    27be:	e3 ee       	ldi	r30, 0xE3	; 227
    27c0:	f3 e1       	ldi	r31, 0x13	; 19
    27c2:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__prologue_saves__+0x1c>
    27c6:	0d 89       	ldd	r16, Y+21	; 0x15
    27c8:	1e 89       	ldd	r17, Y+22	; 0x16
    27ca:	86 e0       	ldi	r24, 0x06	; 6
    27cc:	8c 83       	std	Y+4, r24	; 0x04
    27ce:	1a 83       	std	Y+2, r17	; 0x02
    27d0:	09 83       	std	Y+1, r16	; 0x01
    27d2:	8f ef       	ldi	r24, 0xFF	; 255
    27d4:	9f e7       	ldi	r25, 0x7F	; 127
    27d6:	9e 83       	std	Y+6, r25	; 0x06
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	ae 01       	movw	r20, r28
    27dc:	47 5e       	subi	r20, 0xE7	; 231
    27de:	5f 4f       	sbci	r21, 0xFF	; 255
    27e0:	6f 89       	ldd	r22, Y+23	; 0x17
    27e2:	78 8d       	ldd	r23, Y+24	; 0x18
    27e4:	ce 01       	movw	r24, r28
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <vfprintf>
    27ec:	ef 81       	ldd	r30, Y+7	; 0x07
    27ee:	f8 85       	ldd	r31, Y+8	; 0x08
    27f0:	e0 0f       	add	r30, r16
    27f2:	f1 1f       	adc	r31, r17
    27f4:	10 82       	st	Z, r1
    27f6:	2e 96       	adiw	r28, 0x0e	; 14
    27f8:	e4 e0       	ldi	r30, 0x04	; 4
    27fa:	0c 94 ca 16 	jmp	0x2d94	; 0x2d94 <__epilogue_restores__+0x1c>

000027fe <vfprintf>:
    27fe:	ab e0       	ldi	r26, 0x0B	; 11
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e5 e0       	ldi	r30, 0x05	; 5
    2804:	f4 e1       	ldi	r31, 0x14	; 20
    2806:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__prologue_saves__>
    280a:	6c 01       	movw	r12, r24
    280c:	7b 01       	movw	r14, r22
    280e:	8a 01       	movw	r16, r20
    2810:	fc 01       	movw	r30, r24
    2812:	17 82       	std	Z+7, r1	; 0x07
    2814:	16 82       	std	Z+6, r1	; 0x06
    2816:	83 81       	ldd	r24, Z+3	; 0x03
    2818:	81 ff       	sbrs	r24, 1
    281a:	cc c1       	rjmp	.+920    	; 0x2bb4 <vfprintf+0x3b6>
    281c:	ce 01       	movw	r24, r28
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	3c 01       	movw	r6, r24
    2822:	f6 01       	movw	r30, r12
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	f7 01       	movw	r30, r14
    2828:	93 fd       	sbrc	r25, 3
    282a:	85 91       	lpm	r24, Z+
    282c:	93 ff       	sbrs	r25, 3
    282e:	81 91       	ld	r24, Z+
    2830:	7f 01       	movw	r14, r30
    2832:	88 23       	and	r24, r24
    2834:	09 f4       	brne	.+2      	; 0x2838 <vfprintf+0x3a>
    2836:	ba c1       	rjmp	.+884    	; 0x2bac <vfprintf+0x3ae>
    2838:	85 32       	cpi	r24, 0x25	; 37
    283a:	39 f4       	brne	.+14     	; 0x284a <vfprintf+0x4c>
    283c:	93 fd       	sbrc	r25, 3
    283e:	85 91       	lpm	r24, Z+
    2840:	93 ff       	sbrs	r25, 3
    2842:	81 91       	ld	r24, Z+
    2844:	7f 01       	movw	r14, r30
    2846:	85 32       	cpi	r24, 0x25	; 37
    2848:	29 f4       	brne	.+10     	; 0x2854 <vfprintf+0x56>
    284a:	b6 01       	movw	r22, r12
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2852:	e7 cf       	rjmp	.-50     	; 0x2822 <vfprintf+0x24>
    2854:	91 2c       	mov	r9, r1
    2856:	21 2c       	mov	r2, r1
    2858:	31 2c       	mov	r3, r1
    285a:	ff e1       	ldi	r31, 0x1F	; 31
    285c:	f3 15       	cp	r31, r3
    285e:	d8 f0       	brcs	.+54     	; 0x2896 <vfprintf+0x98>
    2860:	8b 32       	cpi	r24, 0x2B	; 43
    2862:	79 f0       	breq	.+30     	; 0x2882 <vfprintf+0x84>
    2864:	38 f4       	brcc	.+14     	; 0x2874 <vfprintf+0x76>
    2866:	80 32       	cpi	r24, 0x20	; 32
    2868:	79 f0       	breq	.+30     	; 0x2888 <vfprintf+0x8a>
    286a:	83 32       	cpi	r24, 0x23	; 35
    286c:	a1 f4       	brne	.+40     	; 0x2896 <vfprintf+0x98>
    286e:	23 2d       	mov	r18, r3
    2870:	20 61       	ori	r18, 0x10	; 16
    2872:	1d c0       	rjmp	.+58     	; 0x28ae <vfprintf+0xb0>
    2874:	8d 32       	cpi	r24, 0x2D	; 45
    2876:	61 f0       	breq	.+24     	; 0x2890 <vfprintf+0x92>
    2878:	80 33       	cpi	r24, 0x30	; 48
    287a:	69 f4       	brne	.+26     	; 0x2896 <vfprintf+0x98>
    287c:	23 2d       	mov	r18, r3
    287e:	21 60       	ori	r18, 0x01	; 1
    2880:	16 c0       	rjmp	.+44     	; 0x28ae <vfprintf+0xb0>
    2882:	83 2d       	mov	r24, r3
    2884:	82 60       	ori	r24, 0x02	; 2
    2886:	38 2e       	mov	r3, r24
    2888:	e3 2d       	mov	r30, r3
    288a:	e4 60       	ori	r30, 0x04	; 4
    288c:	3e 2e       	mov	r3, r30
    288e:	2a c0       	rjmp	.+84     	; 0x28e4 <vfprintf+0xe6>
    2890:	f3 2d       	mov	r31, r3
    2892:	f8 60       	ori	r31, 0x08	; 8
    2894:	1d c0       	rjmp	.+58     	; 0x28d0 <vfprintf+0xd2>
    2896:	37 fc       	sbrc	r3, 7
    2898:	2d c0       	rjmp	.+90     	; 0x28f4 <vfprintf+0xf6>
    289a:	20 ed       	ldi	r18, 0xD0	; 208
    289c:	28 0f       	add	r18, r24
    289e:	2a 30       	cpi	r18, 0x0A	; 10
    28a0:	40 f0       	brcs	.+16     	; 0x28b2 <vfprintf+0xb4>
    28a2:	8e 32       	cpi	r24, 0x2E	; 46
    28a4:	b9 f4       	brne	.+46     	; 0x28d4 <vfprintf+0xd6>
    28a6:	36 fc       	sbrc	r3, 6
    28a8:	81 c1       	rjmp	.+770    	; 0x2bac <vfprintf+0x3ae>
    28aa:	23 2d       	mov	r18, r3
    28ac:	20 64       	ori	r18, 0x40	; 64
    28ae:	32 2e       	mov	r3, r18
    28b0:	19 c0       	rjmp	.+50     	; 0x28e4 <vfprintf+0xe6>
    28b2:	36 fe       	sbrs	r3, 6
    28b4:	06 c0       	rjmp	.+12     	; 0x28c2 <vfprintf+0xc4>
    28b6:	8a e0       	ldi	r24, 0x0A	; 10
    28b8:	98 9e       	mul	r9, r24
    28ba:	20 0d       	add	r18, r0
    28bc:	11 24       	eor	r1, r1
    28be:	92 2e       	mov	r9, r18
    28c0:	11 c0       	rjmp	.+34     	; 0x28e4 <vfprintf+0xe6>
    28c2:	ea e0       	ldi	r30, 0x0A	; 10
    28c4:	2e 9e       	mul	r2, r30
    28c6:	20 0d       	add	r18, r0
    28c8:	11 24       	eor	r1, r1
    28ca:	22 2e       	mov	r2, r18
    28cc:	f3 2d       	mov	r31, r3
    28ce:	f0 62       	ori	r31, 0x20	; 32
    28d0:	3f 2e       	mov	r3, r31
    28d2:	08 c0       	rjmp	.+16     	; 0x28e4 <vfprintf+0xe6>
    28d4:	8c 36       	cpi	r24, 0x6C	; 108
    28d6:	21 f4       	brne	.+8      	; 0x28e0 <vfprintf+0xe2>
    28d8:	83 2d       	mov	r24, r3
    28da:	80 68       	ori	r24, 0x80	; 128
    28dc:	38 2e       	mov	r3, r24
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <vfprintf+0xe6>
    28e0:	88 36       	cpi	r24, 0x68	; 104
    28e2:	41 f4       	brne	.+16     	; 0x28f4 <vfprintf+0xf6>
    28e4:	f7 01       	movw	r30, r14
    28e6:	93 fd       	sbrc	r25, 3
    28e8:	85 91       	lpm	r24, Z+
    28ea:	93 ff       	sbrs	r25, 3
    28ec:	81 91       	ld	r24, Z+
    28ee:	7f 01       	movw	r14, r30
    28f0:	81 11       	cpse	r24, r1
    28f2:	b3 cf       	rjmp	.-154    	; 0x285a <vfprintf+0x5c>
    28f4:	98 2f       	mov	r25, r24
    28f6:	9f 7d       	andi	r25, 0xDF	; 223
    28f8:	95 54       	subi	r25, 0x45	; 69
    28fa:	93 30       	cpi	r25, 0x03	; 3
    28fc:	28 f4       	brcc	.+10     	; 0x2908 <vfprintf+0x10a>
    28fe:	0c 5f       	subi	r16, 0xFC	; 252
    2900:	1f 4f       	sbci	r17, 0xFF	; 255
    2902:	9f e3       	ldi	r25, 0x3F	; 63
    2904:	99 83       	std	Y+1, r25	; 0x01
    2906:	0d c0       	rjmp	.+26     	; 0x2922 <vfprintf+0x124>
    2908:	83 36       	cpi	r24, 0x63	; 99
    290a:	31 f0       	breq	.+12     	; 0x2918 <vfprintf+0x11a>
    290c:	83 37       	cpi	r24, 0x73	; 115
    290e:	71 f0       	breq	.+28     	; 0x292c <vfprintf+0x12e>
    2910:	83 35       	cpi	r24, 0x53	; 83
    2912:	09 f0       	breq	.+2      	; 0x2916 <vfprintf+0x118>
    2914:	59 c0       	rjmp	.+178    	; 0x29c8 <vfprintf+0x1ca>
    2916:	21 c0       	rjmp	.+66     	; 0x295a <vfprintf+0x15c>
    2918:	f8 01       	movw	r30, r16
    291a:	80 81       	ld	r24, Z
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	0e 5f       	subi	r16, 0xFE	; 254
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	88 24       	eor	r8, r8
    2924:	83 94       	inc	r8
    2926:	91 2c       	mov	r9, r1
    2928:	53 01       	movw	r10, r6
    292a:	13 c0       	rjmp	.+38     	; 0x2952 <vfprintf+0x154>
    292c:	28 01       	movw	r4, r16
    292e:	f2 e0       	ldi	r31, 0x02	; 2
    2930:	4f 0e       	add	r4, r31
    2932:	51 1c       	adc	r5, r1
    2934:	f8 01       	movw	r30, r16
    2936:	a0 80       	ld	r10, Z
    2938:	b1 80       	ldd	r11, Z+1	; 0x01
    293a:	36 fe       	sbrs	r3, 6
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <vfprintf+0x146>
    293e:	69 2d       	mov	r22, r9
    2940:	70 e0       	ldi	r23, 0x00	; 0
    2942:	02 c0       	rjmp	.+4      	; 0x2948 <vfprintf+0x14a>
    2944:	6f ef       	ldi	r22, 0xFF	; 255
    2946:	7f ef       	ldi	r23, 0xFF	; 255
    2948:	c5 01       	movw	r24, r10
    294a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <strnlen>
    294e:	4c 01       	movw	r8, r24
    2950:	82 01       	movw	r16, r4
    2952:	f3 2d       	mov	r31, r3
    2954:	ff 77       	andi	r31, 0x7F	; 127
    2956:	3f 2e       	mov	r3, r31
    2958:	16 c0       	rjmp	.+44     	; 0x2986 <vfprintf+0x188>
    295a:	28 01       	movw	r4, r16
    295c:	22 e0       	ldi	r18, 0x02	; 2
    295e:	42 0e       	add	r4, r18
    2960:	51 1c       	adc	r5, r1
    2962:	f8 01       	movw	r30, r16
    2964:	a0 80       	ld	r10, Z
    2966:	b1 80       	ldd	r11, Z+1	; 0x01
    2968:	36 fe       	sbrs	r3, 6
    296a:	03 c0       	rjmp	.+6      	; 0x2972 <vfprintf+0x174>
    296c:	69 2d       	mov	r22, r9
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <vfprintf+0x178>
    2972:	6f ef       	ldi	r22, 0xFF	; 255
    2974:	7f ef       	ldi	r23, 0xFF	; 255
    2976:	c5 01       	movw	r24, r10
    2978:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <strnlen_P>
    297c:	4c 01       	movw	r8, r24
    297e:	f3 2d       	mov	r31, r3
    2980:	f0 68       	ori	r31, 0x80	; 128
    2982:	3f 2e       	mov	r3, r31
    2984:	82 01       	movw	r16, r4
    2986:	33 fc       	sbrc	r3, 3
    2988:	1b c0       	rjmp	.+54     	; 0x29c0 <vfprintf+0x1c2>
    298a:	82 2d       	mov	r24, r2
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	88 16       	cp	r8, r24
    2990:	99 06       	cpc	r9, r25
    2992:	b0 f4       	brcc	.+44     	; 0x29c0 <vfprintf+0x1c2>
    2994:	b6 01       	movw	r22, r12
    2996:	80 e2       	ldi	r24, 0x20	; 32
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    299e:	2a 94       	dec	r2
    29a0:	f4 cf       	rjmp	.-24     	; 0x298a <vfprintf+0x18c>
    29a2:	f5 01       	movw	r30, r10
    29a4:	37 fc       	sbrc	r3, 7
    29a6:	85 91       	lpm	r24, Z+
    29a8:	37 fe       	sbrs	r3, 7
    29aa:	81 91       	ld	r24, Z+
    29ac:	5f 01       	movw	r10, r30
    29ae:	b6 01       	movw	r22, r12
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    29b6:	21 10       	cpse	r2, r1
    29b8:	2a 94       	dec	r2
    29ba:	21 e0       	ldi	r18, 0x01	; 1
    29bc:	82 1a       	sub	r8, r18
    29be:	91 08       	sbc	r9, r1
    29c0:	81 14       	cp	r8, r1
    29c2:	91 04       	cpc	r9, r1
    29c4:	71 f7       	brne	.-36     	; 0x29a2 <vfprintf+0x1a4>
    29c6:	e8 c0       	rjmp	.+464    	; 0x2b98 <vfprintf+0x39a>
    29c8:	84 36       	cpi	r24, 0x64	; 100
    29ca:	11 f0       	breq	.+4      	; 0x29d0 <vfprintf+0x1d2>
    29cc:	89 36       	cpi	r24, 0x69	; 105
    29ce:	41 f5       	brne	.+80     	; 0x2a20 <vfprintf+0x222>
    29d0:	f8 01       	movw	r30, r16
    29d2:	37 fe       	sbrs	r3, 7
    29d4:	07 c0       	rjmp	.+14     	; 0x29e4 <vfprintf+0x1e6>
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	93 81       	ldd	r25, Z+3	; 0x03
    29de:	0c 5f       	subi	r16, 0xFC	; 252
    29e0:	1f 4f       	sbci	r17, 0xFF	; 255
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <vfprintf+0x1f6>
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	07 2e       	mov	r0, r23
    29ea:	00 0c       	add	r0, r0
    29ec:	88 0b       	sbc	r24, r24
    29ee:	99 0b       	sbc	r25, r25
    29f0:	0e 5f       	subi	r16, 0xFE	; 254
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	f3 2d       	mov	r31, r3
    29f6:	ff 76       	andi	r31, 0x6F	; 111
    29f8:	3f 2e       	mov	r3, r31
    29fa:	97 ff       	sbrs	r25, 7
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <vfprintf+0x212>
    29fe:	90 95       	com	r25
    2a00:	80 95       	com	r24
    2a02:	70 95       	com	r23
    2a04:	61 95       	neg	r22
    2a06:	7f 4f       	sbci	r23, 0xFF	; 255
    2a08:	8f 4f       	sbci	r24, 0xFF	; 255
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	f0 68       	ori	r31, 0x80	; 128
    2a0e:	3f 2e       	mov	r3, r31
    2a10:	2a e0       	ldi	r18, 0x0A	; 10
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	a3 01       	movw	r20, r6
    2a16:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__ultoa_invert>
    2a1a:	88 2e       	mov	r8, r24
    2a1c:	86 18       	sub	r8, r6
    2a1e:	45 c0       	rjmp	.+138    	; 0x2aaa <vfprintf+0x2ac>
    2a20:	85 37       	cpi	r24, 0x75	; 117
    2a22:	31 f4       	brne	.+12     	; 0x2a30 <vfprintf+0x232>
    2a24:	23 2d       	mov	r18, r3
    2a26:	2f 7e       	andi	r18, 0xEF	; 239
    2a28:	b2 2e       	mov	r11, r18
    2a2a:	2a e0       	ldi	r18, 0x0A	; 10
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	25 c0       	rjmp	.+74     	; 0x2a7a <vfprintf+0x27c>
    2a30:	93 2d       	mov	r25, r3
    2a32:	99 7f       	andi	r25, 0xF9	; 249
    2a34:	b9 2e       	mov	r11, r25
    2a36:	8f 36       	cpi	r24, 0x6F	; 111
    2a38:	c1 f0       	breq	.+48     	; 0x2a6a <vfprintf+0x26c>
    2a3a:	18 f4       	brcc	.+6      	; 0x2a42 <vfprintf+0x244>
    2a3c:	88 35       	cpi	r24, 0x58	; 88
    2a3e:	79 f0       	breq	.+30     	; 0x2a5e <vfprintf+0x260>
    2a40:	b5 c0       	rjmp	.+362    	; 0x2bac <vfprintf+0x3ae>
    2a42:	80 37       	cpi	r24, 0x70	; 112
    2a44:	19 f0       	breq	.+6      	; 0x2a4c <vfprintf+0x24e>
    2a46:	88 37       	cpi	r24, 0x78	; 120
    2a48:	21 f0       	breq	.+8      	; 0x2a52 <vfprintf+0x254>
    2a4a:	b0 c0       	rjmp	.+352    	; 0x2bac <vfprintf+0x3ae>
    2a4c:	e9 2f       	mov	r30, r25
    2a4e:	e0 61       	ori	r30, 0x10	; 16
    2a50:	be 2e       	mov	r11, r30
    2a52:	b4 fe       	sbrs	r11, 4
    2a54:	0d c0       	rjmp	.+26     	; 0x2a70 <vfprintf+0x272>
    2a56:	fb 2d       	mov	r31, r11
    2a58:	f4 60       	ori	r31, 0x04	; 4
    2a5a:	bf 2e       	mov	r11, r31
    2a5c:	09 c0       	rjmp	.+18     	; 0x2a70 <vfprintf+0x272>
    2a5e:	34 fe       	sbrs	r3, 4
    2a60:	0a c0       	rjmp	.+20     	; 0x2a76 <vfprintf+0x278>
    2a62:	29 2f       	mov	r18, r25
    2a64:	26 60       	ori	r18, 0x06	; 6
    2a66:	b2 2e       	mov	r11, r18
    2a68:	06 c0       	rjmp	.+12     	; 0x2a76 <vfprintf+0x278>
    2a6a:	28 e0       	ldi	r18, 0x08	; 8
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	05 c0       	rjmp	.+10     	; 0x2a7a <vfprintf+0x27c>
    2a70:	20 e1       	ldi	r18, 0x10	; 16
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <vfprintf+0x27c>
    2a76:	20 e1       	ldi	r18, 0x10	; 16
    2a78:	32 e0       	ldi	r19, 0x02	; 2
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	b7 fe       	sbrs	r11, 7
    2a7e:	07 c0       	rjmp	.+14     	; 0x2a8e <vfprintf+0x290>
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	0c 5f       	subi	r16, 0xFC	; 252
    2a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8c:	06 c0       	rjmp	.+12     	; 0x2a9a <vfprintf+0x29c>
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 5f       	subi	r16, 0xFE	; 254
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	a3 01       	movw	r20, r6
    2a9c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__ultoa_invert>
    2aa0:	88 2e       	mov	r8, r24
    2aa2:	86 18       	sub	r8, r6
    2aa4:	fb 2d       	mov	r31, r11
    2aa6:	ff 77       	andi	r31, 0x7F	; 127
    2aa8:	3f 2e       	mov	r3, r31
    2aaa:	36 fe       	sbrs	r3, 6
    2aac:	0d c0       	rjmp	.+26     	; 0x2ac8 <vfprintf+0x2ca>
    2aae:	23 2d       	mov	r18, r3
    2ab0:	2e 7f       	andi	r18, 0xFE	; 254
    2ab2:	a2 2e       	mov	r10, r18
    2ab4:	89 14       	cp	r8, r9
    2ab6:	58 f4       	brcc	.+22     	; 0x2ace <vfprintf+0x2d0>
    2ab8:	34 fe       	sbrs	r3, 4
    2aba:	0b c0       	rjmp	.+22     	; 0x2ad2 <vfprintf+0x2d4>
    2abc:	32 fc       	sbrc	r3, 2
    2abe:	09 c0       	rjmp	.+18     	; 0x2ad2 <vfprintf+0x2d4>
    2ac0:	83 2d       	mov	r24, r3
    2ac2:	8e 7e       	andi	r24, 0xEE	; 238
    2ac4:	a8 2e       	mov	r10, r24
    2ac6:	05 c0       	rjmp	.+10     	; 0x2ad2 <vfprintf+0x2d4>
    2ac8:	b8 2c       	mov	r11, r8
    2aca:	a3 2c       	mov	r10, r3
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <vfprintf+0x2d6>
    2ace:	b8 2c       	mov	r11, r8
    2ad0:	01 c0       	rjmp	.+2      	; 0x2ad4 <vfprintf+0x2d6>
    2ad2:	b9 2c       	mov	r11, r9
    2ad4:	a4 fe       	sbrs	r10, 4
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <vfprintf+0x2f8>
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e8 0d       	add	r30, r8
    2adc:	f1 1d       	adc	r31, r1
    2ade:	80 81       	ld	r24, Z
    2ae0:	80 33       	cpi	r24, 0x30	; 48
    2ae2:	21 f4       	brne	.+8      	; 0x2aec <vfprintf+0x2ee>
    2ae4:	9a 2d       	mov	r25, r10
    2ae6:	99 7e       	andi	r25, 0xE9	; 233
    2ae8:	a9 2e       	mov	r10, r25
    2aea:	09 c0       	rjmp	.+18     	; 0x2afe <vfprintf+0x300>
    2aec:	a2 fe       	sbrs	r10, 2
    2aee:	06 c0       	rjmp	.+12     	; 0x2afc <vfprintf+0x2fe>
    2af0:	b3 94       	inc	r11
    2af2:	b3 94       	inc	r11
    2af4:	04 c0       	rjmp	.+8      	; 0x2afe <vfprintf+0x300>
    2af6:	8a 2d       	mov	r24, r10
    2af8:	86 78       	andi	r24, 0x86	; 134
    2afa:	09 f0       	breq	.+2      	; 0x2afe <vfprintf+0x300>
    2afc:	b3 94       	inc	r11
    2afe:	a3 fc       	sbrc	r10, 3
    2b00:	11 c0       	rjmp	.+34     	; 0x2b24 <vfprintf+0x326>
    2b02:	a0 fe       	sbrs	r10, 0
    2b04:	06 c0       	rjmp	.+12     	; 0x2b12 <vfprintf+0x314>
    2b06:	b2 14       	cp	r11, r2
    2b08:	88 f4       	brcc	.+34     	; 0x2b2c <vfprintf+0x32e>
    2b0a:	28 0c       	add	r2, r8
    2b0c:	92 2c       	mov	r9, r2
    2b0e:	9b 18       	sub	r9, r11
    2b10:	0e c0       	rjmp	.+28     	; 0x2b2e <vfprintf+0x330>
    2b12:	b2 14       	cp	r11, r2
    2b14:	60 f4       	brcc	.+24     	; 0x2b2e <vfprintf+0x330>
    2b16:	b6 01       	movw	r22, r12
    2b18:	80 e2       	ldi	r24, 0x20	; 32
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2b20:	b3 94       	inc	r11
    2b22:	f7 cf       	rjmp	.-18     	; 0x2b12 <vfprintf+0x314>
    2b24:	b2 14       	cp	r11, r2
    2b26:	18 f4       	brcc	.+6      	; 0x2b2e <vfprintf+0x330>
    2b28:	2b 18       	sub	r2, r11
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <vfprintf+0x332>
    2b2c:	98 2c       	mov	r9, r8
    2b2e:	21 2c       	mov	r2, r1
    2b30:	a4 fe       	sbrs	r10, 4
    2b32:	10 c0       	rjmp	.+32     	; 0x2b54 <vfprintf+0x356>
    2b34:	b6 01       	movw	r22, r12
    2b36:	80 e3       	ldi	r24, 0x30	; 48
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2b3e:	a2 fe       	sbrs	r10, 2
    2b40:	17 c0       	rjmp	.+46     	; 0x2b70 <vfprintf+0x372>
    2b42:	a1 fc       	sbrc	r10, 1
    2b44:	03 c0       	rjmp	.+6      	; 0x2b4c <vfprintf+0x34e>
    2b46:	88 e7       	ldi	r24, 0x78	; 120
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <vfprintf+0x352>
    2b4c:	88 e5       	ldi	r24, 0x58	; 88
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	b6 01       	movw	r22, r12
    2b52:	0c c0       	rjmp	.+24     	; 0x2b6c <vfprintf+0x36e>
    2b54:	8a 2d       	mov	r24, r10
    2b56:	86 78       	andi	r24, 0x86	; 134
    2b58:	59 f0       	breq	.+22     	; 0x2b70 <vfprintf+0x372>
    2b5a:	a1 fe       	sbrs	r10, 1
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <vfprintf+0x364>
    2b5e:	8b e2       	ldi	r24, 0x2B	; 43
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <vfprintf+0x366>
    2b62:	80 e2       	ldi	r24, 0x20	; 32
    2b64:	a7 fc       	sbrc	r10, 7
    2b66:	8d e2       	ldi	r24, 0x2D	; 45
    2b68:	b6 01       	movw	r22, r12
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2b70:	89 14       	cp	r8, r9
    2b72:	38 f4       	brcc	.+14     	; 0x2b82 <vfprintf+0x384>
    2b74:	b6 01       	movw	r22, r12
    2b76:	80 e3       	ldi	r24, 0x30	; 48
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2b7e:	9a 94       	dec	r9
    2b80:	f7 cf       	rjmp	.-18     	; 0x2b70 <vfprintf+0x372>
    2b82:	8a 94       	dec	r8
    2b84:	f3 01       	movw	r30, r6
    2b86:	e8 0d       	add	r30, r8
    2b88:	f1 1d       	adc	r31, r1
    2b8a:	80 81       	ld	r24, Z
    2b8c:	b6 01       	movw	r22, r12
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2b94:	81 10       	cpse	r8, r1
    2b96:	f5 cf       	rjmp	.-22     	; 0x2b82 <vfprintf+0x384>
    2b98:	22 20       	and	r2, r2
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <vfprintf+0x3a0>
    2b9c:	42 ce       	rjmp	.-892    	; 0x2822 <vfprintf+0x24>
    2b9e:	b6 01       	movw	r22, r12
    2ba0:	80 e2       	ldi	r24, 0x20	; 32
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2ba8:	2a 94       	dec	r2
    2baa:	f6 cf       	rjmp	.-20     	; 0x2b98 <vfprintf+0x39a>
    2bac:	f6 01       	movw	r30, r12
    2bae:	86 81       	ldd	r24, Z+6	; 0x06
    2bb0:	97 81       	ldd	r25, Z+7	; 0x07
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <vfprintf+0x3ba>
    2bb4:	8f ef       	ldi	r24, 0xFF	; 255
    2bb6:	9f ef       	ldi	r25, 0xFF	; 255
    2bb8:	2b 96       	adiw	r28, 0x0b	; 11
    2bba:	e2 e1       	ldi	r30, 0x12	; 18
    2bbc:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__epilogue_restores__>

00002bc0 <strnlen_P>:
    2bc0:	fc 01       	movw	r30, r24
    2bc2:	05 90       	lpm	r0, Z+
    2bc4:	61 50       	subi	r22, 0x01	; 1
    2bc6:	70 40       	sbci	r23, 0x00	; 0
    2bc8:	01 10       	cpse	r0, r1
    2bca:	d8 f7       	brcc	.-10     	; 0x2bc2 <strnlen_P+0x2>
    2bcc:	80 95       	com	r24
    2bce:	90 95       	com	r25
    2bd0:	8e 0f       	add	r24, r30
    2bd2:	9f 1f       	adc	r25, r31
    2bd4:	08 95       	ret

00002bd6 <strnlen>:
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	61 50       	subi	r22, 0x01	; 1
    2bda:	70 40       	sbci	r23, 0x00	; 0
    2bdc:	01 90       	ld	r0, Z+
    2bde:	01 10       	cpse	r0, r1
    2be0:	d8 f7       	brcc	.-10     	; 0x2bd8 <strnlen+0x2>
    2be2:	80 95       	com	r24
    2be4:	90 95       	com	r25
    2be6:	8e 0f       	add	r24, r30
    2be8:	9f 1f       	adc	r25, r31
    2bea:	08 95       	ret

00002bec <strrev>:
    2bec:	dc 01       	movw	r26, r24
    2bee:	fc 01       	movw	r30, r24
    2bf0:	67 2f       	mov	r22, r23
    2bf2:	71 91       	ld	r23, Z+
    2bf4:	77 23       	and	r23, r23
    2bf6:	e1 f7       	brne	.-8      	; 0x2bf0 <strrev+0x4>
    2bf8:	32 97       	sbiw	r30, 0x02	; 2
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <strrev+0x18>
    2bfc:	7c 91       	ld	r23, X
    2bfe:	6d 93       	st	X+, r22
    2c00:	70 83       	st	Z, r23
    2c02:	62 91       	ld	r22, -Z
    2c04:	ae 17       	cp	r26, r30
    2c06:	bf 07       	cpc	r27, r31
    2c08:	c8 f3       	brcs	.-14     	; 0x2bfc <strrev+0x10>
    2c0a:	08 95       	ret

00002c0c <fputc>:
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	fb 01       	movw	r30, r22
    2c16:	23 81       	ldd	r18, Z+3	; 0x03
    2c18:	21 fd       	sbrc	r18, 1
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <fputc+0x16>
    2c1c:	8f ef       	ldi	r24, 0xFF	; 255
    2c1e:	9f ef       	ldi	r25, 0xFF	; 255
    2c20:	2c c0       	rjmp	.+88     	; 0x2c7a <fputc+0x6e>
    2c22:	22 ff       	sbrs	r18, 2
    2c24:	16 c0       	rjmp	.+44     	; 0x2c52 <fputc+0x46>
    2c26:	46 81       	ldd	r20, Z+6	; 0x06
    2c28:	57 81       	ldd	r21, Z+7	; 0x07
    2c2a:	24 81       	ldd	r18, Z+4	; 0x04
    2c2c:	35 81       	ldd	r19, Z+5	; 0x05
    2c2e:	42 17       	cp	r20, r18
    2c30:	53 07       	cpc	r21, r19
    2c32:	44 f4       	brge	.+16     	; 0x2c44 <fputc+0x38>
    2c34:	a0 81       	ld	r26, Z
    2c36:	b1 81       	ldd	r27, Z+1	; 0x01
    2c38:	9d 01       	movw	r18, r26
    2c3a:	2f 5f       	subi	r18, 0xFF	; 255
    2c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3e:	31 83       	std	Z+1, r19	; 0x01
    2c40:	20 83       	st	Z, r18
    2c42:	8c 93       	st	X, r24
    2c44:	26 81       	ldd	r18, Z+6	; 0x06
    2c46:	37 81       	ldd	r19, Z+7	; 0x07
    2c48:	2f 5f       	subi	r18, 0xFF	; 255
    2c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c4c:	37 83       	std	Z+7, r19	; 0x07
    2c4e:	26 83       	std	Z+6, r18	; 0x06
    2c50:	14 c0       	rjmp	.+40     	; 0x2c7a <fputc+0x6e>
    2c52:	8b 01       	movw	r16, r22
    2c54:	ec 01       	movw	r28, r24
    2c56:	fb 01       	movw	r30, r22
    2c58:	00 84       	ldd	r0, Z+8	; 0x08
    2c5a:	f1 85       	ldd	r31, Z+9	; 0x09
    2c5c:	e0 2d       	mov	r30, r0
    2c5e:	09 95       	icall
    2c60:	89 2b       	or	r24, r25
    2c62:	e1 f6       	brne	.-72     	; 0x2c1c <fputc+0x10>
    2c64:	d8 01       	movw	r26, r16
    2c66:	16 96       	adiw	r26, 0x06	; 6
    2c68:	8d 91       	ld	r24, X+
    2c6a:	9c 91       	ld	r25, X
    2c6c:	17 97       	sbiw	r26, 0x07	; 7
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	17 96       	adiw	r26, 0x07	; 7
    2c72:	9c 93       	st	X, r25
    2c74:	8e 93       	st	-X, r24
    2c76:	16 97       	sbiw	r26, 0x06	; 6
    2c78:	ce 01       	movw	r24, r28
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <__ultoa_invert>:
    2c84:	fa 01       	movw	r30, r20
    2c86:	aa 27       	eor	r26, r26
    2c88:	28 30       	cpi	r18, 0x08	; 8
    2c8a:	51 f1       	breq	.+84     	; 0x2ce0 <__ultoa_invert+0x5c>
    2c8c:	20 31       	cpi	r18, 0x10	; 16
    2c8e:	81 f1       	breq	.+96     	; 0x2cf0 <__ultoa_invert+0x6c>
    2c90:	e8 94       	clt
    2c92:	6f 93       	push	r22
    2c94:	6e 7f       	andi	r22, 0xFE	; 254
    2c96:	6e 5f       	subi	r22, 0xFE	; 254
    2c98:	7f 4f       	sbci	r23, 0xFF	; 255
    2c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9e:	af 4f       	sbci	r26, 0xFF	; 255
    2ca0:	b1 e0       	ldi	r27, 0x01	; 1
    2ca2:	3e d0       	rcall	.+124    	; 0x2d20 <__ultoa_invert+0x9c>
    2ca4:	b4 e0       	ldi	r27, 0x04	; 4
    2ca6:	3c d0       	rcall	.+120    	; 0x2d20 <__ultoa_invert+0x9c>
    2ca8:	67 0f       	add	r22, r23
    2caa:	78 1f       	adc	r23, r24
    2cac:	89 1f       	adc	r24, r25
    2cae:	9a 1f       	adc	r25, r26
    2cb0:	a1 1d       	adc	r26, r1
    2cb2:	68 0f       	add	r22, r24
    2cb4:	79 1f       	adc	r23, r25
    2cb6:	8a 1f       	adc	r24, r26
    2cb8:	91 1d       	adc	r25, r1
    2cba:	a1 1d       	adc	r26, r1
    2cbc:	6a 0f       	add	r22, r26
    2cbe:	71 1d       	adc	r23, r1
    2cc0:	81 1d       	adc	r24, r1
    2cc2:	91 1d       	adc	r25, r1
    2cc4:	a1 1d       	adc	r26, r1
    2cc6:	20 d0       	rcall	.+64     	; 0x2d08 <__ultoa_invert+0x84>
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <__ultoa_invert+0x48>
    2cca:	68 94       	set
    2ccc:	3f 91       	pop	r19
    2cce:	2a e0       	ldi	r18, 0x0A	; 10
    2cd0:	26 9f       	mul	r18, r22
    2cd2:	11 24       	eor	r1, r1
    2cd4:	30 19       	sub	r19, r0
    2cd6:	30 5d       	subi	r19, 0xD0	; 208
    2cd8:	31 93       	st	Z+, r19
    2cda:	de f6       	brtc	.-74     	; 0x2c92 <__ultoa_invert+0xe>
    2cdc:	cf 01       	movw	r24, r30
    2cde:	08 95       	ret
    2ce0:	46 2f       	mov	r20, r22
    2ce2:	47 70       	andi	r20, 0x07	; 7
    2ce4:	40 5d       	subi	r20, 0xD0	; 208
    2ce6:	41 93       	st	Z+, r20
    2ce8:	b3 e0       	ldi	r27, 0x03	; 3
    2cea:	0f d0       	rcall	.+30     	; 0x2d0a <__ultoa_invert+0x86>
    2cec:	c9 f7       	brne	.-14     	; 0x2ce0 <__ultoa_invert+0x5c>
    2cee:	f6 cf       	rjmp	.-20     	; 0x2cdc <__ultoa_invert+0x58>
    2cf0:	46 2f       	mov	r20, r22
    2cf2:	4f 70       	andi	r20, 0x0F	; 15
    2cf4:	40 5d       	subi	r20, 0xD0	; 208
    2cf6:	4a 33       	cpi	r20, 0x3A	; 58
    2cf8:	18 f0       	brcs	.+6      	; 0x2d00 <__ultoa_invert+0x7c>
    2cfa:	49 5d       	subi	r20, 0xD9	; 217
    2cfc:	31 fd       	sbrc	r19, 1
    2cfe:	40 52       	subi	r20, 0x20	; 32
    2d00:	41 93       	st	Z+, r20
    2d02:	02 d0       	rcall	.+4      	; 0x2d08 <__ultoa_invert+0x84>
    2d04:	a9 f7       	brne	.-22     	; 0x2cf0 <__ultoa_invert+0x6c>
    2d06:	ea cf       	rjmp	.-44     	; 0x2cdc <__ultoa_invert+0x58>
    2d08:	b4 e0       	ldi	r27, 0x04	; 4
    2d0a:	a6 95       	lsr	r26
    2d0c:	97 95       	ror	r25
    2d0e:	87 95       	ror	r24
    2d10:	77 95       	ror	r23
    2d12:	67 95       	ror	r22
    2d14:	ba 95       	dec	r27
    2d16:	c9 f7       	brne	.-14     	; 0x2d0a <__ultoa_invert+0x86>
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	61 05       	cpc	r22, r1
    2d1c:	71 05       	cpc	r23, r1
    2d1e:	08 95       	ret
    2d20:	9b 01       	movw	r18, r22
    2d22:	ac 01       	movw	r20, r24
    2d24:	0a 2e       	mov	r0, r26
    2d26:	06 94       	lsr	r0
    2d28:	57 95       	ror	r21
    2d2a:	47 95       	ror	r20
    2d2c:	37 95       	ror	r19
    2d2e:	27 95       	ror	r18
    2d30:	ba 95       	dec	r27
    2d32:	c9 f7       	brne	.-14     	; 0x2d26 <__ultoa_invert+0xa2>
    2d34:	62 0f       	add	r22, r18
    2d36:	73 1f       	adc	r23, r19
    2d38:	84 1f       	adc	r24, r20
    2d3a:	95 1f       	adc	r25, r21
    2d3c:	a0 1d       	adc	r26, r0
    2d3e:	08 95       	ret

00002d40 <__prologue_saves__>:
    2d40:	2f 92       	push	r2
    2d42:	3f 92       	push	r3
    2d44:	4f 92       	push	r4
    2d46:	5f 92       	push	r5
    2d48:	6f 92       	push	r6
    2d4a:	7f 92       	push	r7
    2d4c:	8f 92       	push	r8
    2d4e:	9f 92       	push	r9
    2d50:	af 92       	push	r10
    2d52:	bf 92       	push	r11
    2d54:	cf 92       	push	r12
    2d56:	df 92       	push	r13
    2d58:	ef 92       	push	r14
    2d5a:	ff 92       	push	r15
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	ca 1b       	sub	r28, r26
    2d6a:	db 0b       	sbc	r29, r27
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	09 94       	ijmp

00002d78 <__epilogue_restores__>:
    2d78:	2a 88       	ldd	r2, Y+18	; 0x12
    2d7a:	39 88       	ldd	r3, Y+17	; 0x11
    2d7c:	48 88       	ldd	r4, Y+16	; 0x10
    2d7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d80:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d82:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d84:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d86:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d88:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d8a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d8c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d8e:	df 80       	ldd	r13, Y+7	; 0x07
    2d90:	ee 80       	ldd	r14, Y+6	; 0x06
    2d92:	fd 80       	ldd	r15, Y+5	; 0x05
    2d94:	0c 81       	ldd	r16, Y+4	; 0x04
    2d96:	1b 81       	ldd	r17, Y+3	; 0x03
    2d98:	aa 81       	ldd	r26, Y+2	; 0x02
    2d9a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d9c:	ce 0f       	add	r28, r30
    2d9e:	d1 1d       	adc	r29, r1
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	ed 01       	movw	r28, r26
    2dac:	08 95       	ret

00002dae <_exit>:
    2dae:	f8 94       	cli

00002db0 <__stop_program>:
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <__stop_program>
